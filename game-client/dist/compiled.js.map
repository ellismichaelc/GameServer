{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","js/jquery-1.12.4.min.js","js/objects/water.js","js/renderers/CSS3DRenderer.js","src/app.js","src/basemodel.js","src/camera.js","src/game.js","src/login.js","src/models.js","src/player.js","src/players.js","src/renderer.js","src/scene.js","src/shaders.js","src/sockets.js","src/terrain.js","src/terrain_tile.js","src/views.js","src/webview.js","src/world.js","../node_modules/after/index.js","../node_modules/arraybuffer.slice/index.js","../node_modules/backo2/index.js","../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js","../node_modules/blob/index.js","../node_modules/browser-resolve/empty.js","../node_modules/component-bind/index.js","../node_modules/component-emitter/index.js","../node_modules/component-inherit/index.js","../node_modules/engine.io-client/lib/index.js","../node_modules/engine.io-client/lib/socket.js","../node_modules/engine.io-client/lib/transport.js","../node_modules/engine.io-client/lib/transports/index.js","../node_modules/engine.io-client/lib/transports/polling-jsonp.js","../node_modules/engine.io-client/lib/transports/polling-xhr.js","../node_modules/engine.io-client/lib/transports/polling.js","../node_modules/engine.io-client/lib/transports/websocket.js","../node_modules/engine.io-client/lib/xmlhttprequest.js","../node_modules/engine.io-client/node_modules/debug/src/browser.js","../node_modules/engine.io-client/node_modules/debug/src/debug.js","../node_modules/engine.io-client/node_modules/ms/index.js","../node_modules/engine.io-parser/lib/browser.js","../node_modules/engine.io-parser/lib/keys.js","../node_modules/engine.io-parser/lib/utf8.js","../node_modules/has-binary2/index.js","../node_modules/has-binary2/node_modules/isarray/index.js","../node_modules/has-cors/index.js","../node_modules/indexof/index.js","../node_modules/parseqs/index.js","../node_modules/parseuri/index.js","../node_modules/process/browser.js","../node_modules/socket.io-client/lib/index.js","../node_modules/socket.io-client/lib/manager.js","../node_modules/socket.io-client/lib/on.js","../node_modules/socket.io-client/lib/socket.js","../node_modules/socket.io-client/lib/url.js","../node_modules/socket.io-client/node_modules/debug/src/browser.js","../node_modules/socket.io-parser/binary.js","../node_modules/socket.io-parser/index.js","../node_modules/socket.io-parser/is-buffer.js","../node_modules/socket.io-parser/node_modules/debug/src/browser.js","../node_modules/to-array/index.js","../node_modules/yeast/index.js","../shared/shared/mcec.js"],"names":[],"mappings":"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CAA6B,IAA7B,EAAmC,YAAnC;;AAEA;;AAEA,gBAAI,SAAS,IAAI,KAAK,2BAAT,CAAsC,IAAtC,EAA4C,WAA5C,EAAyD,KAAzD,EAAgE,YAAhE,CAAb;AACA,gBAAI,OAAO,IAAI,KAAK,WAAT,CAAsB,MAAtB,CAAX;;AAEA,wBAAY,QAAZ,CAAqB,WAArB,GAAmC,IAAnC;AACA;;AAEA,gBAAK,OAAO,CAAZ,EAAgB;AACZ,qBAAK,eAAL,CAAqB,IAArB,CAA2B,KAA3B;AACA;AACA,qBAAK,kBAAL,CAAyB,CAAzB;AACH;;AAED,iBAAK,aAAL,CAAmB,YAAnB,CAAiC,IAAjC;AACH;;;;;;AAML,OAAO,OAAP,GAAiB,KAAjB;;;ACn3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChGA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvnvurvrrzxlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlazhZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACbzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ICpEM,I;AAEF,oBAAc;AAAA;;AAEV,aAAK,QAAL,GAAgB,YAAW;AACvB,gBAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B;AACA,uBAAQ,OAAO,QAAP,CAAgB,QAAhB,CAAyB,OAAzB,CAAiC,WAAjC,MAAkD,CAAC,CAAnD,IAAwD,OAAO,QAAP,CAAgB,QAAhB,CAAyB,OAAzB,CAAiC,WAAjC,MAAkD,CAAC,CAA3G,IAAgH,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,WAA7B,MAA8C,CAAC,CAAvK;AACH,aA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","file":"compiled.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */\n!function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m=\"1.12.4\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray||function(a){return\"array\"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||\"object\"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,\"constructor\")&&!k.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?i[j.call(a)]||\"object\":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return\"string\"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),\"function\"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(a,b){i[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=!!a&&\"length\"in a&&a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",L=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",M=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",N=\"\\\\[\"+L+\"*(\"+M+\")(?:\"+L+\"*([*^$|!~]?=)\"+L+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+M+\"))|)\"+L+\"*\\\\]\",O=\":(\"+M+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+N+\")*)|.*)\\\\)|)\",P=new RegExp(L+\"+\",\"g\"),Q=new RegExp(\"^\"+L+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+L+\"+$\",\"g\"),R=new RegExp(\"^\"+L+\"*,\"+L+\"*\"),S=new RegExp(\"^\"+L+\"*([>+~]|\"+L+\")\"+L+\"*\"),T=new RegExp(\"=\"+L+\"*([^\\\\]'\\\"]*?)\"+L+\"*\\\\]\",\"g\"),U=new RegExp(O),V=new RegExp(\"^\"+M+\"$\"),W={ID:new RegExp(\"^#(\"+M+\")\"),CLASS:new RegExp(\"^\\\\.(\"+M+\")\"),TAG:new RegExp(\"^(\"+M+\"|[*])\"),ATTR:new RegExp(\"^\"+N),PSEUDO:new RegExp(\"^\"+O),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+L+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+L+\"*(?:([+-]|)\"+L+\"*(\\\\d+)|))\"+L+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+K+\")$\",\"i\"),needsContext:new RegExp(\"^\"+L+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+L+\"*((?:-\\\\d)?\\\\d*)\"+L+\"*\\\\)|)(?=[^-]|$)\",\"i\")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\\d$/i,Z=/^[^{]+\\{\\s*\\[native \\w/,$=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,_=/[+~]/,aa=/'|\\\\/g,ba=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+L+\"?|(\"+L+\")|.)\",\"ig\"),ca=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],\"string\"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+\" \"]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if(\"object\"!==b.nodeName.toLowerCase()){(k=b.getAttribute(\"id\"))?k=k.replace(aa,\"\\\\$&\"):b.setAttribute(\"id\",k=u),r=g(a),h=r.length,l=V.test(k)?\"#\"+k:\"[id='\"+k+\"']\";while(h--)r[h]=l+\" \"+qa(r[h]);s=r.join(\",\"),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute(\"id\")}}}return i(a.replace(Q,\"$1\"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split(\"|\"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&\"undefined\"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener(\"unload\",da,!1):e.attachEvent&&e.attachEvent(\"onunload\",da)),c.attributes=ia(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(\"undefined\"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c=\"undefined\"!=typeof a.getAttributeNode&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return\"undefined\"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return\"undefined\"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML=\"<a id='\"+u+\"'></a><select id='\"+u+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowcapture^='']\").length&&q.push(\"[*^$]=\"+L+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+L+\"*(?:value|\"+K+\")\"),a.querySelectorAll(\"[id~=\"+u+\"-]\").length||q.push(\"~=\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\"),a.querySelectorAll(\"a#\"+u+\"+*\").length||q.push(\".#.+[+~]\")}),ia(function(a){var b=n.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+L+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",O)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,\"='$1']\"),c.matchesSelector&&p&&!A[b+\" \"]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||\"\").replace(ba,ca),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+L+\")\"+a+\"(\"+L+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||\"undefined\"!=typeof a.getAttribute&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e.replace(P,\" \")+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,\"$1\"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||\"\")||fa.error(\"unsupported lang: \"+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(Q,\"$1\"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s=\"0\",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG(\"*\",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),ia(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||ja(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||ja(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute(\"disabled\")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[\":\"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/,y=/^.[^:#\\[\\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if(\"string\"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+\" \"+a:a,c},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,\"string\"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,\"string\"==typeof a){if(e=\"<\"===a.charAt(0)&&\">\"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}if(f=d.getElementById(e[2]),f&&f.parentNode){if(f.id!==e[2])return A.find(a);this.length=1,this[0]=f}return this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?\"undefined\"!=typeof c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||\"string\"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?\"string\"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,\"parentNode\")},parentsUntil:function(a,b,c){return u(a,\"parentNode\",c)},next:function(a){return F(a,\"nextSibling\")},prev:function(a){return F(a,\"previousSibling\")},nextAll:function(a){return u(a,\"nextSibling\")},prevAll:function(a){return u(a,\"previousSibling\")},nextUntil:function(a,b,c){return u(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return u(a,\"previousSibling\",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return n.nodeName(a,\"iframe\")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||(e=n.uniqueSort(e)),D.test(a)&&(e=e.reverse())),this.pushStack(e)}});var G=/\\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a=\"string\"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:\"\")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&\"string\"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c=\"\",this},disabled:function(){return!f},lock:function(){return e=!0,c||j.disable(),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",n.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",n.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",n.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler(\"ready\"),n(d).off(\"ready\"))))}});function J(){d.addEventListener?(d.removeEventListener(\"DOMContentLoaded\",K),a.removeEventListener(\"load\",K)):(d.detachEvent(\"onreadystatechange\",K),a.detachEvent(\"onload\",K))}function K(){(d.addEventListener||\"load\"===a.event.type||\"complete\"===d.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),\"complete\"===d.readyState||\"loading\"!==d.readyState&&!d.documentElement.doScroll)a.setTimeout(n.ready);else if(d.addEventListener)d.addEventListener(\"DOMContentLoaded\",K),a.addEventListener(\"load\",K);else{d.attachEvent(\"onreadystatechange\",K),a.attachEvent(\"onload\",K);var c=!1;try{c=null==a.frameElement&&d.documentElement}catch(e){}c&&c.doScroll&&!function f(){if(!n.isReady){try{c.doScroll(\"left\")}catch(b){return a.setTimeout(f,50)}J(),n.ready()}}()}return I.promise(b)},n.ready.promise();var L;for(L in n(l))break;l.ownFirst=\"0\"===L,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c,e;c=d.getElementsByTagName(\"body\")[0],c&&c.style&&(b=d.createElement(\"div\"),e=d.createElement(\"div\"),e.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(e).appendChild(b),\"undefined\"!=typeof b.style.zoom&&(b.style.cssText=\"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\",l.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(e))}),function(){var a=d.createElement(\"div\");l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}a=null}();var M=function(a){var b=n.noData[(a.nodeName+\" \").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute(\"classid\")===b},N=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d=\"data-\"+b.replace(O,\"-$1\").toLowerCase();if(c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0;\n}return c}function Q(a){var b;for(b in a)if((\"data\"!==b||!n.isEmptyObject(a[b]))&&\"toJSON\"!==b)return!1;return!0}function R(a,b,d,e){if(M(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||\"string\"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),\"object\"!=typeof b&&\"function\"!=typeof b||(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),\"string\"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f}}function S(a,b,c){if(M(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(\" \")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=void 0)}}}n.extend({cache:{},noData:{\"applet \":!0,\"embed \":!0,\"object \":\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,\"parsedAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));n._data(f,\"parsedAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks(\"once memory\").add(function(){n._removeData(a,b+\"queue\"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=n._data(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}}),function(){var a;l.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,e;return c=d.getElementsByTagName(\"body\")[0],c&&c.style?(b=d.createElement(\"div\"),e=d.createElement(\"div\"),e.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(e).appendChild(b),\"undefined\"!=typeof b.style.zoom&&(b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1\",b.appendChild(d.createElement(\"div\")).style.width=\"5px\",a=3!==b.offsetWidth),c.removeChild(e),a):void 0}}();var T=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,U=new RegExp(\"^(?:([+-])=|)(\"+T+\")([a-z%]*)$\",\"i\"),V=[\"Top\",\"Right\",\"Bottom\",\"Left\"],W=function(a,b){return a=b||a,\"none\"===n.css(a,\"display\")||!n.contains(a.ownerDocument,a)};function X(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,\"\")},i=h(),j=c&&c[3]||(n.cssNumber[b]?\"\":\"px\"),k=(n.cssNumber[b]||\"px\"!==j&&+i)&&U.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||\".5\",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var Y=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===n.type(c)){e=!0;for(h in c)Y(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},Z=/^(?:checkbox|radio)$/i,$=/<([\\w:-]+)/,_=/^$|\\/(?:java|ecma)script/i,aa=/^\\s+/,ba=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video\";function ca(a){var b=ba.split(\"|\"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}!function(){var a=d.createElement(\"div\"),b=d.createDocumentFragment(),c=d.createElement(\"input\");a.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",l.leadingWhitespace=3===a.firstChild.nodeType,l.tbody=!a.getElementsByTagName(\"tbody\").length,l.htmlSerialize=!!a.getElementsByTagName(\"link\").length,l.html5Clone=\"<:nav></:nav>\"!==d.createElement(\"nav\").cloneNode(!0).outerHTML,c.type=\"checkbox\",c.checked=!0,b.appendChild(c),l.appendChecked=c.checked,a.innerHTML=\"<textarea>x</textarea>\",l.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue,b.appendChild(a),c=d.createElement(\"input\"),c.setAttribute(\"type\",\"radio\"),c.setAttribute(\"checked\",\"checked\"),c.setAttribute(\"name\",\"t\"),a.appendChild(c),l.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!!a.addEventListener,a[n.expando]=1,l.attributes=!a.getAttribute(n.expando)}();var da={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:l.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]};da.optgroup=da.option,da.tbody=da.tfoot=da.colgroup=da.caption=da.thead,da.th=da.td;function ea(a,b){var c,d,e=0,f=\"undefined\"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||\"*\"):\"undefined\"!=typeof a.querySelectorAll?a.querySelectorAll(b||\"*\"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,ea(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function fa(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,\"globalEval\",!b||n._data(b[d],\"globalEval\"))}var ga=/<|&#?\\w+;/,ha=/<tbody/i;function ia(a){Z.test(a.type)&&(a.defaultChecked=a.checked)}function ja(a,b,c,d,e){for(var f,g,h,i,j,k,m,o=a.length,p=ca(b),q=[],r=0;o>r;r++)if(g=a[r],g||0===g)if(\"object\"===n.type(g))n.merge(q,g.nodeType?[g]:g);else if(ga.test(g)){i=i||p.appendChild(b.createElement(\"div\")),j=($.exec(g)||[\"\",\"\"])[1].toLowerCase(),m=da[j]||da._default,i.innerHTML=m[1]+n.htmlPrefilter(g)+m[2],f=m[0];while(f--)i=i.lastChild;if(!l.leadingWhitespace&&aa.test(g)&&q.push(b.createTextNode(aa.exec(g)[0])),!l.tbody){g=\"table\"!==j||ha.test(g)?\"<table>\"!==m[1]||ha.test(g)?0:i:i.firstChild,f=g&&g.childNodes.length;while(f--)n.nodeName(k=g.childNodes[f],\"tbody\")&&!k.childNodes.length&&g.removeChild(k)}n.merge(q,i.childNodes),i.textContent=\"\";while(i.firstChild)i.removeChild(i.firstChild);i=p.lastChild}else q.push(b.createTextNode(g));i&&p.removeChild(i),l.appendChecked||n.grep(ea(q,\"input\"),ia),r=0;while(g=q[r++])if(d&&n.inArray(g,d)>-1)e&&e.push(g);else if(h=n.contains(g.ownerDocument,g),i=ea(p.appendChild(g),\"script\"),h&&fa(i),c){f=0;while(g=i[f++])_.test(g.type||\"\")&&c.push(g)}return i=null,p}!function(){var b,c,e=d.createElement(\"div\");for(b in{submit:!0,change:!0,focusin:!0})c=\"on\"+b,(l[b]=c in a)||(e.setAttribute(c,\"t\"),l[b]=e.attributes[c].expando===!1);e=null}();var ka=/^(?:input|select|textarea)$/i,la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^(?:focusinfocus|focusoutblur)$/,oa=/^([^.]*)(?:\\.(.+)|)/;function pa(){return!0}function qa(){return!1}function ra(){try{return d.activeElement}catch(a){}}function sa(a,b,c,d,e,f){var g,h;if(\"object\"==typeof b){\"string\"!=typeof c&&(d=d||c,c=void 0);for(h in b)sa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&(\"string\"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=qa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return\"undefined\"==typeof n||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||\"\").match(G)||[\"\"],h=b.length;while(h--)f=oa.exec(b[h])||[],o=q=f[1],p=(f[2]||\"\").split(\".\").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(\".\")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent(\"on\"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||\"\").match(G)||[\"\"],j=b.length;while(j--)if(h=oa.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&(\"**\"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,\"events\"))}},trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,\"type\")?b.type:b,r=k.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(i=m=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!na.test(q+n.event.triggered)&&(q.indexOf(\".\")>-1&&(r=q.split(\".\"),q=r.shift(),r.sort()),h=q.indexOf(\":\")<0&&\"on\"+q,b=b[n.expando]?b:new n.Event(q,\"object\"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join(\".\"),b.rnamespace=b.namespace?new RegExp(\"(^|\\\\.)\"+r.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),l=n.event.special[q]||{},f||!l.trigger||l.trigger.apply(e,c)!==!1)){if(!f&&!l.noBubble&&!n.isWindow(e)){for(j=l.delegateType||q,na.test(j+q)||(i=i.parentNode);i;i=i.parentNode)p.push(i),m=i;m===(e.ownerDocument||d)&&p.push(m.defaultView||m.parentWindow||a)}o=0;while((i=p[o++])&&!b.isPropagationStopped())b.type=o>1?j:l.bindType||q,g=(n._data(i,\"events\")||{})[b.type]&&n._data(i,\"handle\"),g&&g.apply(i,c),g=h&&i[h],g&&g.apply&&M(i)&&(b.result=g.apply(i,c),b.result===!1&&b.preventDefault());if(b.type=q,!f&&!b.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),c)===!1)&&M(e)&&h&&e[q]&&!n.isWindow(e)){m=e[h],m&&(e[h]=null),n.event.triggered=q;try{e[q]()}catch(s){}n.event.triggered=void 0,m&&(e[h]=m)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(n._data(this,\"events\")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(\"click\"!==a.type||isNaN(a.button)||a.button<1))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||\"click\"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+\" \",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ma.test(f)?this.mouseHooks:la.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=g.srcElement||d),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,h.filter?h.filter(a,g):a},props:\"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,e,f,g=b.button,h=b.fromElement;return null==a.pageX&&null!=b.clientX&&(e=a.target.ownerDocument||d,f=e.documentElement,c=e.body,a.pageX=b.clientX+(f&&f.scrollLeft||c&&c.scrollLeft||0)-(f&&f.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(f&&f.scrollTop||c&&c.scrollTop||0)-(f&&f.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&h&&(a.relatedTarget=h===a.target?b.toElement:h),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ra()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===ra()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return n.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=d.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)}:function(a,b,c){var d=\"on\"+b;a.detachEvent&&(\"undefined\"==typeof a[d]&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?pa:qa):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:qa,isPropagationStopped:qa,isImmediatePropagationStopped:qa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=pa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=pa,a&&!this.isSimulated&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=pa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submit||(n.event.special.submit={setup:function(){return n.nodeName(this,\"form\")?!1:void n.event.add(this,\"click._submit keypress._submit\",function(a){var b=a.target,c=n.nodeName(b,\"input\")||n.nodeName(b,\"button\")?n.prop(b,\"form\"):void 0;c&&!n._data(c,\"submit\")&&(n.event.add(c,\"submit._submit\",function(a){a._submitBubble=!0}),n._data(c,\"submit\",!0))})},postDispatch:function(a){a._submitBubble&&(delete a._submitBubble,this.parentNode&&!a.isTrigger&&n.event.simulate(\"submit\",this.parentNode,a))},teardown:function(){return n.nodeName(this,\"form\")?!1:void n.event.remove(this,\"._submit\")}}),l.change||(n.event.special.change={setup:function(){return ka.test(this.nodeName)?(\"checkbox\"!==this.type&&\"radio\"!==this.type||(n.event.add(this,\"propertychange._change\",function(a){\"checked\"===a.originalEvent.propertyName&&(this._justChanged=!0)}),n.event.add(this,\"click._change\",function(a){this._justChanged&&!a.isTrigger&&(this._justChanged=!1),n.event.simulate(\"change\",this,a)})),!1):void n.event.add(this,\"beforeactivate._change\",function(a){var b=a.target;ka.test(b.nodeName)&&!n._data(b,\"change\")&&(n.event.add(b,\"change._change\",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate(\"change\",this.parentNode,a)}),n._data(b,\"change\",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||\"radio\"!==b.type&&\"checkbox\"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,\"._change\"),!ka.test(this.nodeName)}}),l.focusin||n.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d){return sa(this,a,b,c,d)},one:function(a,b,c,d){return sa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&\"function\"!=typeof b||(c=b,b=void 0),c===!1&&(c=qa),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ta=/ jQuery\\d+=\"(?:null|\\d+)\"/g,ua=new RegExp(\"<(?:\"+ba+\")[\\\\s/>]\",\"i\"),va=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,wa=/<script|<style|<link/i,xa=/checked\\s*(?:[^=]|=\\s*.checked.)/i,ya=/^true\\/(.*)/,za=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,Aa=ca(d),Ba=Aa.appendChild(d.createElement(\"div\"));function Ca(a,b){return n.nodeName(a,\"table\")&&n.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function Da(a){return a.type=(null!==n.find.attr(a,\"type\"))+\"/\"+a.type,a}function Ea(a){var b=ya.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function Fa(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Ga(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}\"script\"===c&&b.text!==a.text?(Da(b).text=a.text,Ea(b)):\"object\"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):\"input\"===c&&Z.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):\"option\"===c?b.defaultSelected=b.selected=a.defaultSelected:\"input\"!==c&&\"textarea\"!==c||(b.defaultValue=a.defaultValue)}}function Ha(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&\"string\"==typeof q&&!l.checkClone&&xa.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(o&&(k=ja(b,a[0].ownerDocument,!1,a,d),e=k.firstChild,1===k.childNodes.length&&(k=e),e||d)){for(i=n.map(ea(k,\"script\"),Da),h=i.length;o>m;m++)g=k,m!==p&&(g=n.clone(g,!0,!0),h&&n.merge(i,ea(g,\"script\"))),c.call(a[m],g,m);if(h)for(j=i[i.length-1].ownerDocument,n.map(i,Ea),m=0;h>m;m++)g=i[m],_.test(g.type||\"\")&&!n._data(g,\"globalEval\")&&n.contains(j,g)&&(g.src?n._evalUrl&&n._evalUrl(g.src):n.globalEval((g.text||g.textContent||g.innerHTML||\"\").replace(za,\"\")));k=e=null}return a}function Ia(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(ea(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&fa(ea(d,\"script\")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(va,\"<$1></$2>\")},clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!ua.test(\"<\"+a.nodeName+\">\")?f=a.cloneNode(!0):(Ba.innerHTML=a.outerHTML,Ba.removeChild(f=Ba.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=ea(f),h=ea(a),g=0;null!=(e=h[g]);++g)d[g]&&Ga(e,d[g]);if(b)if(c)for(h=h||ea(a),d=d||ea(f),g=0;null!=(e=h[g]);g++)Fa(e,d[g]);else Fa(a,f);return d=ea(f,\"script\"),d.length>0&&fa(d,!i&&ea(a,\"script\")),d=h=e=null,f},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.attributes,m=n.event.special;null!=(d=a[h]);h++)if((b||M(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k||\"undefined\"==typeof d.removeAttribute?d[i]=void 0:d.removeAttribute(i),c.push(f))}}}),n.fn.extend({domManip:Ha,detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return Y(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||d).createTextNode(a))},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(ea(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,\"select\")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return Y(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(ta,\"\"):void 0;if(\"string\"==typeof a&&!wa.test(a)&&(l.htmlSerialize||!ua.test(a))&&(l.leadingWhitespace||!aa.test(a))&&!da[($.exec(a)||[\"\",\"\"])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ea(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(ea(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],f=n(a),h=f.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(f[d])[b](c),g.apply(e,c.get());return this.pushStack(e)}});var Ja,Ka={HTML:\"block\",BODY:\"block\"};function La(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],\"display\");return c.detach(),d}function Ma(a){var b=d,c=Ka[a];return c||(c=La(a,b),\"none\"!==c&&c||(Ja=(Ja||n(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=(Ja[0].contentWindow||Ja[0].contentDocument).document,b.write(),b.close(),c=La(a,b),Ja.detach()),Ka[a]=c),c}var Na=/^margin/,Oa=new RegExp(\"^(\"+T+\")(?!px)[a-z%]+$\",\"i\"),Pa=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Qa=d.documentElement;!function(){var b,c,e,f,g,h,i=d.createElement(\"div\"),j=d.createElement(\"div\");if(j.style){j.style.cssText=\"float:left;opacity:.5\",l.opacity=\"0.5\"===j.style.opacity,l.cssFloat=!!j.style.cssFloat,j.style.backgroundClip=\"content-box\",j.cloneNode(!0).style.backgroundClip=\"\",l.clearCloneStyle=\"content-box\"===j.style.backgroundClip,i=d.createElement(\"div\"),i.style.cssText=\"border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute\",j.innerHTML=\"\",i.appendChild(j),l.boxSizing=\"\"===j.style.boxSizing||\"\"===j.style.MozBoxSizing||\"\"===j.style.WebkitBoxSizing,n.extend(l,{reliableHiddenOffsets:function(){return null==b&&k(),f},boxSizingReliable:function(){return null==b&&k(),e},pixelMarginRight:function(){return null==b&&k(),c},pixelPosition:function(){return null==b&&k(),b},reliableMarginRight:function(){return null==b&&k(),g},reliableMarginLeft:function(){return null==b&&k(),h}});function k(){var k,l,m=d.documentElement;m.appendChild(i),j.style.cssText=\"-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%\",b=e=h=!1,c=g=!0,a.getComputedStyle&&(l=a.getComputedStyle(j),b=\"1%\"!==(l||{}).top,h=\"2px\"===(l||{}).marginLeft,e=\"4px\"===(l||{width:\"4px\"}).width,j.style.marginRight=\"50%\",c=\"4px\"===(l||{marginRight:\"4px\"}).marginRight,k=j.appendChild(d.createElement(\"div\")),k.style.cssText=j.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",k.style.marginRight=k.style.width=\"0\",j.style.width=\"1px\",g=!parseFloat((a.getComputedStyle(k)||{}).marginRight),j.removeChild(k)),j.style.display=\"none\",f=0===j.getClientRects().length,f&&(j.style.display=\"\",j.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",j.childNodes[0].style.borderCollapse=\"separate\",k=j.getElementsByTagName(\"td\"),k[0].style.cssText=\"margin:0;border:0;padding:0;display:none\",f=0===k[0].offsetHeight,f&&(k[0].style.display=\"\",k[1].style.display=\"none\",f=0===k[0].offsetHeight)),m.removeChild(i)}}}();var Ra,Sa,Ta=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ra=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c.getPropertyValue(b)||c[b]:void 0,\"\"!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Oa.test(g)&&Na.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0===g?g:g+\"\"}):Qa.currentStyle&&(Ra=function(a){return a.currentStyle},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Oa.test(g)&&!Ta.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left=\"fontSize\"===b?\"1em\":g,g=h.pixelLeft+\"px\",h.left=d,f&&(e.left=f)),void 0===g?g:g+\"\"||\"auto\"});function Ua(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Va=/alpha\\([^)]*\\)/i,Wa=/opacity\\s*=\\s*([^)]*)/i,Xa=/^(none|table(?!-c[ea]).+)/,Ya=new RegExp(\"^(\"+T+\")(.*)$\",\"i\"),Za={position:\"absolute\",visibility:\"hidden\",display:\"block\"},$a={letterSpacing:\"0\",fontWeight:\"400\"},_a=[\"Webkit\",\"O\",\"Moz\",\"ms\"],ab=d.createElement(\"div\").style;function bb(a){if(a in ab)return a;var b=a.charAt(0).toUpperCase()+a.slice(1),c=_a.length;while(c--)if(a=_a[c]+b,a in ab)return a}function cb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&W(d)&&(f[g]=n._data(d,\"olddisplay\",Ma(d.nodeName)))):(e=W(d),(c&&\"none\"!==c||!e)&&n._data(d,\"olddisplay\",e?c:n.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}function db(a,b,c){var d=Ya.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||\"px\"):b}function eb(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=n.css(a,c+V[f],!0,e)),d?(\"content\"===c&&(g-=n.css(a,\"padding\"+V[f],!0,e)),\"margin\"!==c&&(g-=n.css(a,\"border\"+V[f]+\"Width\",!0,e))):(g+=n.css(a,\"padding\"+V[f],!0,e),\"padding\"!==c&&(g+=n.css(a,\"border\"+V[f]+\"Width\",!0,e)));return g}function fb(a,b,c){var d=!0,e=\"width\"===b?a.offsetWidth:a.offsetHeight,f=Ra(a),g=l.boxSizing&&\"border-box\"===n.css(a,\"boxSizing\",!1,f);if(0>=e||null==e){if(e=Sa(a,b,f),(0>e||null==e)&&(e=a.style[b]),Oa.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+eb(a,b,c||(g?\"border\":\"content\"),d,f)+\"px\"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Sa(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":l.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,\"string\"===f&&(e=U.exec(c))&&e[1]&&(c=X(a,b,e),f=\"number\"),null!=c&&c===c&&(\"number\"===f&&(c+=e&&e[3]||(n.cssNumber[h]?\"\":\"px\")),l.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),!(g&&\"set\"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&\"get\"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Sa(a,b,d)),\"normal\"===f&&b in $a&&(f=$a[b]),\"\"===c||c?(e=parseFloat(f),c===!0||isFinite(e)?e||0:f):f}}),n.each([\"height\",\"width\"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Xa.test(n.css(a,\"display\"))&&0===a.offsetWidth?Pa(a,Za,function(){return fb(a,b,d)}):fb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ra(a);return db(a,c,d?eb(a,b,d,l.boxSizing&&\"border-box\"===n.css(a,\"boxSizing\",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Wa.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":b?\"1\":\"\"},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?\"alpha(opacity=\"+100*b+\")\":\"\",f=d&&d.filter||c.filter||\"\";c.zoom=1,(b>=1||\"\"===b)&&\"\"===n.trim(f.replace(Va,\"\"))&&c.removeAttribute&&(c.removeAttribute(\"filter\"),\"\"===b||d&&!d.filter)||(c.filter=Va.test(f)?f.replace(Va,e):f+\" \"+e)}}),n.cssHooks.marginRight=Ua(l.reliableMarginRight,function(a,b){return b?Pa(a,{display:\"inline-block\"},Sa,[a,\"marginRight\"]):void 0}),n.cssHooks.marginLeft=Ua(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Sa(a,\"marginLeft\"))||(n.contains(a.ownerDocument,a)?a.getBoundingClientRect().left-Pa(a,{\nmarginLeft:0},function(){return a.getBoundingClientRect().left}):0))+\"px\":void 0}),n.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+V[d]+b]=f[d]||f[d-2]||f[0];return e}},Na.test(a)||(n.cssHooks[a+b].set=db)}),n.fn.extend({css:function(a,b){return Y(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ra(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return cb(this,!0)},hide:function(){return cb(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){W(this)?n(this).show():n(this).hide()})}});function gb(a,b,c,d,e){return new gb.prototype.init(a,b,c,d,e)}n.Tween=gb,gb.prototype={constructor:gb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?\"\":\"px\")},cur:function(){var a=gb.propHooks[this.prop];return a&&a.get?a.get(this):gb.propHooks._default.get(this)},run:function(a){var b,c=gb.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):gb.propHooks._default.set(this),this}},gb.prototype.init.prototype=gb.prototype,gb.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},gb.propHooks.scrollTop=gb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:\"swing\"},n.fx=gb.prototype.init,n.fx.step={};var hb,ib,jb=/^(?:toggle|show|hide)$/,kb=/queueHooks$/;function lb(){return a.setTimeout(function(){hb=void 0}),hb=n.now()}function mb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=V[e],d[\"margin\"+c]=d[\"padding\"+c]=a;return b&&(d.opacity=d.width=a),d}function nb(a,b,c){for(var d,e=(qb.tweeners[b]||[]).concat(qb.tweeners[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ob(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&W(a),r=n._data(a,\"fxshow\");c.queue||(h=n._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,\"display\"),k=\"none\"===j?n._data(a,\"olddisplay\")||Ma(a.nodeName):j,\"inline\"===k&&\"none\"===n.css(a,\"float\")&&(l.inlineBlockNeedsLayout&&\"inline\"!==Ma(a.nodeName)?p.zoom=1:p.display=\"inline-block\")),c.overflow&&(p.overflow=\"hidden\",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],jb.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(q?\"hide\":\"show\")){if(\"show\"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(o))\"inline\"===(\"none\"===j?Ma(a.nodeName):j)&&(p.display=j);else{r?\"hidden\"in r&&(q=r.hidden):r=n._data(a,\"fxshow\",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,\"fxshow\");for(b in o)n.style(a,b,o[b])});for(d in o)g=nb(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function pb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function qb(a,b,c){var d,e,f=0,g=qb.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=hb||lb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:hb||lb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(pb(k,j.opts.specialEasing);g>f;f++)if(d=qb.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,nb,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(qb,{tweeners:{\"*\":[function(a,b){var c=this.createTween(a,b);return X(c.elem,a,U.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=[\"*\"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],qb.tweeners[c]=qb.tweeners[c]||[],qb.tweeners[c].unshift(b)},prefilters:[ob],prefilter:function(a,b){b?qb.prefilters.unshift(a):qb.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&\"object\"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(W).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=qb(this,n.extend({},a),f);(e||n._data(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&kb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=n._data(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(mb(b,!0),a,d,e)}}),n.each({slideDown:mb(\"show\"),slideUp:mb(\"hide\"),slideToggle:mb(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(hb=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),hb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ib||(ib=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(ib),ib=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||\"fx\",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a,b=d.createElement(\"input\"),c=d.createElement(\"div\"),e=d.createElement(\"select\"),f=e.appendChild(d.createElement(\"option\"));c=d.createElement(\"div\"),c.setAttribute(\"className\",\"t\"),c.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",a=c.getElementsByTagName(\"a\")[0],b.setAttribute(\"type\",\"checkbox\"),c.appendChild(b),a=c.getElementsByTagName(\"a\")[0],a.style.cssText=\"top:1px\",l.getSetAttribute=\"t\"!==c.className,l.style=/top/.test(a.getAttribute(\"style\")),l.hrefNormalized=\"/a\"===a.getAttribute(\"href\"),l.checkOn=!!b.value,l.optSelected=f.selected,l.enctype=!!d.createElement(\"form\").enctype,e.disabled=!0,l.optDisabled=!f.disabled,b=d.createElement(\"input\"),b.setAttribute(\"value\",\"\"),l.input=\"\"===b.getAttribute(\"value\"),b.value=\"t\",b.setAttribute(\"type\",\"radio\"),l.radioValue=\"t\"===b.value}();var rb=/\\r/g,sb=/[\\x20\\t\\r\\n\\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":n.isArray(e)&&(e=n.map(e,function(a){return null==a?\"\":a+\"\"})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(rb,\"\"):null==c?\"\":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,\"value\");return null!=b?b:n.trim(n.text(a)).replace(sb,\" \")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute(\"disabled\"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,\"optgroup\"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>-1)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each([\"radio\",\"checkbox\"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})});var tb,ub,vb=n.expr.attrHandle,wb=/^(?:checked|selected)$/i,xb=l.getSetAttribute,yb=l.input;n.fn.extend({attr:function(a,b){return Y(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return\"undefined\"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ub:tb)),void 0!==c?null===c?void n.removeAttr(a,b):e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+\"\"),c):e&&\"get\"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&\"radio\"===b&&n.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?yb&&xb||!wb.test(c)?a[d]=!1:a[n.camelCase(\"default-\"+c)]=a[d]=!1:n.attr(a,c,\"\"),a.removeAttribute(xb?c:d)}}),ub={set:function(a,b,c){return b===!1?n.removeAttr(a,c):yb&&xb||!wb.test(c)?a.setAttribute(!xb&&n.propFix[c]||c,c):a[n.camelCase(\"default-\"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=vb[b]||n.find.attr;yb&&xb||!wb.test(b)?vb[b]=function(a,b,d){var e,f;return d||(f=vb[b],vb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,vb[b]=f),e}:vb[b]=function(a,b,c){return c?void 0:a[n.camelCase(\"default-\"+b)]?b.toLowerCase():null}}),yb&&xb||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,\"input\")?void(a.defaultValue=b):tb&&tb.set(a,b,c)}}),xb||(tb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+=\"\",\"value\"===c||b===a.getAttribute(c)?b:void 0}},vb.id=vb.name=vb.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&\"\"!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:tb.set},n.attrHooks.contenteditable={set:function(a,b,c){tb.set(a,\"\"===b?!1:b,c)}},n.each([\"width\",\"height\"],function(a,b){n.attrHooks[b]={set:function(a,c){return\"\"===c?(a.setAttribute(b,\"auto\"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+\"\"}});var zb=/^(?:input|select|textarea|button|object)$/i,Ab=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return Y(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,\"tabindex\");return b?parseInt(b,10):zb.test(a.nodeName)||Ab.test(a.nodeName)&&a.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),l.hrefNormalized||n.each([\"href\",\"src\"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype=\"encoding\");var Bb=/[\\t\\r\\n\\f]/g;function Cb(a){return n.attr(a,\"class\")||\"\"}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,Cb(this)))});if(\"string\"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(\" \"+e+\" \").replace(Bb,\" \")){g=0;while(f=b[g++])d.indexOf(\" \"+f+\" \")<0&&(d+=f+\" \");h=n.trim(d),e!==h&&n.attr(c,\"class\",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,Cb(this)))});if(!arguments.length)return this.attr(\"class\",\"\");if(\"string\"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(\" \"+e+\" \").replace(Bb,\" \")){g=0;while(f=b[g++])while(d.indexOf(\" \"+f+\" \")>-1)d=d.replace(\" \"+f+\" \",\" \");h=n.trim(d),e!==h&&n.attr(c,\"class\",h)}}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,Cb(this),b),b)}):this.each(function(){var b,d,e,f;if(\"string\"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&\"boolean\"!==c||(b=Cb(this),b&&n._data(this,\"__className__\",b),n.attr(this,\"class\",b||a===!1?\"\":n._data(this,\"__className__\")||\"\"))})},hasClass:function(a){var b,c,d=0;b=\" \"+a+\" \";while(c=this[d++])if(1===c.nodeType&&(\" \"+Cb(c)+\" \").replace(Bb,\" \").indexOf(b)>-1)return!0;return!1}}),n.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Db=a.location,Eb=n.now(),Fb=/\\?/,Gb=/(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+\"\");var c,d=null,e=n.trim(b+\"\");return e&&!n.trim(e.replace(Gb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,\"\")}))?Function(\"return \"+e)():n.error(\"Invalid JSON: \"+b)},n.parseXML=function(b){var c,d;if(!b||\"string\"!=typeof b)return null;try{a.DOMParser?(d=new a.DOMParser,c=d.parseFromString(b,\"text/xml\")):(c=new a.ActiveXObject(\"Microsoft.XMLDOM\"),c.async=\"false\",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName(\"parsererror\").length||n.error(\"Invalid XML: \"+b),c};var Hb=/#.*$/,Ib=/([?&])_=[^&]*/,Jb=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Kb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lb=/^(?:GET|HEAD)$/,Mb=/^\\/\\//,Nb=/^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,Ob={},Pb={},Qb=\"*/\".concat(\"*\"),Rb=Db.href,Sb=Nb.exec(Rb.toLowerCase())||[];function Tb(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])\"+\"===d.charAt(0)?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Ub(a,b,c,d){var e={},f=a===Pb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function Vb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Wb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+\" \"+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Xb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Rb,type:\"GET\",isLocal:Kb.test(Sb[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Qb,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":n.parseJSON,\"text xml\":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Vb(Vb(a,n.ajaxSettings),b):Vb(n.ajaxSettings,a)},ajaxPrefilter:Tb(Ob),ajaxTransport:Tb(Pb),ajax:function(b,c){\"object\"==typeof b&&(c=b,b=void 0),c=c||{};var d,e,f,g,h,i,j,k,l=n.ajaxSetup({},c),m=l.context||l,o=l.context&&(m.nodeType||m.jquery)?n(m):n.event,p=n.Deferred(),q=n.Callbacks(\"once memory\"),r=l.statusCode||{},s={},t={},u=0,v=\"canceled\",w={readyState:0,getResponseHeader:function(a){var b;if(2===u){if(!k){k={};while(b=Jb.exec(g))k[b[1].toLowerCase()]=b[2]}b=k[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===u?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return u||(a=t[c]=t[c]||a,s[a]=b),this},overrideMimeType:function(a){return u||(l.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>u)for(b in a)r[b]=[r[b],a[b]];else w.always(a[w.status]);return this},abort:function(a){var b=a||v;return j&&j.abort(b),y(0,b),this}};if(p.promise(w).complete=q.add,w.success=w.done,w.error=w.fail,l.url=((b||l.url||Rb)+\"\").replace(Hb,\"\").replace(Mb,Sb[1]+\"//\"),l.type=c.method||c.type||l.method||l.type,l.dataTypes=n.trim(l.dataType||\"*\").toLowerCase().match(G)||[\"\"],null==l.crossDomain&&(d=Nb.exec(l.url.toLowerCase()),l.crossDomain=!(!d||d[1]===Sb[1]&&d[2]===Sb[2]&&(d[3]||(\"http:\"===d[1]?\"80\":\"443\"))===(Sb[3]||(\"http:\"===Sb[1]?\"80\":\"443\")))),l.data&&l.processData&&\"string\"!=typeof l.data&&(l.data=n.param(l.data,l.traditional)),Ub(Ob,l,c,w),2===u)return w;i=n.event&&l.global,i&&0===n.active++&&n.event.trigger(\"ajaxStart\"),l.type=l.type.toUpperCase(),l.hasContent=!Lb.test(l.type),f=l.url,l.hasContent||(l.data&&(f=l.url+=(Fb.test(f)?\"&\":\"?\")+l.data,delete l.data),l.cache===!1&&(l.url=Ib.test(f)?f.replace(Ib,\"$1_=\"+Eb++):f+(Fb.test(f)?\"&\":\"?\")+\"_=\"+Eb++)),l.ifModified&&(n.lastModified[f]&&w.setRequestHeader(\"If-Modified-Since\",n.lastModified[f]),n.etag[f]&&w.setRequestHeader(\"If-None-Match\",n.etag[f])),(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&w.setRequestHeader(\"Content-Type\",l.contentType),w.setRequestHeader(\"Accept\",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(\"*\"!==l.dataTypes[0]?\", \"+Qb+\"; q=0.01\":\"\"):l.accepts[\"*\"]);for(e in l.headers)w.setRequestHeader(e,l.headers[e]);if(l.beforeSend&&(l.beforeSend.call(m,w,l)===!1||2===u))return w.abort();v=\"abort\";for(e in{success:1,error:1,complete:1})w[e](l[e]);if(j=Ub(Pb,l,c,w)){if(w.readyState=1,i&&o.trigger(\"ajaxSend\",[w,l]),2===u)return w;l.async&&l.timeout>0&&(h=a.setTimeout(function(){w.abort(\"timeout\")},l.timeout));try{u=1,j.send(s,y)}catch(x){if(!(2>u))throw x;y(-1,x)}}else y(-1,\"No Transport\");function y(b,c,d,e){var k,s,t,v,x,y=c;2!==u&&(u=2,h&&a.clearTimeout(h),j=void 0,g=e||\"\",w.readyState=b>0?4:0,k=b>=200&&300>b||304===b,d&&(v=Wb(l,w,d)),v=Xb(l,v,w,k),k?(l.ifModified&&(x=w.getResponseHeader(\"Last-Modified\"),x&&(n.lastModified[f]=x),x=w.getResponseHeader(\"etag\"),x&&(n.etag[f]=x)),204===b||\"HEAD\"===l.type?y=\"nocontent\":304===b?y=\"notmodified\":(y=v.state,s=v.data,t=v.error,k=!t)):(t=y,!b&&y||(y=\"error\",0>b&&(b=0))),w.status=b,w.statusText=(c||y)+\"\",k?p.resolveWith(m,[s,y,w]):p.rejectWith(m,[w,y,t]),w.statusCode(r),r=void 0,i&&o.trigger(k?\"ajaxSuccess\":\"ajaxError\",[w,l,k?s:t]),q.fireWith(m,[w,y]),i&&(o.trigger(\"ajaxComplete\",[w,l]),--n.active||n.event.trigger(\"ajaxStop\")))}return w},getJSON:function(a,b,c){return n.get(a,b,c,\"json\")},getScript:function(a,b){return n.get(a,void 0,b,\"script\")}}),n.each([\"get\",\"post\"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:\"GET\",dataType:\"script\",cache:!0,async:!1,global:!1,\"throws\":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,\"body\")||n(this).replaceWith(this.childNodes)}).end()}});function Yb(a){return a.style&&a.style.display||n.css(a,\"display\")}function Zb(a){if(!n.contains(a.ownerDocument||d,a))return!0;while(a&&1===a.nodeType){if(\"none\"===Yb(a)||\"hidden\"===a.type)return!0;a=a.parentNode}return!1}n.expr.filters.hidden=function(a){return l.reliableHiddenOffsets()?a.offsetWidth<=0&&a.offsetHeight<=0&&!a.getClientRects().length:Zb(a)},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var $b=/%20/g,_b=/\\[\\]$/,ac=/\\r?\\n/g,bc=/^(?:submit|button|image|reset|file)$/i,cc=/^(?:input|select|textarea|keygen)/i;function dc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||_b.test(a)?d(a,e):dc(a+\"[\"+(\"object\"==typeof e&&null!=e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==n.type(b))d(a,b);else for(e in b)dc(a+\"[\"+e+\"]\",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)dc(c,a[c],b,e);return d.join(\"&\").replace($b,\"+\")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,\"elements\");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(\":disabled\")&&cc.test(this.nodeName)&&!bc.test(a)&&(this.checked||!Z.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(ac,\"\\r\\n\")}}):{name:b.name,value:c.replace(ac,\"\\r\\n\")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return this.isLocal?ic():d.documentMode>8?hc():/^(get|post|head|put|delete|options)$/i.test(this.type)&&hc()||ic()}:hc;var ec=0,fc={},gc=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent(\"onunload\",function(){for(var a in fc)fc[a](void 0,!0)}),l.cors=!!gc&&\"withCredentials\"in gc,gc=l.ajax=!!gc,gc&&n.ajaxTransport(function(b){if(!b.crossDomain||l.cors){var c;return{send:function(d,e){var f,g=b.xhr(),h=++ec;if(g.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(f in b.xhrFields)g[f]=b.xhrFields[f];b.mimeType&&g.overrideMimeType&&g.overrideMimeType(b.mimeType),b.crossDomain||d[\"X-Requested-With\"]||(d[\"X-Requested-With\"]=\"XMLHttpRequest\");for(f in d)void 0!==d[f]&&g.setRequestHeader(f,d[f]+\"\");g.send(b.hasContent&&b.data||null),c=function(a,d){var f,i,j;if(c&&(d||4===g.readyState))if(delete fc[h],c=void 0,g.onreadystatechange=n.noop,d)4!==g.readyState&&g.abort();else{j={},f=g.status,\"string\"==typeof g.responseText&&(j.text=g.responseText);try{i=g.statusText}catch(k){i=\"\"}f||!b.isLocal||b.crossDomain?1223===f&&(f=204):f=j.text?200:404}j&&e(f,i,j,g.getAllResponseHeaders())},b.async?4===g.readyState?a.setTimeout(c):g.onreadystatechange=fc[h]=c:c()},abort:function(){c&&c(void 0,!0)}}}});function hc(){try{return new a.XMLHttpRequest}catch(b){}}function ic(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}n.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\",a.global=!1)}),n.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c=d.head||n(\"head\")[0]||d.documentElement;return{send:function(e,f){b=d.createElement(\"script\"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||f(200,\"success\"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var jc=[],kc=/(=)\\?(?=&|$)|\\?\\?/;n.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=jc.pop()||n.expando+\"_\"+Eb++;return this[a]=!0,a}}),n.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(kc.test(b.url)?\"url\":\"string\"==typeof b.data&&0===(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&kc.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(kc,\"$1\"+e):b.jsonp!==!1&&(b.url+=(Fb.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||n.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,jc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),n.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ja([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var lc=n.fn.load;n.fn.load=function(a,b,c){if(\"string\"!=typeof a&&lc)return lc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>-1&&(d=n.trim(a.slice(h,a.length)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(e=\"POST\"),g.length>0&&n.ajax({url:a,type:e||\"GET\",dataType:\"html\",data:b}).done(function(a){f=arguments,g.html(d?n(\"<div>\").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function mc(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,\"position\"),l=n(a),m={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=n.css(a,\"top\"),i=n.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&n.inArray(\"auto\",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),\"using\"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?(\"undefined\"!=typeof e.getBoundingClientRect&&(d=e.getBoundingClientRect()),c=mc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return\"fixed\"===n.css(d,\"position\")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],\"html\")||(c=a.offset()),c.top+=n.css(a[0],\"borderTopWidth\",!0),c.left+=n.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-c.top-n.css(d,\"marginTop\",!0),left:b.left-c.left-n.css(d,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&!n.nodeName(a,\"html\")&&\"static\"===n.css(a,\"position\"))a=a.offsetParent;return a||Qa})}}),n.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return Y(this,function(a,d,e){var f=mc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each([\"top\",\"left\"],function(a,b){n.cssHooks[b]=Ua(l.pixelPosition,function(a,c){return c?(c=Sa(a,b),Oa.test(c)?n(a).position()[b]+\"px\":c):void 0})}),n.each({Height:\"height\",Width:\"width\"},function(a,b){n.each({\npadding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return Y(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)}}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return n});var nc=a.jQuery,oc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=oc),b&&a.jQuery===n&&(a.jQuery=nc),n},b||(a.jQuery=a.$=n),n});\n","/**\n * @author jbouny / https://github.com/jbouny\n *\n * Work based on :\n * @author Slayvin / http://slayvin.net : Flat mirror for three.js\n * @author Stemkoski / http://www.adelphi.edu/~stemkoski : An implementation of water shader based on the flat mirror\n * @author Jonas Wagner / http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nTHREE.Water = function ( width, height, options ) {\n\n\tTHREE.Mesh.call( this, new THREE.PlaneBufferGeometry( width, height ) );\n\n\tvar scope = this;\n\n\toptions = options || {};\n\n\tvar textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n\tvar textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n\n\tvar clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n\tvar alpha = options.alpha !== undefined ? options.alpha : 1.0;\n\tvar time = options.time !== undefined ? options.time : 0.0;\n\tvar normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n\tvar sunDirection = options.sunDirection !== undefined ? options.sunDirection : new THREE.Vector3( 0.70707, 0.70707, 0.0 );\n\tvar sunColor = new THREE.Color( options.sunColor !== undefined ? options.sunColor : 0xffffff );\n\tvar waterColor = new THREE.Color( options.waterColor !== undefined ? options.waterColor : 0x7F7F7F );\n\tvar eye = options.eye !== undefined ? options.eye : new THREE.Vector3( 0, 0, 0 );\n\tvar distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n\tvar side = options.side !== undefined ? options.side : THREE.FrontSide;\n\tvar fog = options.fog !== undefined ? options.fog : false;\n\n\t//\n\n\tvar mirrorPlane = new THREE.Plane();\n\tvar normal = new THREE.Vector3();\n\tvar mirrorWorldPosition = new THREE.Vector3();\n\tvar cameraWorldPosition = new THREE.Vector3();\n\tvar rotationMatrix = new THREE.Matrix4();\n\tvar lookAtPosition = new THREE.Vector3( 0, 0, - 1 );\n\tvar clipPlane = new THREE.Vector4();\n\n\tvar view = new THREE.Vector3();\n\tvar target = new THREE.Vector3();\n\tvar q = new THREE.Vector4();\n\n\tvar textureMatrix = new THREE.Matrix4();\n\n\tvar mirrorCamera = new THREE.PerspectiveCamera();\n\n\tvar parameters = {\n\t\tminFilter: THREE.LinearFilter,\n\t\tmagFilter: THREE.LinearFilter,\n\t\tformat: THREE.RGBFormat,\n\t\tstencilBuffer: false\n\t};\n\n\tvar renderTarget = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\tif ( ! THREE.Math.isPowerOfTwo( textureWidth ) || ! THREE.Math.isPowerOfTwo( textureHeight ) ) {\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t}\n\n\tvar mirrorShader = {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\t\t\t{\n\t\t\t\tnormalSampler: { value: null },\n\t\t\t\tmirrorSampler: { value: null },\n\t\t\t\talpha: { value: 1.0 },\n\t\t\t\ttime: { value: 0.0 },\n\t\t\t\tsize: { value: 1.0 },\n\t\t\t\tdistortionScale: { value: 20.0 },\n\t\t\t\ttextureMatrix: { value: new THREE.Matrix4() },\n\t\t\t\tsunColor: { value: new THREE.Color( 0x7F7F7F ) },\n\t\t\t\tsunDirection: { value: new THREE.Vector3( 0.70707, 0.70707, 0 ) },\n\t\t\t\teye: { value: new THREE.Vector3() },\n\t\t\t\twaterColor: { value: new THREE.Color( 0x555555 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: [\n\t\t\t'uniform mat4 textureMatrix;',\n\t\t\t'uniform float time;',\n\n\t\t\t'varying vec4 mirrorCoord;',\n\t\t\t'varying vec4 worldPosition;',\n\n\t\t\tTHREE.ShaderChunk[ 'fog_pars_vertex' ],\n\t\t\tTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ],\n\n\t\t\t'void main() {',\n\t\t\t'\tmirrorCoord = modelMatrix * vec4( position, 1.0 );',\n\t\t\t'\tworldPosition = mirrorCoord.xyzw;',\n\t\t\t'\tmirrorCoord = textureMatrix * mirrorCoord;',\n\t\t\t'\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\n\n\t\t\tTHREE.ShaderChunk[ 'fog_vertex' ],\n\t\t\tTHREE.ShaderChunk[ 'shadowmap_vertex' ],\n\n\t\t\t'}'\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform sampler2D mirrorSampler;',\n\t\t\t'uniform float alpha;',\n\t\t\t'uniform float time;',\n\t\t\t'uniform float size;',\n\t\t\t'uniform float distortionScale;',\n\t\t\t'uniform sampler2D normalSampler;',\n\t\t\t'uniform vec3 sunColor;',\n\t\t\t'uniform vec3 sunDirection;',\n\t\t\t'uniform vec3 eye;',\n\t\t\t'uniform vec3 waterColor;',\n\n\t\t\t'varying vec4 mirrorCoord;',\n\t\t\t'varying vec4 worldPosition;',\n\n\t\t\t'vec4 getNoise( vec2 uv ) {',\n\t\t\t'\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);',\n\t\t\t'\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );',\n\t\t\t'\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );',\n\t\t\t'\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );',\n\t\t\t'\tvec4 noise = texture2D( normalSampler, uv0 ) +',\n\t\t\t'\t\ttexture2D( normalSampler, uv1 ) +',\n\t\t\t'\t\ttexture2D( normalSampler, uv2 ) +',\n\t\t\t'\t\ttexture2D( normalSampler, uv3 );',\n\t\t\t'\treturn noise * 0.5 - 1.0;',\n\t\t\t'}',\n\n\t\t\t'void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {',\n\t\t\t'\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );',\n\t\t\t'\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );',\n\t\t\t'\tspecularColor += pow( direction, shiny ) * sunColor * spec;',\n\t\t\t'\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;',\n\t\t\t'}',\n\n\t\t\tTHREE.ShaderChunk[ 'common' ],\n\t\t\tTHREE.ShaderChunk[ 'packing' ],\n\t\t\tTHREE.ShaderChunk[ 'bsdfs' ],\n\t\t\tTHREE.ShaderChunk[ 'fog_pars_fragment' ],\n\t\t\tTHREE.ShaderChunk[ 'lights_pars' ],\n\t\t\tTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ],\n\t\t\tTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ],\n\n\t\t\t'void main() {',\n\t\t\t'\tvec4 noise = getNoise( worldPosition.xz * size );',\n\t\t\t'\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );',\n\n\t\t\t'\tvec3 diffuseLight = vec3(0.0);',\n\t\t\t'\tvec3 specularLight = vec3(0.0);',\n\n\t\t\t'\tvec3 worldToEye = eye-worldPosition.xyz;',\n\t\t\t'\tvec3 eyeDirection = normalize( worldToEye );',\n\t\t\t'\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );',\n\n\t\t\t'\tfloat distance = length(worldToEye);',\n\n\t\t\t'\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;',\n\t\t\t'\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.z + distortion ) );',\n\n\t\t\t'\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );',\n\t\t\t'\tfloat rf0 = 0.3;',\n\t\t\t'\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );',\n\t\t\t'\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;',\n\t\t\t'\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);',\n\t\t\t'\tvec3 outgoingLight = albedo;',\n\t\t\t'\tgl_FragColor = vec4( outgoingLight, alpha );',\n\n\t\t\tTHREE.ShaderChunk[ 'tonemapping_fragment' ],\n\t\t\tTHREE.ShaderChunk[ 'fog_fragment' ],\n\n\t\t\t'}'\n\t\t].join( '\\n' )\n\n\t};\n\n\tvar material = new THREE.ShaderMaterial( {\n\t\tfragmentShader: mirrorShader.fragmentShader,\n\t\tvertexShader: mirrorShader.vertexShader,\n\t\tuniforms: THREE.UniformsUtils.clone( mirrorShader.uniforms ),\n\t\ttransparent: true,\n\t\tlights: true,\n\t\tside: side,\n\t\tfog: fog\n\t} );\n\n\tmaterial.uniforms.mirrorSampler.value = renderTarget.texture;\n\tmaterial.uniforms.textureMatrix.value = textureMatrix;\n\tmaterial.uniforms.alpha.value = alpha;\n\tmaterial.uniforms.time.value = time;\n\tmaterial.uniforms.normalSampler.value = normalSampler;\n\tmaterial.uniforms.sunColor.value = sunColor;\n\tmaterial.uniforms.waterColor.value = waterColor;\n\tmaterial.uniforms.sunDirection.value = sunDirection;\n\tmaterial.uniforms.distortionScale.value = distortionScale;\n\n\tmaterial.uniforms.eye.value = eye;\n\n\tscope.material = material;\n\n\tscope.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\tmirrorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\tnormal.set( 0, 0, 1 );\n\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\tview.subVectors( mirrorWorldPosition, cameraWorldPosition );\n\n\t\t// Avoid rendering when mirror is facing away\n\n\t\tif ( view.dot( normal ) > 0 ) return;\n\n\t\tview.reflect( normal ).negate();\n\t\tview.add( mirrorWorldPosition );\n\n\t\trotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\tlookAtPosition.set( 0, 0, - 1 );\n\t\tlookAtPosition.applyMatrix4( rotationMatrix );\n\t\tlookAtPosition.add( cameraWorldPosition );\n\n\t\ttarget.subVectors( mirrorWorldPosition, lookAtPosition );\n\t\ttarget.reflect( normal ).negate();\n\t\ttarget.add( mirrorWorldPosition );\n\n\t\tmirrorCamera.position.copy( view );\n\t\tmirrorCamera.up.set( 0, 1, 0 );\n\t\tmirrorCamera.up.applyMatrix4( rotationMatrix );\n\t\tmirrorCamera.up.reflect( normal );\n\t\tmirrorCamera.lookAt( target );\n\n\t\tmirrorCamera.far = camera.far; // Used in WebGLBackground\n\n\t\tmirrorCamera.updateMatrixWorld();\n\t\tmirrorCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t// Update the texture matrix\n\t\ttextureMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\t\ttextureMatrix.multiply( mirrorCamera.projectionMatrix );\n\t\ttextureMatrix.multiply( mirrorCamera.matrixWorldInverse );\n\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\tmirrorPlane.setFromNormalAndCoplanarPoint( normal, mirrorWorldPosition );\n\t\tmirrorPlane.applyMatrix4( mirrorCamera.matrixWorldInverse );\n\n\t\tclipPlane.set( mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant );\n\n\t\tvar projectionMatrix = mirrorCamera.projectionMatrix;\n\n\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\tq.z = - 1.0;\n\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t// Calculate the scaled plane vector\n\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\n\n\t\t// Replacing the third row of the projection matrix\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\teye.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t//\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar currentVrEnabled = renderer.vr.enabled;\n\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\tscope.visible = false;\n\n\t\trenderer.vr.enabled = false; // Avoid camera modification and recursion\n\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n\t\trenderer.render( scene, mirrorCamera, renderTarget, true );\n\n\t\tscope.visible = true;\n\n\t\trenderer.vr.enabled = currentVrEnabled;\n\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n};\n\nTHREE.Water.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.Water.prototype.constructor = THREE.Water;\n","/**\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CSS3DObject = function ( element ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.element = element;\n\tthis.element.style.position = 'absolute';\n\n\tthis.addEventListener( 'removed', function () {\n\n\t\tif ( this.element.parentNode !== null ) {\n\n\t\t\tthis.element.parentNode.removeChild( this.element );\n\n\t\t}\n\n\t} );\n\n};\n\nTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\n\nTHREE.CSS3DSprite = function ( element ) {\n\n\tTHREE.CSS3DObject.call( this, element );\n\n};\n\nTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\n\n//\n\nTHREE.CSS3DRenderer = function () {\n\n\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\n\n\tvar _width, _height;\n\tvar _widthHalf, _heightHalf;\n\n\tvar matrix = new THREE.Matrix4();\n\n\tvar cache = {\n\t\tcamera: { fov: 0, style: '' },\n\t\tobjects: {}\n\t};\n\n\tvar domElement = document.createElement( 'div' );\n\tdomElement.style.overflow = 'hidden';\n\n\tthis.domElement = domElement;\n\n\tvar cameraElement = document.createElement( 'div' );\n\n\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\tcameraElement.style.MozTransformStyle = 'preserve-3d';\n\tcameraElement.style.transformStyle = 'preserve-3d';\n\n\tdomElement.appendChild( cameraElement );\n\n\tvar isIE = /Trident/i.test( navigator.userAgent );\n\n\tthis.setClearColor = function () {};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\t\t_widthHalf = _width / 2;\n\t\t_heightHalf = _height / 2;\n\n\t\tdomElement.style.width = width + 'px';\n\t\tdomElement.style.height = height + 'px';\n\n\t\tcameraElement.style.width = width + 'px';\n\t\tcameraElement.style.height = height + 'px';\n\n\t};\n\n\tfunction epsilon( value ) {\n\n\t\treturn Math.abs( value ) < 1e-10 ? 0 : value;\n\n\t}\n\n\tfunction getCameraCSSMatrix( matrix ) {\n\n\t\tvar elements = matrix.elements;\n\n\t\treturn 'matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t}\n\n\tfunction getObjectCSSMatrix( matrix, cameraCSSMatrix ) {\n\n\t\tvar elements = matrix.elements;\n\t\tvar matrix3d = 'matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t\tif ( isIE ) {\n\n\t\t\treturn 'translate(-50%,-50%)' +\n\t\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' +\n\t\t\t\tcameraCSSMatrix +\n\t\t\t\tmatrix3d;\n\n\t\t}\n\n\t\treturn 'translate(-50%,-50%)' + matrix3d;\n\n\t}\n\n\tfunction renderObject( object, camera, cameraCSSMatrix ) {\n\n\t\tif ( object instanceof THREE.CSS3DObject ) {\n\n\t\t\tvar style;\n\n\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\n\n\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\n\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\n\t\t\t\tmatrix.transpose();\n\t\t\t\tmatrix.copyPosition( object.matrixWorld );\n\t\t\t\tmatrix.scale( object.scale );\n\n\t\t\t\tmatrix.elements[ 3 ] = 0;\n\t\t\t\tmatrix.elements[ 7 ] = 0;\n\t\t\t\tmatrix.elements[ 11 ] = 0;\n\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\tstyle = getObjectCSSMatrix( matrix, cameraCSSMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld, cameraCSSMatrix );\n\n\t\t\t}\n\n\t\t\tvar element = object.element;\n\t\t\tvar cachedStyle = cache.objects[ object.id ] && cache.objects[ object.id ].style;\n\n\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\n\n\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\telement.style.MozTransform = style;\n\t\t\t\telement.style.transform = style;\n\n\t\t\t\tcache.objects[ object.id ] = { style: style };\n\n\t\t\t\tif ( isIE ) {\n\n\t\t\t\t\tcache.objects[ object.id ].distanceToCameraSquared = getDistanceToSquared( camera, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( element.parentNode !== cameraElement ) {\n\n\t\t\t\tcameraElement.appendChild( element );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( object.children[ i ], camera, cameraCSSMatrix );\n\n\t\t}\n\n\t}\n\n\tvar getDistanceToSquared = function () {\n\n\t\tvar a = new THREE.Vector3();\n\t\tvar b = new THREE.Vector3();\n\n\t\treturn function ( object1, object2 ) {\n\n\t\t\ta.setFromMatrixPosition( object1.matrixWorld );\n\t\t\tb.setFromMatrixPosition( object2.matrixWorld );\n\n\t\t\treturn a.distanceToSquared( b );\n\n\t\t};\n\n\t}();\n\n\tfunction zOrder( scene ) {\n\n\t\tvar order = Object.keys( cache.objects ).sort( function ( a, b ) {\n\n\t\t\treturn cache.objects[ a ].distanceToCameraSquared - cache.objects[ b ].distanceToCameraSquared;\n\n\t\t} );\n\t\tvar zMax = order.length;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tvar index = order.indexOf( object.id + '' );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.element.style.zIndex = zMax - index;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tvar fov = camera.projectionMatrix.elements[ 5 ] * _heightHalf;\n\n\t\tif ( cache.camera.fov !== fov ) {\n\n\t\t\tdomElement.style.WebkitPerspective = fov + 'px';\n\t\t\tdomElement.style.MozPerspective = fov + 'px';\n\t\t\tdomElement.style.perspective = fov + 'px';\n\n\t\t\tcache.camera.fov = fov;\n\n\t\t}\n\n\t\tscene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tvar cameraCSSMatrix = 'translateZ(' + fov + 'px)' +\n\t\t\tgetCameraCSSMatrix( camera.matrixWorldInverse );\n\n\t\tvar style = cameraCSSMatrix +\n\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';\n\n\t\tif ( cache.camera.style !== style && ! isIE ) {\n\n\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\tcameraElement.style.MozTransform = style;\n\t\t\tcameraElement.style.transform = style;\n\n\t\t\tcache.camera.style = style;\n\n\t\t}\n\n\t\trenderObject( scene, camera, cameraCSSMatrix );\n\n\t\tif ( isIE ) {\n\n\t\t\t// IE10 and 11 does not support 'preserve-3d'.\n\t\t\t// Thus, z-order in 3D will not work.\n\t\t\t// We have to calc z-order manually and set CSS z-index for IE.\n\t\t\t// FYI: z-index can't handle object intersection\n\t\t\tzOrder( scene );\n\n\t\t}\n\n\t};\n\n};\n","import game from '../src/game.js';\n(function() {\n    new game();\n})();\n\n\n\n\n\n\n\n\n\n\n// OLD CODE / FOR REFERENCE / WHATEVS\n// form.addEventListener(\"submit\", (event) => {\n// \tevent.preventDefault();\n// \tlet animal = document.querySelector(\"input[name='animal']:checked\").value;\n// \tlet name = document.getElementById(\"name\").value;\n// \tif(name !== \"\"){\n// \t\tmodal.style.display = \"none\";\n// \t\tnew Playground(name, animal);\n// \t} else{\n// \t\talert(\"Enter name plz!\");\n// \t}\n// });\n// function addPlatform( scene, url) {\n//\n//     var placeholder = new THREE.Object3D();\n    //var texture = new THREE.TextureLoader().load( textureUrl );\n    //texture.minFilter = THREE.LinearFilter;\n    //texture.anisotropy = textureQuality;\n\n    // var loader = new THREE.JSONLoader();\n    // loader.load( url, function( geometry, materials ) {\n    //     //geometry.computeFaceNormals();\n    //     var platform = new THREE.Mesh( geometry, materials );\n    //     platform.name = \"platform\";\n    //     scene.add( platform );\n    // });\n\n    // var loader = new THREE.JSONLoader();\n    // loader.load(url, function(geometry, materials) {\n    //     geometry.computeFaceNormals();\n    //     //var bufferGeometry = new THREE.BufferGeometry();\n    //     //var newGeo = bufferGeometry.fromGeometry(geometry);\n    //\n    //     var newMaterials = new THREE.MeshFaceMaterial(materials);\n    //     var object = new THREE.Mesh(geometry, newMaterials);\n    //\n    //     object.name = \"platform\";\n    //\n    //     //placeholder.scale.set(size,size,size);\n    //     placeholder.add( object );\n    //     scene.add(placeholder);\n    // });\n\n    // addModel(scene, url, function(object) {\n    //     object.name = \"platform\";\n    // });\n\n    // var loader = new THREE.ObjectLoader();\n    // loader.load( url, function( obj ) {\n    //\n    //     scene.add( obj );\n    // });\n\n    // var loader = new THREE.OBJLoader();\n    //\n    // // load a resource\n    // loader.load(\n    //     // resource URL\n    //     'shared/island.obj',\n    //     // Function when resource is loaded\n    //     function ( object ) {\n    //         scene.add( object );\n    //     }\n    // );\n\n    // instantiate a loader\n    // var loader = new THREE.ColladaLoader();\n    //\n    // loader.load(\n    //     // resource URL\n    //     'models/collada/stormtrooper/stormtrooper.dae',\n    //     // Function when resource is loaded\n    //     function ( collada ) {\n    //         scene.add( collada.scene );\n    //     },\n    //     // Function called when download progresses\n    //     function ( xhr ) {\n    //         console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n    //     }\n    // );\n//\n//     return true;\n// }\n","export default class baseModel {\n\tconstructor(scene, id, options, parent_model) {\n\n\t\tif(!id) {\n\t\t\tid = options.name;\n\t\t}\n\n        if(typeof options.name == \"undefined\") {\n            options.name = id;\n        }\n\n        this.clock = new THREE.Clock();\n        this.anim_clock = new THREE.Clock();\n\t\tthis.scene = scene;\n\t\tthis.id = id;\n\t\tthis.name = id;\n\t\tthis.options = options;\n\t\tthis.submodels = [];\n        this.is_submodel = false;\n        this.parent_model = null;\n        this.started = false;\n        this.group = new THREE.Group();\n        this.target = false;\n        this.scale = 1;\n        this.is_placed = false;\n        this.has_init = false;\n        this.texture = false;\n        this.mouse = scene.mouse;\n\t\t//\n        this.animation_multiplier = 1;\n        this.playing_animation = false;\n        this.apply_physics = false;\n        this.added_to_scene = false;\n        this.raycaster = new THREE.Raycaster();\n\n\n        if(typeof parent_model != \"undefined\") {\n            this.setParentModel(parent_model);\n        }\n\n        this.position = new THREE.Vector3();\n        this.offset = new THREE.Vector3();\n\t\tthis.velocity = new THREE.Vector3();\n\t\tthis.rotation = 0;\n\n        if (typeof options.scale !== \"undefined\") {\n            this.scale = options.scale;\n        }\n\n        if (typeof options.position !== \"undefined\") {\n\n            if (typeof options.position.x !== \"undefined\") {\n                this.position.x = options.position.x;\n            }\n\n            if (typeof options.position.y !== \"undefined\") {\n                this.position.y = options.position.y;\n            }\n\n            if (typeof options.position.z !== \"undefined\") {\n                this.position.z = options.position.z;\n            }\n\n        }\n\n        if (typeof options.offset !== \"undefined\") {\n\n            if (typeof options.offset.x !== \"undefined\") {\n                this.offset.x = options.offset.x / this.scale;\n            }\n\n            if (typeof options.offset.y !== \"undefined\") {\n                this.offset.y = options.offset.y / this.scale;\n            }\n\n            if (typeof options.offset.z !== \"undefined\") {\n                this.offset.z = options.offset.z / this.scale;\n            }\n\n        }\n\n        //this.original_position = this.position.clone();\n        this.original_position = new THREE.Vector3(0, 0, 0);\n        this.ray = new THREE.Raycaster();\n        this.ray_origin = new THREE.Vector3(0, 0, 0);\n        this.ray_dest = new THREE.Vector3(0, 0, 0);\n        this.line = new THREE.Line3( this.ray_origin, this.ray_dest  );\n\n\t\tvar model = this;\n        this.scene.models.add(this);\n\n        mcec.log(\"Model created with id \" + id);\n\n        if(typeof this.mouse_move == \"function\") {\n            mcec.bindMove((e) => { this.handleMouseMove(e) });\n        }\n\t}\n\n\tmakeTextSprite( message, parameters ) {\n        if ( parameters === undefined ) parameters = {};\n\n        var fontface = parameters.hasOwnProperty(\"fontface\") ? parameters[\"fontface\"] : \"Arial\";\n        var fontsize = parameters.hasOwnProperty(\"fontsize\") ? parameters[\"fontsize\"] : 18;\n        var borderThickness = parameters.hasOwnProperty(\"borderThickness\") ? parameters[\"borderThickness\"] : 4;\n        var borderColor = parameters.hasOwnProperty(\"borderColor\") ?parameters[\"borderColor\"] : { r:0, g:0, b:0, a:1.0 };\n        var backgroundColor = parameters.hasOwnProperty(\"backgroundColor\") ?parameters[\"backgroundColor\"] : { r:255, g:255, b:255, a:1.0 };\n        var textColor = parameters.hasOwnProperty(\"textColor\") ?parameters[\"textColor\"] : { r:0, g:0, b:0, a:1.0 };\n\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        context.font = \"Bold \" + fontsize + \"px \" + fontface;\n        var metrics = context.measureText( message );\n        var textWidth = metrics.width;\n\n        context.fillStyle   = \"rgba(\" + backgroundColor.r + \",\" + backgroundColor.g + \",\" + backgroundColor.b + \",\" + backgroundColor.a + \")\";\n        context.strokeStyle = \"rgba(\" + borderColor.r + \",\" + borderColor.g + \",\" + borderColor.b + \",\" + borderColor.a + \")\";\n\n        context.lineWidth = borderThickness;\n        //roundRect(context, borderThickness/2, borderThickness/2, (textWidth + borderThickness) * 1.1, fontsize * 1.4 + borderThickness, 8);\n\n        context.fillStyle = \"rgba(\"+textColor.r+\", \"+textColor.g+\", \"+textColor.b+\", 1.0)\";\n        context.fillText( message, borderThickness, fontsize + borderThickness);\n\n        var texture = new THREE.Texture(canvas)\n        texture.needsUpdate = true;\n\n        var spriteMaterial = new THREE.SpriteMaterial( { map: texture, useScreenCoordinates: false } );\n        var sprite = new THREE.Sprite( spriteMaterial );\n\n        //sprite.scale.set(0.5 * fontsize, 0.25 * fontsize, 0.75 * fontsize);\n\n        return sprite;\n    }\n\n\thandleMouseMove(e) {\n        if(this.has_init == false) return;\n        this.mouse_move(e);\n\t}\n\n\tgetScene() {\n\t    return this.scene.scene;\n    }\n\n\tadd(mesh) {\n\t    mcec.log(\"Adding mesh to group: \" + this.name);\n\t    this.group.add(mesh);\n    }\n\n    isModelSet () {\n        return !(typeof this.model == \"undefined\");\n    }\n\n    isMeshLoaded () {\n        return !(typeof this.model == \"undefined\");\n    }\n\n    getModel() {\n\t    return this.model;\n    }\n\n    addSubmodel(submodel, name) {\n\t    this.submodels.push(new submodel(this.scene, name, this));\n\n\t    return this;\n    }\n\n    setParentModel(parent) {\n\t    this.is_submodel = true;\n\t    this.parent_model = parent;\n\n\t    return this;\n    }\n\n    setTargetFromVector(vector) {\n        this.target = vector;\n    }\n\n    setTargetFromCoords(x, y, z) {\n        this.target = new THREE.Vector3(x, y, z);\n\n        if(this.set_target instanceof Function) this.set_target(this.target);\n    }\n\n    setTarget(x, z) {\n\t    var y = this.scene.world.getY(x, z);\n\t    this.target = new THREE.Vector3(x, y, z);\n\n        this.setTargetFromCoords(x, y, z);\n    }\n\n    hasTarget() {\n\t    if(this.target) {\n\t        return this.target;\n        }\n    }\n\n    getPosition() {\n\t    //return this.model.position;\n        return this.position;\n    }\n\n    loadedMesh(mesh) {\n\t    mesh.name = this.name;\n        this.model = mesh;\n        this.model.position.copy(this.position);\n        this.add(this.model);\n\n        this.updatePosition();\n\n        mcec.log(\"Mesh loaded for \" + this.name);\n\n        if(this.is_submodel) {\n            this.group.visible = false;\n        }\n\n        this.animations = this.getAnimations();\n\n        if(this.animations > 0) {\n            this.model.animations = this.animations;\n            mcec.log(\"Detected that \" + this.name + \" has \" + this.animations.length + \" animations embedded\");\n        }\n\n        //var box = new THREE.Box3().setFromObject( mesh );\n        var box = new THREE.Box3().setFromObject(mesh);\n\n        // maybe use this later\n        //this.box_size = box.getSize();\n        //this.box_size = ;\n\n        //console.log(\"Detected box size for \" + this.name + \" - \" , this.box_size.y);\n\t}\n\n    getAnimations() {\n        var animations = [];\n\n\t    try {\n\t        var a = this.model.geometry.animations;\n\t        if(a.length) {\n\t            animations = a;\n            }\n        } catch(e) {}\n\n        return animations;\n\t}\n\n\tgetAnimation(name) {\n        var clip = THREE.AnimationClip.findByName(this.getAnimations(), name);\n        return clip;\n    }\n\n\tplayAnimation(name, play_at_normal_speed = false) {\n\t    if(this.playing_animation == name) {\n\t        mcec.log(\"Skipping playAnimation, because sequence is already playing\");\n\t        return this.action;\n        }\n\n        var clip = this.getAnimation(name);\n        var object = this.model;\n\n        this.mixer = new THREE.AnimationMixer(object);\n        this.action = this.mixer.clipAction(clip);\n        this.playing_animation = name;\n\n        if(!play_at_normal_speed) this.mixer.timeScale = this.animation_multiplier;\n\n        return this.action.play();\n    }\n\n    addToScene() {\n\t    if(this.is_submodel) {\n\t        // this.group.visible = false;\n\t        this.parent_model.group.add(this.group);\n        } else {\n            this.scene.add(this.getModel());\n\n\t        this.updatePosition();\n        }\n    }\n\n    handleInit() {\n\t    if(this.has_init) return;\n\n        if(this.init instanceof Function) {\n            this.init();\n        }\n        this.has_init = true;\n        this.handleUpdate();\n    }\n\n    handleUpdate(delta) {\n        this.updatePosition();\n        if(this.has_init && this.update instanceof Function) this.update(delta);\n\n        if(typeof this.mixer !== \"undefined\") {\n            this.mixer.update(delta);\n        }\n    }\n\n    handleClick(intersection, e) {\n        var x = intersection.point.x;\n        var y = intersection.point.y;\n        var z = intersection.point.z;\n\n        if(this.has_init && this.click instanceof Function) this.click(x, y, z, intersection, e);\n    }\n\n    handlePhysics() {\n\t    return;// DISABLED\n        var hit = this.getIntersects();\n\n        if(( hit )) {\n            //var height = hits[0].distance;\n            //console.log(hit);\n            this.position.y -= hit;\n        }\n    }\n\n    handlePhysics_unused() {\n        var myplayer = this.scene.getMyPlayer();\n        var scene = this;\n\n        var timeStep = 1;\n        var timeLeft = timeStep + 1;\n        var birdsEye = 50;\n        var kneeDeep = 3;\n        var raycaster = new THREE.Raycaster();\n        raycaster.ray.direction.set(0, -1, 0);\n        var angles = new THREE.Vector2();\n        var displacement = new THREE.Vector3();\n        var platform = this.model;//scene.get().getObjectByName(\"platform\", true);\n        var dt = 5;\n        timeLeft += dt;\n        var time = 0.3, damping = 0.93, gravity = 0.01, tau = 2 * Math.PI;\n\n        raycaster.ray.origin.copy(myplayer.position);\n        raycaster.ray.origin.y += birdsEye;\n\n        var hits = raycaster.intersectObject(platform);\n\n        // are we above, or at most knee deep in, the platform?\n        if ((hits.length > 0) && (hits[0].face.normal.y > 0)) {\n            var actualHeight = hits[0].distance - birdsEye;\n            // collision: stick to the surface if landing on it\n            if ((myplayer.velocity.y <= 0) && (Math.abs(actualHeight) < kneeDeep)) {\n                myplayer.position.y -= actualHeight;\n                myplayer.velocity.y = 0;\n                myplayer.airborne = false;\n            }\n        }\n\n\n        //angles.copy(myplayer.spinning).multiplyScalar(time);\n        //if (!myplayer.airborne) myplayer.spinning.multiplyScalar(damping);\n\n        myplayer.rotation.add(angles);\n        myplayer.position.add(displacement);\n\n        // limit the tilt at ±0.4 radians\n        myplayer.rotation.x = Math.max(-0.4, Math.min(+0.4, myplayer.rotation.x));\n\n        // wrap horizontal rotation to 0...2π\n        myplayer.rotation.y += tau;\n        myplayer.rotation.y %= tau;\n\n        //\n        // var x = myplayer.motion.position.x;\n        // var y = myplayer.motion.position.y;\n        // var z = myplayer.motion.position.z;\n        //\n        // x = parseInt(x);\n        // y = parseInt(y);\n        // z = parseInt(z);\n        //\n        // console.log(x, y, z);\n    }\n\n    getMesh() {\n\t    if(!this.isMeshLoaded()) return false;\n\t    return this.model;\n    }\n\n    updatePosition() {\n\t    if(this.isMeshLoaded()) {\n\t        this.position.copy(this.getModel().position);\n        }\n\n        if(this.isMeshLoaded() && this.update_model instanceof Function) this.update_model();\n\n        // no need for submodels to proceed past this\n        if(this.is_submodel) return;\n\n        //this.group.position.copy(this.position);\n\n        if((this.position.x !== this.original_position.x || this.position.z !== this.original_position.z) && this.scene.world.isMeshLoaded()) {\n            if(this.move instanceof Function) this.move();\n            this.original_position = this.position.clone();\n        }\n    }\n\n    getIntersects(recurse) {\n\n\t    //this.model.geometry.computeBoundingBox();\n\n\t    var height = this.model.geometry.boundingBox.max.y;\n\t    var raycaster = this.raycaster;\n        raycaster.ray.origin.copy(this.position);\n        raycaster.ray.direction.set( 0, -1, 0 );\n        raycaster.ray.origin.y = this.position.y + height + 5;\n\n        var hits = raycaster.intersectObject( this.scene.world.model, false );\n\n        if( ( hits.length > 0 ) ) {\n            for(var i=0; i<hits.length; i++) {\n                if(hits[i].object.name == this.scene.world.model.name) return hits[i].distance - (height + 10);\n            }\n        }\n\n        this.raycaster = raycaster;\n\n        return false;\n    }\n\n    placeOnGround() {\n        var y = this.scene.world.getY(this.position.x, this.position.z);\n\n        if(y) {\n            this.getModel().position.y = y;\n            //mcec.log(\"Ground found @ \" + y);\n        } else {\n            mcec.log(\"Cant find the ground\");\n        }\n\n        this.is_placed = true;\n    }\n\n    placeMarkerFromVec(vec) {\n\t    this.placeMarker(vec.x, vec.y, vec.z);\n    }\n\n    placeMarker(x, y, z) {\n\n        if(!z) {\n            z = y;\n            y = this.scene.world.getY(x, z);\n        }\n\n        var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n        var material = new THREE.MeshBasicMaterial( {color: 0x00ffff} );\n        var cube = new THREE.Mesh( geometry, material );\n\n        cube.position.set(x, y, z);\n\n        this.scene.add(cube);\n    }\n\n    placePlane(x, y, z, width, height, alt) {\n\n\t    console.log(\"Making plane\");\n\n        var geometry = new THREE.PlaneBufferGeometry( width, height, 32);\n\n        if(alt == true) {\n            var material = new THREE.MeshBasicMaterial({color: 0x0000cc, side: THREE.DoubleSide, transparent: true, opacity: 0.5});\n            var plane = new THREE.Mesh( geometry, material );\n        } else {\n            var material = new THREE.MeshBasicMaterial({color: 0xFFF300, side: THREE.DoubleSide, transparent: true, opacity: 0.3});\n            var plane = new THREE.Mesh( geometry, material );\n        }\n\n\n        plane.lookAt(new THREE.Vector3(0, 1, 0));\n\n        plane.position.set(x, y, z);\n\n        this.scene.add(plane);\n    }\n\n    addShape( shape, extrudeSettings, color, x, y, z, rx, ry, rz, s ) {\n        // flat shape with texture\n        // note: default UVs generated by ShapeBufferGeometry are simply the x- and y-coordinates of the vertices\n        var group = new THREE.Group();\n        // var geometry = new THREE.ShapeBufferGeometry( shape );\n        // var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { side: THREE.DoubleSide} ) );\n        // mesh.position.set( x, y, z - 175 );\n        // mesh.rotation.set( rx, ry, rz );\n        // mesh.scale.set( s, s, s );\n        // group.add( mesh );\n\n        // flat shape\n        var geometry = new THREE.ShapeBufferGeometry( shape );\n        var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { color: color, side: THREE.DoubleSide } ) );\n        mesh.position.set( x, y, z - 125 );\n        mesh.rotation.set( rx, ry, rz );\n        mesh.scale.set( s, s, s );\n        group.add( mesh );\n\n        return mesh;\n\n        // extruded shape\n        // var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );\n        // var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { color: color } ) );\n        // mesh.position.set( x, y, z - 75 );\n        // mesh.rotation.set( rx, ry, rz );\n        // mesh.scale.set( s, s, s );\n        // group.add( mesh );\n\n        //this.addLineShape( shape, color, x, y, z, rx, ry, rz, s );\n\n        return group;\n    }\n\n//     var roundedRectShape = new THREE.Shape();\n// ( function roundedRect( ctx, x, y, width, height, radius ) {\n//         ctx.moveTo( x, y + radius );\n//         ctx.lineTo( x, y + height - radius );\n//         ctx.quadraticCurveTo( x, y + height, x + radius, y + height );\n//         ctx.lineTo( x + width - radius, y + height );\n//         ctx.quadraticCurveTo( x + width, y + height, x + width, y + height - radius );\n//         ctx.lineTo( x + width, y + radius );\n//         ctx.quadraticCurveTo( x + width, y, x + width - radius, y );\n//         ctx.lineTo( x + radius, y );\n//         ctx.quadraticCurveTo( x, y, x, y + radius );\n//     } )( roundedRectShape, 0, 0, 50, 50, 20 );\n\n    // function for drawing rounded rectangles\n    roundRect(ctx, x, y, w, h, r) {\n        //ctx.beginPath();\n        ctx.moveTo(x+r, y);\n        ctx.lineTo(x+w-r, y);\n        ctx.quadraticCurveTo(x+w, y, x+w, y+r);\n        ctx.lineTo(x+w, y+h-r);\n        ctx.quadraticCurveTo(x+w, y+h, x+w-r, y+h);\n        ctx.lineTo(x+r, y+h);\n        ctx.quadraticCurveTo(x, y+h, x, y+h-r);\n        ctx.lineTo(x, y+r);\n        ctx.quadraticCurveTo(x, y, x+r, y);\n        //ctx.closePath();\n        //ctx.fill();\n        //ctx.stroke();\n    }\n\n    lookToward(x, z) {\n\t    // get real dest height, but set it to current height to not alter player angle\n        //var y = this.scene.world.getY(x, z);\n\n        //var bbox = new THREE.Box3().setFromObject(this.group);\n        //var height = bbox.max.y - bbox.min.y;\n        var dest = new THREE.Vector3(x, this.position.y, z);\n        var sim = new THREE.Object3D();\n\n        var mult_z = 5;\n\n        // copy player location and roation\n        sim.position.copy(this.getModel().position);\n        sim.rotation.copy(this.getModel().rotation);\n\n        // make sim look toward dest\n        sim.translateZ(-mult_z);\n        sim.lookAt(dest);\n\n        // convert sim rotation to degrees, then apply to our player\n        var rotation = this.get360Rotation(sim);\n        this.set360Rotation(rotation);\n        //this.scene.camera.setChaseRotation(rotation);\n\n        // set destination height correctly\n        //dest.y = y;\n\n        // todo: ask server to walk me there ?\n        // todo: make player rotate when server sends confirmation\n\n        //return dest;\n    }\n\n    getVectorFromFront(dist, mesh) {\n        var mesh2 = new THREE.Object3D();\n\n        if(!mesh) mesh = this.getModel();\n\n        mesh2.position.copy(mesh.position);\n        mesh2.rotation.copy(mesh.rotation);\n\n        mesh2.translateZ(dist);\n\n        return mesh2.position.clone();\n    }\n\n    hideSubmodel(name) {\n        var model = this.group.getObjectByName(name);\n\n        model.visible = false;\n    }\n\n    showSubmodel(name) {\n        var model = this.group.getObjectByName(name);\n\n        model.visible = true;\n    }\n\n    get360Rotation(mesh) {\n\t    if(!mesh) mesh = this.getModel();\n\n        var euler = new THREE.Euler();\n        euler.order = \"YXZ\";\n        euler.setFromQuaternion(mesh.quaternion);\n\n        var rotation = (euler.y * THREE.Math.RAD2DEG) + 180;\n\n\t    return rotation;\n    }\n\n    set360Rotation(degrees) {\n        var euler = new THREE.Euler();\n        euler.order = \"YXZ\";\n        euler.setFromQuaternion(this.getModel().quaternion);\n        euler.y = ((degrees - 180)/THREE.Math.RAD2DEG);\n\n        this.getModel().setRotationFromEuler(euler);\n        this.rotation = degrees;\n\n        return this.rotation;\n    }\n\n    getPointInBetweenByLen(pointA, pointB, length) {\n        var dir = pointB.clone().sub(pointA).normalize().multiplyScalar(length);\n        return pointA.clone().add(dir);\n    }\n\n    getPointInBetweenByPerc(pointA, pointB, percentage) {\n        var dir = pointB.clone().sub(pointA);\n        var len = dir.length();\n        dir = dir.normalize().multiplyScalar(len*percentage);\n        return pointA.clone().add(dir);\n    }\n\n    distanceBetween( v1, v2 ) {\n\n        var dx = v1.x - v2.x;\n        var dy = v1.y - v2.y;\n        var dz = v1.z - v2.z;\n\n        return Math.sqrt( dx * dx + dy * dy + dz * dz );\n    }\n\n    XZdistanceBetween( v1, v2 ) {\n        var dx = v1.x - v2.x;\n        var dz = v1.z - v2.z;\n\n        return Math.sqrt( dx * dx + dz * dz );\n    }\n\n    distanceFrom( vec ) {\n        return this.XZdistanceBetween(this.position, vec);\n    }\n\n    // called when the physics engine wants to move something\n    physicsSetPosition(x, y, z) {\n\n\t    if(x) {\n            if (typeof this.scale !== \"undefined\") {\n                //y -= (this.scale * this.size.y);\n            }\n\n            y -= 5;\n\n            this.physics_vector = new THREE.Vector3(x, y, z);\n\n            this.getModel().position.set(x, y, z);\n            this.position.set(x, y, z);\n        } else {\n\t        //this.getModel().position.set(this.position.clone());\n        }\n\n    }\n}\n","var mcec = require('../shared/mcec');\n\nclass camera {\n    constructor(scene) {\n        this.scene = scene;\n\n        // todo: load defaults from config\n        this.maxHeight = mcec.isDevMode() ? 500 : 150;\n        this.minHeight = 35;\n        //\n        this.maxRotation = 360;\n        this.minRotation = 0;\n        //\n        this.player_height = 2;\n        this.camera_offset = 3;\n        //\n        this.reset_camera = false; // use this to reset camera rotation back to behind the player\n        this.fly_mode = false; // only for development use\n        this.lock_player_to_flight_camera = false; // self explanatory hahahahahahahahaha\n\n        this.camera = this.create();\n\n        // true will copy players position to camera position on load\n        this.update_flight_cam = true;\n        this.shift_multiplier = 1;\n        this.shift_max = 100;\n        this.shift_easing = 0.1;\n    }\n\n    watchControls() {\n        var scale = 1.5;\n        var x_factor = 1.8 * scale;\n        var y_factor = 1.5 * scale;\n\n        // left arrow\n        mcec.ifKeyDown(37, () => {\n            this.setRotation(x_factor);\n        });\n\n        // right arrow\n        mcec.ifKeyDown(39, () => {\n            this.setRotation(-x_factor);\n        });\n\n        // up arrow\n        mcec.ifKeyDown(38, () => {\n            this.setHeight(y_factor);\n        });\n\n        // down arrow\n        mcec.ifKeyDown(40, () => {\n            this.setHeight(-y_factor);\n        });\n    }\n\n    create () {\n        // todo: load these from player prefs\n        this.rotation = 0;\n        this.height = this.minHeight * 1.2;\n\n        //this.height = this.maxHeight;\n        this.chase = true; // true for chase camera!\n\n        this.camera = new THREE.PerspectiveCamera(40, 1, 1, 10000);\n        this.camera.useQuaternion = true;\n\n        //this.cube = new THREE.Mesh(new THREE.CubeGeometry(10, 10, 10, 10, 10, 10), new THREE.MeshBasicMaterial({color: 0x00aaff}));\n        //this.scene.add(this.cube);\n\n        this.update_flight_cam = true;\n        //this.camera.position.set(190.5868832470435, 628.201465651957, -1167.9644912477233);\n        //this.camera.lookAt(new THREE.Vector3(0, -1, 0));\n\n//            {x: -5.929157268400164, y: 280.3812646691446, z: 635.4284977385496}\n// //            -0.4536856055188674, _y: 0.052359877559829876, _z: 0, _order: \"XYZ\",\n\n//         p {x: 7.680423544965432, y: -68.72132594194467, z: 15.180308778621093}\n//         mcec.getApp().scene.camera.camera.rotation\n//         Ya {_x: -0.8119535586032041, _y: -0.030033283560852827, _z: -0.03165694404998019, _order: \"XYZ\", onChangeCallback: ƒ}\n\n        return this.camera;\n    }\n\n    setLoginCamera() {\n        this.camera.position.set(-900, 300, -900);\n        this.camera.lookAt(new THREE.Vector3(100, -900, 100));\n    }\n\n\n    // for rendering shit\n    getOrthoCamera() {\n        if(typeof this.camera_ortho == \"undefined\") {\n            this.sceneRenderTarget = new THREE.Scene();\n\n            this.camera_ortho = new THREE.OrthographicCamera( this.scene.world.width / - 2, this.scene.world.width / 2, this.scene.world.height / 2, this.scene.world.height / - 2, -10000, 10000 );\n            this.camera_ortho.position.z = 1000;\n            this.sceneRenderTarget.add( this.camera_ortho );\n        }\n\n        return this.camera_ortho;\n    }\n\n    get () {\n        return this.camera;\n    }\n\n    setHeight(offset) {\n        this.height += offset;\n\n        if(this.height > this.maxHeight) this.height = this.maxHeight;\n        if(this.height < this.minHeight) this.height = this.minHeight;\n\n        return this.height;\n    }\n\n    setTarget (target) {\n        this.camera.target = target;\n        this.controls.target.copy(target);\n    }\n\n    setChase(enabled) {\n        this.chase = enabled;\n    }\n\n    setRotation(offset) {\n\n        if(this.fly_mode) return;\n\n        if(this.chase) {\n            //disable chase cam\n            this.setChase(false);\n            //this.rotation = this.get360Rotation();\n        }\n\n        var rotation = this.rotation + offset;\n\n        if(rotation > this.maxRotation) rotation = this.minRotation + offset;\n        if(rotation < this.minRotation) rotation = this.maxRotation + offset;\n\n        this.rotation = rotation;\n        //console.log(\"NEW ROTATION:\", rotation);\n\n        //return this.set360Rotation(rotation);\n\n        // console.log(\"ROTATION\", this.rotation);\n        // console.log(\"360\", this.get360Rotation());\n        // console.log(\"PLAYER 360\", this.scene.getMyPlayer().get360Rotation());\n    }\n\n    setChaseRotation(rotation) {\n        if(this.chase == false) return;\n\n        this.set360Rotation(rotation - 90);\n    }\n\n    update (timeElapsed) {\n        this.watchControls();\n\n        var camera = this.camera;\n        var scene  = this.scene;\n\n        var dist = (this.camera_offset * 2) + (2 * this.height);\n        // var x = Math.cos(((this.rotation / THREE.Math.RAD2DEG) * 180) * dist + scene.getMyPlayer().position.x;\n        // var z = Math.sin(((this.rotation / THREE.Math.RAD2DEG) * 180) * dist + scene.getMyPlayer().position.z;\n\n        // set camera position\n        // camera.position.x = x;\n        // camera.position.z = z;\n        //camera.position.y = scene.getMyPlayer().position.y;\n\n        if(this.scene.getMyPlayer() == false) return;\n        if(this.scene.getMyPlayer().isMeshLoaded() == false) return;\n\n        if(!this.fly_mode) {\n\n            var position = new THREE.Vector3(scene.getMyPlayer().position.x, scene.getMyPlayer().position.y, scene.getMyPlayer().position.z);\n            // add standard offset to camera position\n            position.y += this.camera_offset;\n\n            // add height offset set from arrow keys\n            position.y += this.height;\n\n            // set camera position\n            camera.position.copy(position);\n\n            // set camera position if chase cam\n            if (this.chase || this.reset_camera) {\n                var behind_player = scene.getMyPlayer().getVectorFromFront(-dist);\n\n                camera.position.x = behind_player.x;\n                camera.position.z = behind_player.z;\n\n                // just run once to reset camera\n                if (this.reset_camera) {\n                    this.reset_camera = false;\n                }\n            } else {\n                var obj = new THREE.Object3D();\n\n                obj.position.copy(position);\n\n                this.set360Rotation(this.rotation, obj);\n                obj.translateZ(dist); // change to -dist\n\n                camera.position.copy(obj.position);\n            }\n\n\n            // create a target\n            var lookAt = new THREE.Object3D();\n            lookAt.position.copy(scene.getMyPlayer().getPosition());\n            lookAt.position.y += this.player_height;\n\n            //if(this.chase) lookAt.translateZ(5);\n\n            // look at the player\n            camera.lookAt(lookAt.position);\n        } else {\n            if(this.update_flight_cam) {\n                this.update_flight_cam = false;\n                this.camera.position.copy(this.scene.getMyPlayer().model.position);\n                this.camera.position.y += 50;\n                this.camera.lookAt(this.scene.getMyPlayer().model.position);\n\n                // this.camera.position.set(261.49, -73.98, -14.18);\n                // var euler = new THREE.Euler(-2.72, -0.012, 3.11, 'XYZ' );\n                //this.camera.setRotationFromEuler(euler);\n\n\n                return;\n            }\n\n            var target = new THREE.Object3D();\n            target.position.copy(camera.position);\n            target.rotation.copy(camera.rotation);\n\n            var factor = 0.2;\n            target.translateZ(factor);\n\n\n            var euler = new THREE.Euler( 0, 0, 0, 'YXZ' );\n            euler.setFromQuaternion(camera.quaternion);\n\n            var x_factor = 2.5;\n            var y_factor = 1.5;\n\n            // shift\n            if(mcec.key('16')) {\n                this.shift_multiplier += this.shift_multiplier * this.shift_easing;\n                if(this.shift_multiplier > this.shift_max) this.shift_multiplier = this.shift_max;\n\n                factor = factor * this.shift_multiplier;\n            } else {\n                this.shift_multiplier = 1;\n            }\n\n            // arrow up\n            if(mcec.key('38')) {\n                euler.x += (Math.PI / 180) * y_factor;\n            }\n\n            // arrow down\n            if(mcec.key('40')) {\n                euler.x -= (Math.PI / 180) * y_factor;\n            }\n\n            // arrow left\n            if(mcec.key('37')) {\n                euler.y += (Math.PI / 180) * x_factor;\n\n                //camera.position.x = radius * Math.cos( angle );\n                //camera.position.z = radius * Math.sin( angle );\n\n                //angle += 0.01;\n            }\n\n            // arrow right\n            if(mcec.key('39')) {\n                euler.y -= (Math.PI / 180) * x_factor;\n            }\n\n            camera.quaternion.setFromEuler(euler);\n\n            // w - up\n            if(mcec.key('87')) {\n                camera.translateZ(-factor);\n                //camera.position.z += (-factor);\n            }\n\n            // s - down\n            if(mcec.key('83')) {\n                //camera.position.z += factor;\n                camera.translateZ(factor);\n            }\n\n            // a - left\n            if(mcec.key('65')) {\n                camera.translateX(-factor);\n                //camera.position.x += (-factor);\n            }\n\n            // d - right\n            if(mcec.key('68')) {\n                camera.translateX(factor);\n                //camera.position.x += (factor);\n            }\n\n            if(mcec.key('32')) {\n                this.scene.getMyPlayer().model.position.copy(camera.position);\n                //this.scene.world.spawnBall(camera.position.clone());\n            }\n\n            //camera.rotation.setFromEuler(euler);\n            //camera.lookAt(target);\n\n            if(this.lock_player_to_flight_camera) {\n                this.scene.getMyPlayer().model.position.x = camera.position.x;\n                this.scene.getMyPlayer().model.position.z = camera.position.z;\n            }\n\n\n        }\n\n        // whatever this does\n        camera.updateProjectionMatrix();\n\n        // update this variable\n        this.rotation = this.get360Rotation();\n    }\n\n    _trashz() {\n        //camera.lookAt(this.myplayer.getPosition());\n        //camera.position.y = this.myplayer.getPosition().y + 20;\n\n        // var rotation = new THREE.Euler(0, 0, 0);\n        //\n        // rotation.x = scene.getMyPlayer().rotation.x;\n        // rotation.y = scene.getMyPlayer().rotation.y;\n        //\n        // //camera.quaternion.setFromEuler(rotation);\n\n        // var pressed = mcec.key(\"32\");\n        // if(typeof pressed !== \"undefined\") {\n        //     console.log(pressed);\n        // }\n        //console.log(camera.rotation);\n        //camera.position.x += 500;\n        //camera.zoom = zoomFactor;\n\n        //console.log(this.myplayer.model.position);\n\n\n        //mcec.getApp().scene.getCamera().position.y += 1000.0;\n        //mcec.getApp().scene.getCamera().position.x += 8.0;\n\n        //this.getCamera().target = this.getMyPlayer().getPosition();\n\n        //this.getCamera().position.x = this.getMyPlayer().motion.position.x;\n        //this.getCamera().position.z = this.getMyPlayer().motion.position.z;\n\n        //var zoomFactor = 500;\n    }\n\n    get360Rotation(mesh) {\n        if(!mesh) mesh = this.camera;\n\n        var euler = new THREE.Euler();\n        euler.order = \"YXZ\";\n        euler.setFromQuaternion(mesh.quaternion);\n\n        var rotation = (euler.y * THREE.Math.RAD2DEG) + 180;\n        return rotation;\n    }\n\n    set360Rotation(degrees, mesh) {\n        if(!mesh) mesh = this.camera;\n        if(!degrees) degrees = this.rotation;\n\n        var euler = new THREE.Euler();\n        euler.order = \"YXZ\";\n        euler.setFromQuaternion(mesh.quaternion);\n        euler.y = ((degrees - 180)/THREE.Math.RAD2DEG);\n\n        mesh.setRotationFromEuler(euler);\n        if(mesh == this.camera) this.rotation = degrees;\n\n        return this.rotation;\n    }\n}\n\nmodule.exports = camera;","//global.THREE = require('../js/build/three.min');\n\nvar mcec = require('../shared/mcec');\nvar io = require('../src/sockets');\nvar scene = require('../src/scene');\nvar login = require('../src/login');\nvar jQuery = require('../js/jquery-1.12.4.min');\n\nclass game {\n    constructor() {\n        global.$ = jQuery;\n        global.mcec = mcec;\n\n        // version to enforce\n        this.version = '0.0.1b';\n\n        // yeah\n        this.clock = new THREE.Clock();\n\n        // main bitches\n        this.login = new login(this);\n        this.scene = new scene(this);\n\n        // idk\n        this.state = -1; // havent received a state\n        this.last_state = false;\n        this.login_ready = false;\n\n        mcec.setApp(this);\n        mcec.getApp().start();\n    }\n\n\n    update() {\n        var delta = this.clock.getDelta();\n\n        if(typeof this.login !== \"undefined\") this.login.update(delta);\n        if(typeof this.scene !== \"undefined\") this.scene.update(delta);\n    }\n\n    setBinds() {\n        // bind events and such\n        var get_ping = () => {\n            io.send('latency', Date.now(), function(startTime) {\n                var latency = Date.now() - startTime;\n                mcec.log('My ping is: ' + latency + 'ms');\n            });\n        };\n\n        io.bind('connect', () => {\n            mcec.log(\"Socket connected.\");\n\n            get_ping();\n        });\n\n        io.bind('message', (msg) => {\n            mcec.log(\"Incoming fucking message \" + msg);\n        });\n\n        io.bind('disconnect', () => {\n            mcec.log(\"Socket disconnected.\");\n\n            this.state = -1;\n            this.scene.doReset();\n        });\n\n        io.bind('ping', () => {\n            get_ping();\n        });\n\n        io.bind('state', (state) => {\n            mcec.log(\"Server says my state is: \" + state);\n\n            this.state = state;\n        });\n\n        this.scene.setBinds();\n    }\n\n    start() {\n        // start connection and create socket (before binds)\n        io.connect();\n\n        this.setBinds();\n\n        // this is where the magic happens\n        //var login = this.login;\n        //login.show();\n    }\n}\n\nmodule.exports = game;","var players = require('../src/players');\nvar world = require('../src/world');\nvar renderer = require('../src/renderer');\nvar camera = require('../src/camera');\nvar terrain = require('../src/terrain');\nvar mcec = require('../shared/mcec');\nvar io = require('../src/sockets');\nvar views = require('../src/views');\nimport models from '../src/models';\nimport '../js/objects/water';\n//import '../js/water-material';\n\nclass login {\n    constructor(game) {\n        this.game = game;\n        this.enabled = false;\n\n        this.start();\n    }\n\n    // called upon init\n    start() {\n        // create a div that we will put our login screen into\n        this.div = $('<div>').attr('id', 'container-login');\n\n        // this is a div that will be displayed when the server isnt connected\n        this.loading_div = $('#container-loading');\n\n        // inject our login div into the page\n        $('body').prepend(this.div);\n    }\n\n    hide() {\n        this.loading_div.hide()\n        this.div.fadeOut(500, () => {\n           this.div.hide();\n           this.div.html('');\n        });\n    }\n\n    // called to show the login screen\n    show() {\n        if(this.is_showing) return;\n        this.is_showing = true;\n\n        mcec.log(\"Showing login screen\");\n\n        views.clearBinds();\n\n        views.load('login', (html) => {\n            this.div.html(html);\n            this.loading_div.hide();\n            this.div.show();\n        }).bindForm('login', (data, inputs, e) => {\n            this.doLogin(inputs.user, inputs.pass);\n        });\n\n        //this.game.scene.camera.setLoginCamera();\n    }\n\n    show_loader() {\n        this.div.hide();\n        this.div.html('');\n\n        this.loading_div.show();\n\n        this.game.scene.camera.setLoginCamera();\n    }\n\n    doLogin(user, pass) {\n        mcec.log(`doLogin(${user}, ${pass})`);\n\n        io.send('login', {user: user, pass: pass}, (result, user_info, error) => {\n            mcec.log(\"LOGIN\", result, user_info, error);\n            if(result == true) {\n                this.user_info = user_info;\n                this.game.scene.getMyPlayer().loadDefaults(user_info);\n            } else {\n                alert(error);\n            }\n        });\n    }\n\n    // called per tick\n    update(delta) {\n        if(typeof this.div == \"undefined\") return;\n\n        var changed = false;\n\n        if(this.last_state !== this.game.state) changed = true;\n        this.last_state = this.game.state;\n\n        if(changed) {\n            this.is_showing = false;\n        }\n\n        if (this.game.state == -1) {\n            this.show_loader();\n        }\n\n        if(this.game.state <= 0) {\n            this.show();\n        }\n\n        if(this.game.state > 0) {\n            this.hide();\n        }\n    }\n}\n\nmodule.exports = login;","// import ColladaLoader from \"../src/ColladaLoader.js\";\nvar mcec = require('../shared/mcec');\n\nexport default class models {\n\tconstructor(scene) {\n\t\tthis.scene = scene;\n        this.queue = [];\n        this.queue_textures = [];\n        this.models = [];\n\t    this.textures = [];\n\t    this.has_init = false;\n\t    this.queue_started = false;\n\t}\n\n\tadd (model) {\n\t    if(typeof model.filename !== \"undefined\" && model.filename.indexOf('.png')) {\n\t        model.loaded = false;\n            this.queue_textures.push(model);\n            return;\n\t    }\n        this.queue.push(model);\n    }\n\n    hide () {\n        while(scene.children.length > 0){\n            scene.remove(scene.children[0]);\n        }\n    }\n\n    click(e) {\n        if(!this.has_init) {\n            mcec.log(\"Waiting for all models to initialize ..\");\n            return;\n        }\n\n        // var raycaster = new THREE.Raycaster(); // create once\n        // var mouse = new THREE.Vector2(); // create once\n        //\n        // mouse.x = ( e.clientX / mcec.getViewportSize().width ) * 2 - 1;\n        // mouse.y = - ( e.clientY / mcec.getViewportSize().height ) * 2 + 1;\n        //\n        // raycaster.setFromCamera( mouse, this.scene.getCamera() );\n\n        var camera = this.scene.getCamera();\n\n        var vector = new THREE.Vector3();\n        var raycaster = new THREE.Raycaster();\n        var dir = new THREE.Vector3();\n\n        vector.set( ( e.clientX / window.innerWidth ) * 2 - 1, - ( e.clientY / window.innerHeight ) * 2 + 1, 0.5 ); // z = 0.5 important!\n        vector.unproject( camera );\n        raycaster.set( camera.position, vector.sub( camera.position ).normalize() );\n\n        var intersects = raycaster.intersectObjects(this.scene.scene.children, true);\n\n\n        // GPU PICKING\n        // this.scene.gpuPicker.needUpdate = true;\n        //\n        // var raymouse = new THREE.Vector2();\n        // raymouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n        // raymouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n        //\n        // raycaster.setFromCamera( raymouse, this.scene.getCamera() );\n        // var intersects = this.scene.gpuPicker.pick(this.scene.mouse, raycaster);\n\n\n        for( var i = 0; i < intersects.length; i++ ) {\n            var intersection = intersects[ i ];\n            var mesh = intersection.object;\n            var model = this.get(mesh);\n\n            //mcec.log(\"INTERSECTION\", intersection, mesh, model);\n\n            if(model) {\n                model.handleClick(intersection, e);\n            }\n\n            if(mesh.name == \"\") continue;\n\n            // console.log(e);\n            // mcec.log(\"Clicked on object \" + obj.name);\n            // console.log(obj);\n\n            //this.scene.world.placeMarker(intersection.point.x, intersection.point.y+1, intersection.point.z);\n\n            if(mesh.name == \"click_mesh\") continue;\n            if(mesh.name == \"skybox\") continue;\n            if(mesh.type == \"LineSegments\") continue;\n\n\n\n            break;\n        }\n    }\n\n    // get model by mesh\n    get (mesh) {\n        for(var i=0; i<this.models.length; i++) {\n            var model = this.models[ i ];\n\n            var is_platform = (mesh.name == \"platform\" && model.name == \"platform\");\n\n            if(model.model == mesh || is_platform) {\n                return model;\n            }\n        }\n\n        return false;\n    }\n\n    getTexture (id) {\n        for(var i=0; i<this.textures.length; i++) {\n            var texture = this.textures[ i ];\n\n            if(texture.id == id) return texture.texture;\n        }\n\n        return false;\n    }\n\n    // load all models in queue\n    startQueue (callback) {\n\t    var models = this;\n\t    models.callback = callback;\n\n        this.queue_started = true;\n\t    this.processQueue();\n    }\n\n    removeFromQueue(model) {\n\n\t    var new_q = [];\n\n\t    for(var i=0; i<this.queue.length; i++) {\n\t        if(this.queue[i] !== model) {\n\t            new_q.push(this.queue[i]);\n            }\n        }\n\n        this.queue = new_q;\n    }\n\n    processQueue() {\n        if(!this.queue_started) return;\n\n        var waiting = 0;\n\n\n        for(var i=0; i<this.queue.length; i++) {\n            var model = this.queue[i];\n\n            if(!model.started) {\n                model.started = true;\n                this.load(model);\n\n                mcec.log(\"Loading: \" + model.id);\n            }\n\n            if(model.isMeshLoaded()) {\n\n                this.models.push(model);\n                this.removeFromQueue(model);\n\n                //this.queue.splice(i, 1);\n\n                mcec.log(\"Moving \" + model.id + \" to scene\");\n\n                model.addToScene();\n            } else {\n                waiting ++;\n            }\n        }\n\n        if(waiting > 0) {\n            mcec.log(\"Still \" + waiting + \" items left in queue\");\n            //this.processQueue();\n\n        } else {\n\n            if(!this.has_init) {\n\n                this.has_init = true;\n                mcec.log(\"Queue is complete, doing callback\");\n\n                if(typeof this.callback !== \"undefined\") this.callback();\n            }\n\n        }\n\n        //this.addToScene();\n\n        // for(var i=0; i<this.queue_textures.length; i++) {\n        //\n        //     var texture = this.queue_textures[i];\n        //     models.loadTexture(texture);\n        //\n        //     mcec.log(\"Loading: \" + texture);\n        // }\n    }\n\n    addToScene() {\n        // for(var i=0; i<this.queue.length; i++) {\n        //     var model = this.queue[ i ];\n        //\n        //\n        //\n        //\n        //     //this.scene.add(model.model);\n        // }\n        //\n        // for(var i=0; i<this.queue_textures.length; i++) {\n        //     var texture = this.queue_textures[ i ];\n        //\n        //     this.textures.push(texture);\n        //     this.queue_textures.slice(i, i+1);\n        //\n        //     //this.scene.add(model.model);\n        // }\n        //\n        // // all done, empty queue\n        // this.callback();\n        // this.init();\n    }\n\n    updateQueue() {\n\n\t    if(!this.queue_started) return;\n\n\t    var count = 0;\n        for(var i=0; i<this.queue.length; i++) {\n            var q = this.queue[ i ];\n\n            count ++;\n\n            if(q.isMeshLoaded()) {\n                count --;\n            }\n        }\n\n        // for(var i=0; i<this.queue_textures.length; i++) {\n        //     var q = this.queue_textures[ i ];\n        //\n        //     count ++;\n        //\n        //     if(q.loaded === true) {\n        //         count --;\n        //     }\n        // }\n\n        if(count > 0) {\n            mcec.log(\"Still \" + count + \" items left in queue\");\n\n            this.processQueue();\n\n        } else {\n\n            if(!this.has_init) {\n                mcec.log(\"Queue is complete, doing callback\");\n\n                this.callback();\n            }\n\n        }\n\n\n    }\n\n    queue_count () {\n\t    return this.queue.length;\n    }\n\n    load (model) {\n        var models = this;\n        var options = model.options;\n\n\n        if (!options) options = {};\n        var processMesh = function(mesh, options) {\n\n            if(!mesh) {\n                var mesh = new THREE.Object3D();\n            }\n\n            models.applyOptionsToMesh(mesh, options, model);\n\n            model.loadedMesh(mesh);\n            models.processQueue();\n        };\n\n        if(typeof options.filename == \"undefined\") {\n            mcec.log(options.name + \" has no filename, creating empty object3d\");\n\n            model.load(\n                function(mesh) {\n                    processMesh(mesh, options, model);\n                }\n            );\n\n\n        } else {\n            var url = options.filename + \"?r=\" + this.scene.clock.getDelta();\n\n            mcec.log(\"Loading model from url: \" + url);\n\n            var JSONLoaderCallback = function (geometry, materials) {\n\n                var hasMaterials = (typeof materials !== \"undefined\");\n\n                if (hasMaterials) {\n                    mcec.log(\"Model \" + options.name + \" came with materials\");\n                    var mesh = new THREE.SkinnedMesh(geometry, new THREE.MeshFaceMaterial(materials));\n                } else {\n                    mcec.log(\"Model \" + options.name + \" did not come with materials\");\n                    var mesh = new THREE.Mesh(geometry);\n                }\n\n                processMesh(mesh, options, model);\n            };\n            var ObjectLoaderCallback = function (object) {\n\n\n                if (typeof object.scene !== \"undefined\") {\n                    var mesh = object.scene;\n                } else {\n                    var mesh = object;\n                }\n\n                //var mesh = new THREE.Mesh( object.scene.children[0].geometry, object.scene.children[0].material );\n\n                //console.log(mesh);\n                //\n                // for(var i=0; i<mesh.children.length; i++) {\n                //\n                //     var child = mesh.children[ i ];\n                //\n                //     if(child.type == \"Mesh\") {\n                //         // console.log(\"CHILD\", child);\n                //         // child.material.side = THREE.DoubleSide;\n                //         // child.material.skinning = true;\n                //     }\n                // }\n\n                processMesh(mesh, options, model);\n            };\n\n\n            if (url.indexOf('.dae') != -1) {\n                var loader = new THREE.ColladaLoader();\n                loader.load(url, (obj) => {\n                    ObjectLoaderCallback(obj);\n                });\n            } else if (url.indexOf('.fbx') != -1) {\n                var loader = new THREE.FBXLoader();\n                loader.load(url, (obj) => {\n                    ObjectLoaderCallback(obj);\n                });\n            } else {\n                var loader = new THREE.JSONLoader();\n                loader.load(url, (geometry, materials) => {\n                    JSONLoaderCallback(geometry, materials);\n                });\n            }\n        }\n    }\n\n    applyOptionsToMesh(mesh, options, model) {\n\n        if (!options) var options = {};\n\n\t    mcec.log(\"Applying options to mesh: \" + options.name);\n\n        var hasMaterials = (typeof mesh.material !== \"undefined\");\n\n        if(hasMaterials) {\n            var material = mesh.material;\n        }\n\n        if(options.enhance === \"true\") {\n            mcec.log(\"Enabling enhancements\");\n            //mesh.geometry.dynamic = true;\n            mesh.castShadow = true;\n            mesh.receiveShadow = true;\n        }\n\n        if (typeof options.name !== \"undefined\") {\n            mesh.name = options.name;\n        }\n\n\n        //if(model) model.group.scale.set(model.scale, model.scale, model.scale);\n        if(typeof options.scale !== \"undefined\") mesh.scale.set(options.scale, options.scale, options.scale);\n\n        if (options.skinning === true && hasMaterials) {\n            mcec.log(\"Enabling skinning for \" + options.name);\n            for (var i = 0; i < material.length; i++) {\n                var m = material[i];\n                m.skinning = true;\n            }\n        }\n\n        if(hasMaterials && options.morph_targets !== \"undefined\" && options.morph_targets == true) {\n            mcec.log(\"Enabling morphTargets for \" + options.name);\n            for (var i = 0; i < material.length; i++) {\n                var m = material[i];\n                m.morphTargets = true;\n            }\n        }\n\n        if(hasMaterials && options.morph_normals !== \"undefined\" && options.morph_normals == true) {\n            mcec.log(\"Enabling morphNormals for \" + options.name);\n            for (var i = 0; i < material.length; i++) {\n                var m = material[i];\n                m.morphNormals = true;\n            }\n        }\n\n        if(hasMaterials && options.shininess !== \"undefined\") {\n            mcec.log(\"Modifying shininess for \" + options.name);\n            for (var i = 0; i < material.length; i++) {\n                var m = material[i];\n                m.shininess = options.shininess;\n            }\n        }\n\n        if (typeof options.place_on !== \"undefined\") {\n\n            //var y = models.get('platform').getY(90, 90);\n\n            //console.log(y);\n\n        }\n\n        if(mesh.name == \"self\") {\n\n        }\n\n        return mesh;\n\n    }\n\n    loadTexture (texture) {\n        var models = this;\n        var url = texture.filename;\n        var name = texture.name;\n\n        var loader = new THREE.TextureLoader();\n        loader.load(url, function (tx) {\n\n            texture.id = name;\n            texture.texture = tx;\n            texture.loaded = true;\n\n            mcec.log(\"Loaded texture: \" + name + \" from \" + url);\n\n            models.updateQueue();\n        });\n    }\n\n    update(delta) {\n\n        for(var i in this.models) {\n            var model = this.models[ i ];\n\n            if(!model.isMeshLoaded()) continue;\n\n            model.handleInit();\n            model.handleUpdate(delta);\n        }\n\n        this.processQueue();\n    }\n\n\n    modelsHaveInit() {\n        var init = true;\n\n\t    for(var model in this.models) {\n            if(this.models[ model ].has_init == false) init = false;\n        }\n\n        return init;\n    }\n\n    init() {\n        for(var model in this.models) {\n            this.models[ model ].handleInit();\n        }\n    }\n}\nmodule.exports = models;","import baseModel from '../src/basemodel';\nvar io = require('../src/sockets');\n\nclass player extends baseModel {\n\n    constructor(scene, id, defaults) {\n\n        var options = {\n            filename: 'shared/player.json',\n            scale: 10,\n            skinning: true,\n            // morph_targets: true,\n            // morph_normals: true,\n            // enhance: true,\n            shininess: 0,\n            //skinning: true,\n            //offset: {y: -145},\n            mass: 1\n        };\n\n        super(scene, id, Object.assign(options, defaults));\n\n\n        this.walk_speed = 0.5; // how fast we want the player to walk\n        this.walk_segment = 150; // how far to walk before each calculation\n        this.animation_multiplier = 1.5; // how fast the animation should play\n\n        this.apply_physics = true;\n        this.is_npc = (options.npc == true);\n        this.raycaster = new THREE.Raycaster();\n        this.walk_attempt = false; // # of retries when walking\n        this.is_walking = false;\n        // this.addSubmodel(player_weapon, 'weapon');\n        // this.addSubmodel(player_head, 'head');\n\n        if(typeof options.id !== \"undefined\") mcec.log(\"Player (user id #\" + options.id + \") initializing!\");\n    }\n\n    loadDefaults(user_info) {\n        if(typeof user_info == \"undefined\") return;\n\n        this.user_info = user_info;\n\n        for(var n in user_info) {\n            var v = user_info[ n ];\n\n            if(n == \"position\") {\n\n                this.position.x = v.x;\n                this.position.y = v.y;\n                this.position.z = v.z;\n\n                if(this.isMeshLoaded()) this.model.position = this.position;\n\n            }\n\n        }\n\n        if(typeof user_info.username !== \"undefined\") this.makeNameTag(user_info.username);\n    }\n\n    makeNameTag(text) {\n        //this.name_tag = this.makeTextSprite(text, { fontsize: 12, borderColor: {r:255, g:0, b:0, a:1.0}, backgroundColor: {r:255, g:100, b:100, a:0.8} } );\n        //this.name_tag = new SpriteText2D(text, { align: textAlign.center,  font: '40px Arial', fillStyle: '#000000' , antialias: false });\n\n\n        //this.scene.add( this.name_tag );\n\n        var loader = new THREE.FontLoader();\n        var font = loader.load('fonts/helvetiker_regular.typeface.json', (font) => {\n\n            var geometry = new THREE.TextGeometry(text,\n                {size: 0.1,\n                    height: 0.001,\n                    curveSegments: 3,\n                    font: font,\n                    bevelThickness: 0.1,\n                    bevelSize: 0.1,\n                    bevelEnabled: false\n                });\n\n            var name_tag = new THREE.Group();\n\n            // player name 1\n            var mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0xffffff, transparent: true, opacity: 0.3, side: THREE.FrontSide } ) );\n            mesh.position.z = 0.001;\n            name_tag.add(mesh);\n\n            // calc some geom brah\n            name_tag.children[0].geometry.computeBoundingBox();\n            var size = name_tag.children[0].geometry.boundingBox;\n            var width = size.max.x - size.min.x;\n            var height = size.max.y - size.min.y;\n\n            // rounded rect\n            var w = width + .07;\n            var h = height + .035;\n\n            // // player name shadow 1\n            // var mesh2 = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0x000000, transparent: true, opacity: 0.1, side: THREE.FrontSide } ) );\n            // mesh2.position.x += 0.02; // right\n            // mesh2.position.y += -0.02; // down\n            // mesh2.position.z = 0.025; // behind mesh1\n            // name_tag.add(mesh2);\n\n            // player name 2 ( FLIP SIDE )\n            var mesh3 = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0xffffff, transparent: true, opacity: 0.3, side: THREE.FrontSide } ) );\n            mesh3.rotation.y = THREE.Math.degToRad(180);\n            mesh3.position.x += width;\n            mesh3.position.z = -0.001; // behind\n            name_tag.add(mesh3);\n\n            // // player name shadow 2 ( FLIP SIDE )\n            // var mesh4 = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0x000000, transparent: true, opacity: 0.1, side: THREE.FrontSide } ) );\n            // mesh4.rotation.y = THREE.Math.degToRad(180);\n            // mesh4.position.x += width; // right\n            // mesh4.position.x -= 0.02; // right\n            // mesh4.position.y += -0.02; // down\n            // mesh4.position.z = -0.025;// behind\n            // name_tag.add(mesh4);\n\n            // create rect\n            var shape = new THREE.Shape();\n            this.roundRect( shape, 0, 0, w, h, 0.02 );\n\n            var geometry = new THREE.ShapeBufferGeometry( shape );\n            var label = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { color: 0x000000, transparent: true, opacity: 0.3, side: THREE.DoubleSide } ) );\n            label.position.z = 0; // center\n            label.position.y -= (h - height) * 1.05; // down\n            label.position.x -= (w - width) / 2; // left\n\n            name_tag.add(label);\n\n            this.name_tag = name_tag;\n\n\n            //this.name_tag.scale.set(0.1, 0.1, 0.1);\n        });\n    }\n\n    update_model() {\n\n        // stick to ground\n        //if(this.is_placed && this.is_walking) this.handlePhysics();\n    }\n\n    init() {\n        this.model.geometry.computeBoundingBox();\n        var bbox = new THREE.Box3().setFromObject(this.model);\n\n        this.size = bbox;\n        this.height = (bbox.max.y - bbox.min.y);\n        this.height_scaled = this.height / this.options.scale;\n        this.scene.camera.player_height = this.height;\n\n        mcec.log(\"Player completely loaded - \" + this.name, this.height);\n\n        //this.getModel().position.set(0, 50, 0);\n        //this.handlePhysics();\n        //this.is_placed = true;\n\n        //this.model.material\n\n        this.playIdleAnimation();\n\n        if(this.isMyPlayer()) {\n            this.localPlayerInit();\n        }\n\n        if (typeof this.name_tag !== \"undefined\") {\n            this.getModel().add(this.name_tag);\n        }\n\n        this.name_tag.children[0].geometry.computeBoundingBox();\n        this.name_tag.position.x = -(this.name_tag.children[0].geometry.boundingBox.max.x / 2);\n        this.name_tag.position.y = (this.height_scaled) * 1.1;\n\n        //this.initPhysics();\n\n        var material = new THREE.MeshBasicMaterial( {\n            color: 0xffffff,\n            transparent: true,\n            opacity: 0\n        } );\n\n        var geometry = new THREE.CylinderBufferGeometry(0.5, 0.05, 3.8, 4, 4);\n\n        var hitbox = new THREE.Mesh(\n            geometry,\n            material\n        );\n\n        //hitbox.position.y += 1;\n\n        hitbox.castShadow = false;\n        hitbox.receiveShadow = false;\n\n        hitbox.name = \"hitbox\";\n\n        this.hitbox = hitbox;\n        this.model.add(hitbox);\n        this.scene.hitboxes.push(this.hitbox);\n\n        // var scene = this.scene;\n        // this.can_update = false;\n        // var me = this;\n        // var loader = new THREE.JSONLoader();\n        // loader.load(\"shared/player.json\", function ( geometry, materials ) {\n        //\n        //     for ( var i = 0; i < materials.length; i ++ ) {\n        //         var m = materials[ i ];\n        //         m.skinning = true;\n        //         m.morphTargets = true;\n        //         // m.specular.setHSL( 0, 0, 0.1 );\n        //         // m.color.setHSL( 0.6, 0, 0.6 );\n        //         //m.map = map;\n        //         //m.envMap = envMap;\n        //         //m.bumpMap = bumpMap;\n        //         //m.bumpScale = 2;\n        //         //m.combine = THREE.MixOperation;\n        //         //m.reflectivity = 0.75;\n        //     }\n        //\n        //     var mesh = new THREE.SkinnedMesh(geometry, new THREE.MeshFaceMaterial(materials));\n        //\n        //     mesh.updateMatrix();\n        //     mesh.updateMatrixWorld(true);\n        //\n        //     mesh.scale.set(25,25,25);\n        //\n        //     mesh.position.x -= 100;\n        //     mesh.position.z += 100;\n        //     mesh.position.y = scene.world.getY(mesh.position.x, mesh.position.z);\n        //\n        //\n        //\n        //     if (typeof mesh.geometry !== \"undefined\" && typeof mesh.geometry.vertices !== \"undefined\") {\n        //         mcec.log(\"Reversing vertices for model \" + mesh.name);\n        //\n        //         var geo = mesh.geometry;\n        //         var verts = geo.vertices;\n        //\n        //         for (let i = 0; i < verts.length; i++) {\n        //             //verts[i].setX(verts[i].x * -1);\n        //             //verts[i].setY(verts[i].y * -1);\n        //         }\n        //\n        //         geo.verticesNeedUpdate = true;\n        //     }\n        //\n        //\n        //     scene.add(mesh);\n        //\n        //     me.testmesh = mesh;\n        //\n        //     me.testthemesh(mesh);\n        //\n        // } );\n    }\n\n    initPhysics() {\n\n        // idk\n        var mass = 15;\n        var mesh = this.getMesh();\n\n        // make a bounding box\n        var box = new THREE.Box3().setFromObject( mesh );\n        var x = box.size().x;\n        var y = box.size().y;\n        var z = box.size().z;\n\n        // maybe use this later\n        this.box_size = box.size();\n\n        //this.scene.world.addRigidBody(this);\n\n        // do random ammojs shit that i dont get\n        // var shape = new Ammo.btBoxShape( new Ammo.btVector3(x, y, z) );\n        // shape.setMargin( margin );\n        //\n        // var localInertia = new Ammo.btVector3( 0, 0, 0 );\n        // shape.calculateLocalInertia( mass, localInertia );\n        //\n        // var transform = new Ammo.btTransform();\n        // transform.setIdentity();\n        //\n        // var pos = mesh.position;\n        // transform.setOrigin( new Ammo.btVector3( pos.x, pos.y, pos.z ) );\n        //\n        // var motionState = new Ammo.btDefaultMotionState( transform );\n        // var rbInfo = new Ammo.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n        // var body = new Ammo.btRigidBody( rbInfo );\n        //\n        // mesh.userData.physicsBody = body;\n        //\n        // this.scene.world.dynamic_objects.push( mesh );\n        // this.scene.world.physics_world.addRigidBody( body );\n    }\n\n    localPlayerInit() {\n        // var x = this.position.x;\n        // var z = this.position.z;\n        // var radius = 30;\n        //\n        // // dont touch\n        // var min_x = x - (radius/2);\n        // var min_z = z -(radius/2);\n        // var max_x = x + (radius/2);\n        // var max_z = z +(radius/2);\n        //\n        // for(var _x=min_x; _x<max_x; _x++) {\n        //     for(var _z=min_z; _z<max_z; _z++) {\n        //\n        //         var pos = this.scene.world.terrain.GetGridSquarePositionAt(_x, _z);\n        //\n        //         var y = this.scene.world.terrain.getY(pos.x, pos.z);\n        //         var y2 = this.scene.world.terrain.getY(pos.x, pos.z, 1);\n        //\n        //         console.log(\"Y and Filtered Y:\", y, y2);\n        //\n        //         this.placePlane(pos.x, y2, pos.z, 5, 5);\n        //         //this.placePlane(pos.x, y2, pos.z, 5, 5, true);\n        //     }\n        // }\n\n        //this.scene.world.terrain.getCurrentSector().addWireframe();\n\n    }\n\n    click(e) {\n        mcec.log(\"player clicked on \" + this.user_info.id);\n        console.log(this);\n    }\n\n    set_target(target) {\n        this.startWalking();\n    }\n\n    startWalking() {\n        //console.time('testWalkTime');\n\n        this.is_walking = true;\n        this.walk_step = false;\n\n        this.playAnimation(\"Walk\");\n    }\n\n    // updated framely, and should just gradually pull the player down\n    applyGravity() {\n        if(this.stuck_to_ground == true) return;\n\n        var grav = 1;\n        var above = 10;\n        var raycaster = new THREE.Raycaster();\n        var y = this.position.y;\n\n        //raycaster.ray.direction.set( 0, -1, 0 );\n        //raycaster.ray.origin.set(this.position.x, this.position.y + above, this.position.z);\n\n        // var hits = raycaster.intersectObject( this.scene.world.terrain.getSectorFromPosition(this.position.x, this.position.z).mesh );\n        // var hits_filtered = [];\n        //\n        // if( ( hits.length > 0 ) ) {\n        //     for(var i=0; i<hits.length; i++) {\n        //         y = (hits[i].distance) - above;\n        //         break;\n        //     }\n        // }\n\n        //if(this.walk_step !== \"undefined\" && this.walk_step !== false) {\n        //    var alt = this.scene.world.terrain.getY(this.walk_step.x, this.walk_step.z, 1);\n        //} else {\n            var alt = this.scene.world.terrain.getY(this.position.x, this.position.z, this.position.y);\n        //}\n\n        var diff = this.position.y - alt;\n\n        // move player up\n        if(diff < 0) {\n            if(y + (grav * 2) > alt) y = alt;\n            else y += (grav * 2);\n        }\n\n        // move player down\n        if(diff > 0) {\n            if(y - grav < alt) y = alt;\n            else y -= grav;\n        }\n\n        if(y == this.model.position.y) {\n            this.stuck_to_ground = true;\n        }\n\n        //console.log(y, this.scene.world.terrain.getY(this.position.x, this.position.z, 10));\n\n        this.model.position.y = y;\n    }\n\n    // im walking, and need to move across the screen\n    walkUpdate(attempt) {\n        var segment_dist = this.walk_segment;\n\n        // clone target and set to player Y\n        var level_target = this.target.clone();\n        level_target.y = this.position.y; // so theres no messing with y position of our player\n\n        // are we less than 10% distance to the step?\n        if ((this.distanceFrom(this.walk_step) < (segment_dist * 0.1) || !this.walk_step) && !this.walk_step_pending) {\n\n            // calculate a new step step_segment toward the target\n            var new_step = this.getPointInBetweenByLen(this.getModel().position.clone(), this.target, segment_dist);\n\n            this.walk_step_pending = true;\n            io.send('walk', new_step, (pos) => {\n                this.walk_step = new THREE.Vector3(pos.x, pos.y, pos.z);\n                this.walk_step_pending = false;\n\n                mcec.log(\"[IO] Got walk step back!\", this.walk_step);\n            });\n\n            // place a marker on this next step for debug\n            // this.walk_step.y = this.scene.world.getY(this.walk_step.x, this.walk_step.z);\n            // this.placeMarker(this.walk_step.x, this.walk_step.y, this.walk_step.z);\n        }\n\n        // walk only if we have a step!\n        if(this.walk_step !== false) {\n\n            if (this.distanceFrom(this.walk_step) < 1 && this.walk_step_pending) {\n                mcec.log(\"LAG! Waiting on walk step!\");\n            } else {\n                // get a new point for this frame that is just an increment toward the walk_step, so walk_speed\n                var pos = this.getPointInBetweenByLen(this.getModel().position.clone(), this.walk_step, this.walk_speed);\n\n                // look toward the target\n                this.lookToward(pos.x, pos.z);\n\n                // set my X and Z to the new position, the altitude will be handled by 'gravity'\n                this.getModel().position.x = pos.x;\n                this.getModel().position.z = pos.z;\n\n                // check if arrived at dest\n                if (this.distanceFrom(this.target) < 1 && !this.walk_step_pending) {\n                    this.walkComplete();\n                }\n            }\n        }\n\n        /*\n        // if(!this.walk_step || distance_to_next < segment_dist * .1 || attempt > 0) {\n        //\n        //     if(target !== this.walk_step) {\n        //\n        //         mcec.log(\"Getting new walk step (\" + this.name + \"), distance was: \" + distance_to_next);\n        //\n        //         this.walk_step = this.getPointInBetweenByLen(this.getModel().position, target, segment_dist);\n        //\n        //         //this.walk_step.y = this.getModel().position.y;\n        //         //target.y = this.getModel().position.y;\n        //\n        //         var dist1 = this.distanceFrom(this.walk_step);\n        //         var dist2 = this.distanceFrom(target);\n        //\n        //         // if its going to take longer to take a step, than the whole trip..\n        //         if (dist1 > dist2) {\n        //             mcec.log(\"Setting final walk step same as target\");\n        //             this.walk_step = target.clone();\n        //         }\n        //\n        //         //this.walk_step.y = this.scene.world.getY(this.walk_step.x, this.walk_step.z);\n        //\n        //         //this.walk_step.y  += player_height + 5;\n        //\n        //         //this.placeMarker(this.walk_step.x, this.walk_step.y, this.walk_step.z);\n        //\n        //\n        //     }\n        // }\n\n        //this.walk_step = this.getPointInBetweenByLen(this.getModel().position, target, segment_dist);\n        //new_pos = this.getPointInBetweenByLen(old_pos, target, step_dist);\n\n        // calc distances\n        //var dist1 = this.distanceFrom(this.walk_step);\n        //var dist2 = this.distanceFrom(target);\n\n        // if(target !== this.walk_step) {\n        //     new_pos = this.getPointInBetweenByLen(this.getModel().position, this.walk_step, step_dist);\n        // }\n\n        //var hasnt_moved = false;\n        \n        // make movement\n        // if(old_pos.x > this.walk_step.x) {\n        //     new_pos.x -= step_dist;\n        // }\n        // if(old_pos.x < this.walk_step.x) {\n        //     new_pos.x += step_dist;\n        // }\n        //\n        // if(old_pos.z > this.walk_step.z) {\n        //     new_pos.z -= step_dist;\n        // }\n        // if(old_pos.z < this.walk_step.z) {\n        //     new_pos.z += step_dist;\n        // }\n\n        //new_pos = this.getPointInBetweenByLen(old_pos, this.walk_step, step_dist);\n\n        // if(new_pos.y > this.walk_step.y) {\n        //     new_pos.y -= step_dist;\n        // }\n        // if(new_pos.y < this.walk_step.y) {\n        //     new_pos.y += step_dist;\n        // }\n\n        //new_pos = this.getVectorFromFront(step_dist, {position: n});\n        //this.placeMarker(new_pos.x, new_pos.y, new_pos.z);\n\n        //var coords = this.getGridLocation();\n        //var target_coords = this.scene.world.terrain.getGridCoordsAt(this.target.x, this.target.z);\n        //var arrived = ((coords.x == target_coords.x && coords.y == target_coords.y));\n\n        //if(coords == this.grid_coords) {\n        //    hasnt_moved = true;\n        //}\n\n        //this.grid_coords = coords;\n        */\n    }\n\n    getGridLocation() {\n        var x = this.position.x;\n        var z = this.position.z;\n\n        var coords = this.scene.world.terrain.getGridCoordsAt(x, z);\n\n        return coords;\n    }\n\n    walkComplete() {\n        this.is_walking = false;\n        this.target = false;\n        this.walk_attempt = false;\n        this.walk_step = false;\n\n        mcec.log(\"I've finished walking (\" + this.name + \")\");\n\n        //this.placeOnGround();\n\n        if(this.isMyPlayer()) {\n            this.scene.world.clearClickMesh();\n        }\n\n        this.playIdleAnimation();\n\n\n        //console.timeEnd('testWalkTime');\n    }\n\n    playIdleAnimation() {\n        this.playAnimation(\"Idle\", true);\n    }\n\n    // called when the model is moved in any way\n    move() {\n        //this.placeOnGround();\n        //mcec.log(\"Placed player on ground (\" + this.name + \")\");\n\n        this.stuck_to_ground = false;\n\n        if(!this.has_init) return;\n\n        //this.name_tag.position.x -= 2;\n        //this.name_tag.position.x -= 5;\n        //this.name_tag.lookAt(this.scene.getCamera().position);\n    }\n\n    isMyPlayer () {\n        return (this == this.scene.getMyPlayer());\n    }\n\n    isNPC() {\n        return this.is_npc;\n    }\n\n    freeze() {\n        this.model = undefined;\n    }\n\n    walkTo(x, y, z) {\n        mcec.log(\"WalkTo(\" + x + \", \" + z + \")\");\n\n        if(!z) {\n            z = y;\n            this.setTarget(x, z);\n        } else {\n            //this.lookToward(x, z);\n            this.setTargetFromCoords(x, y, z);\n        }\n    }\n\n    // idk.. remove self from scene?\n    unload() {\n        mcec.log(\"Unloading player \", this);\n\n        for(var i=0; i<this.scene.scene.children.length; i++) {\n            var obj = this.scene.scene.children[i];\n\n            if(obj == this.model) {\n                this.scene.scene.remove(obj);\n            }\n        }\n\n        for(var i=0; i<this.scene.hitboxes.length; i++) {\n            var obj = this.scene.hitboxes[i];\n\n            if(obj == this.hitbox) {\n                this.scene.hitboxes.splice(i, 1);\n            }\n        }\n\n        this.scene.scene.remove(this.name_tag);\n    }\n\n    // this is called for every player on every render update,\n    // does NOT fire until the model is loaded\n    update() {\n        //this.model.position.z += 1;\n\n        if(!this.is_placed) {\n            this.placeOnGround();\n        }\n\n        if(!this.is_walking && this.hasTarget()) {\n            mcec.log(\"Found that I (\" + this.name + \") have a target\");\n            this.startWalking();\n        }\n\n        if(this.is_walking) {\n            this.walkUpdate();\n        } else {\n\n            var rand_x = Math.floor((Math.random() * 500) + 1) - 250;\n            var rand_y = Math.floor((Math.random() * 500) + 1) - 250;\n\n            var dist = this.distanceFrom(this.scene.getMyPlayer().position);\n            if(this.isNPC() && this.scene.world.has_init && dist > 5 && !this.is_walking) {\n\n                // var pos = this.getPointInBetweenByLen(this.position, this.scene.getMyPlayer().position, dist);\n\n                var pos = this.position;\n\n                mcec.log(this.name + \" my position: \" + pos.x + \", \" + pos.z);\n\n                var x = mcec.random(pos.x + 20, pos.x - 20);\n                var z = mcec.random(pos.z + 20, pos.z - 20);\n\n                mcec.log(this.name + \" walking to: \" + x + \", \" + z);\n\n                this.walkTo(x, z);\n\n            }\n\n        }\n\n        this.applyGravity();\n    }\n\n}\n\nmodule.exports = player;","import Player from '../src/player.js';\n\nclass players {\n    constructor(scene) {\n        this.scene = scene;\n\n        this.players = [];\n\n        this.myplayer = this.addMyPlayer();\n        //this.myplayer = false;\n    }\n\n    addPlayer (defaults) {\n        var player = new Player(this.scene, 'player', defaults);\n        this.players.push(player);\n\n        player.loadDefaults(defaults);\n\n        return player;\n    }\n\n    __OLD_addPlayer (id, options) {\n        var player = new Player(this.scene, id, options);\n        this.players.push(player);\n\n        return player;\n    }\n\n    addMyPlayer (defaults) {\n        var players = this;\n        var setCamera = function(mesh) {\n            players.setPlayerCamera(mesh);\n        };\n        var player = this.addPlayer(defaults);//, {callback: setCamera});\n\n        return player;\n    }\n\n    handleUpdate () {\n        for(var i=0; i<this.players.length; i++) {\n            mcec.log(\"UPDATING PLAYER \" + i);\n            this.players[i].handleUpdate();\n        }\n    }\n\n    getMyPlayer () {\n        return this.myplayer;\n    }\n\n    setPlayerCamera (mesh) {\n        mcec.log(\"Setting player camera\");\n        mesh.add(this.camera.get());\n        this.scene.setControls();\n    }\n\n    getPlayer(id) {\n        for(var i=0; i<this.players.length; i++) {\n            var player = this.players[i];\n\n            if(player.user_info.id == id) return player;\n        }\n    }\n\n    removePlayer(id) {\n        for(var i=0; i<this.players.length; i++) {\n            var player = this.players[i];\n\n            if(player.user_info.id == id) {\n                player.unload();\n                this.players.splice(i, 1);\n\n                return true;\n            }\n        }\n    }\n\n}\n\nmodule.exports = players;","import CSS3DObject from '../js/renderers/CSS3DRenderer.js';\n\nclass renderer {\n    constructor(scene, css_renderer) {\n        this.scene = scene;\n        this.renderer = this.create(css_renderer);\n    }\n\n    create (css_renderer) {\n\n        if(css_renderer) {\n            var renderer = new THREE.CSS3DRenderer();\n\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            renderer.domElement.style.position = 'absolute';\n            renderer.domElement.style.top = 0;\n        } else {\n            var renderer = new THREE.WebGLRenderer({antialias: true});\n\n            //var renderer = new THREE.CSS3DRenderer();\n\n            renderer.setPixelRatio( window.devicePixelRatio );\n\n            //renderer.setClearColor(\"#CCCCCC\");\n            renderer.sortObjects = false;\n            renderer.autoClear = false;\n            renderer.gammaInput = true;\n            renderer.gammaOutput = true;\n            //renderer.setPixelRatio(window.devicePixelRatio);\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            renderer.shadowMapEnabled = true;\n            renderer.shadowMapType = THREE.PCFSoftShadowMap;\n\n            renderer.shadowMapEnabled = true;\n            renderer.shadowMapSoft = true;\n        }\n\n        // renderer.shadowCameraNear = 3;\n        // renderer.shadowCameraFar = 15000;\n        // renderer.shadowCameraFov = 50;\n        //\n        // renderer.shadowMapBias = 0.0039;\n        // renderer.shadowMapDarkness = 0.5;\n        // renderer.shadowMapWidth = 1024;\n        // renderer.shadowMapHeight = 1024;\n\n        return renderer;\n    }\n\n    get () {\n        return this.renderer;\n    }\n}\n\nmodule.exports = renderer;","var mcec = require('../shared/mcec');\nvar players = require('../src/players');\nvar world = require('../src/world');\nvar renderer = require('../src/renderer');\nvar camera = require('../src/camera');\nvar terrain = require('../src/terrain');\nvar models = require('../src/models');\nvar io = require('../src/sockets');\n\nimport '../js/objects/water';\n\nclass scene {\n    constructor(game, bypass_init) {\n        this.game = game;\n\n        //\n        // some of our main shit\n        this.enabled = false;\n        this.skybox_scale = 10000;\n        this.mouse = new THREE.Vector2(0,0);\n        this.clock = new THREE.Clock();\n        this.scene = new THREE.Scene();\n        this.css_scene = new THREE.Scene();\n        this.hitboxes = []; // will hold our picking objects\n\n        // renderers and camera\n        this.renderer = new renderer(this);\n        this.css_renderer = new renderer(this, true);\n        this.camera = new camera(this);\n\n        this.doReset();\n\n\n        if(!bypass_init) {\n            // watch controls\n            mcec.watchControls(this.getRenderer().domElement);\n\n            this.start(() => {\n                game.update();\n            });\n        }\n    }\n\n    add (obj) {\n        return this.scene.add(obj);\n    }\n\n    addSkybox () {\n        var size = this.skybox_scale; //this.world.terrain.sector_size;\n\n        this.getCamera().far = size * 2;\n\n        mcec.log(\"Initializing skybox with size: \" + size);\n\n        var scene = this;\n        var skygroup = new THREE.Group();\n\n        //var skyboxCubemap = new THREE.CubeTextureLoader().load(urls);\n        var texture = new THREE.TextureLoader().load('shared/skybox.jpg');\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        var material = new THREE.MeshLambertMaterial( {\n            color: 0xffffff,\n            specular: 0x050505,\n            shininess: 0,\n            side: THREE.DoubleSide,\n            map: texture,\n            transparent: true,\n            opacity: 1\n        } );\n\n        var geometry = new THREE.SphereBufferGeometry(size, 10, 10);\n        var skybox = new THREE.Mesh(\n            geometry,\n            material\n        );\n\n        skybox.castShadow = false;\n        skybox.receiveShadow = false;\n\n        skybox.name = \"skybox\";\n\n        this.skybox = skygroup;\n\n\n        // experimenting with nightbox\n\n        var texture = new THREE.TextureLoader().load('shared/nightbox.jpg');\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n        var material = new THREE.MeshLambertMaterial( {\n            color: 0xffffff,\n            specular: 0x050505,\n            shininess: 0,\n            side: THREE.DoubleSide,\n            map: texture,\n            //transparent: true,\n            //opacity: 1\n        } );\n        var geometry = new THREE.SphereBufferGeometry((size) + (size * 0.002), 10, 10);\n        var nightbox = new THREE.Mesh(\n            geometry,\n            material\n        );\n        nightbox.castShadow = false;\n        nightbox.receiveShadow = false;\n        this.nightbox = nightbox;\n\n\n        skygroup.add(nightbox);\n        skygroup.add(skybox);\n\n        scene.add(skygroup);\n    }\n\n    get () {\n        return this.scene;\n    }\n\n    getCamera () {\n        return this.camera.get();\n    }\n\n    getContainer () {\n        var container = document.getElementById( 'container' );\n\n        return container;\n    }\n\n    getMyPlayer () {\n        return this.players.getMyPlayer();\n    }\n\n    getRenderer (css_renderer) {\n        if(css_renderer) return this.css_renderer.get();\n        else return this.renderer.get();\n    }\n\n    handleClick(e) {\n        //mcec.log(\"scene click\");\n\n        if(!this.getMyPlayer()) return;\n        this.models.click(e);\n        //e.preventDefault();\n    }\n\n    handleResize () {\n        mcec.log(\"Resizing window\");\n\n        var viewport = mcec.getViewportSize();\n\n        this.getRenderer().setSize(viewport.width, viewport.height);\n        this.getRenderer(true).setSize(viewport.width, viewport.height);\n        this.getCamera().aspect = viewport.width / viewport.height;\n        this.getCamera().updateProjectionMatrix();\n\n        //if(typeof this.gpuPicker !== \"undefined\") this.gpuPicker.resizeTexture( viewport.width, viewport.height );\n    }\n\n    handleMovement  () {\n        var player = this.getMyPlayer();\n\n        var forward = new THREE.Vector3();\n        var sideways = new THREE.Vector3();\n\n        //if (!player.motion.airborne) {\n            // look around with camera using arrows\n            // var multx = 0.05;\n            // var multy = 0.08;\n            // var sx = this.keysPressed[this.watchedKeys.UP] ? multx : (this.keysPressed[this.watchedKeys.DN] ? -multx : 0);\n            // var sy = this.keysPressed[this.watchedKeys.LT] ? multy : (this.keysPressed[this.watchedKeys.RT] ? -multy : 0);\n            //\n            // if (Math.abs(sx) >= Math.abs(player.motion.spinning.x)) player.motion.spinning.x = sx;\n            // if (Math.abs(sy) >= Math.abs(player.motion.spinning.y)) player.motion.spinning.y = sy;\n            //\n            // // move around physically using WSAD\n            // var mult = 0.5;\n            // forward.set(Math.sin(player.motion.rotation.y), 0, Math.cos(player.motion.rotation.y));\n            // sideways.set(forward.z, 0, -forward.x);\n            // forward.multiplyScalar(this.keysPressed[this.watchedKeys.W] ? -mult : (this.keysPressed[this.watchedKeys.S] ? mult : 0));\n            // sideways.multiplyScalar(this.keysPressed[this.watchedKeys.A] ? -mult : (this.keysPressed[this.watchedKeys.D] ? mult : 0));\n            //\n            // var combined = forward.add(sideways);\n            // if (Math.abs(combined.x) >= Math.abs(player.motion.velocity.x)) player.motion.velocity.x = combined.x;\n            // if (Math.abs(combined.y) >= Math.abs(player.motion.velocity.y)) player.motion.velocity.y = combined.y;\n            // if (Math.abs(combined.z) >= Math.abs(player.motion.velocity.z)) player.motion.velocity.z = combined.z;\n            //\n            // //jump\n            // var mult = 0.7;\n            // var vy = this.keysPressed[this.watchedKeys.SP] ? mult : 0;\n            // player.motion.velocity.y += vy;\n        //}\n\n        //console.log(\"COORDS: \" , player.motion.position.x, player.motion.position.y, player.motion.position.z, \" ROTATION: \", player.motion.rotation.x, player.motion.rotation.y);\n    }\n\n    setLighting () {\n        var hemilight = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);\n        //hemilight.color.setHSL(.24, .64, .19 );\n        //hemilight.groundColor.setHSL(0.095, 1, 1);\n        hemilight.position.set(-500, this.skybox_scale / 3, 0);\n        this.hemilight = hemilight;\n        this.add(hemilight);\n\n        // var alight = new THREE.AmbientLight(0x00ffe4, 1);\n        // this.add(alight);\n\n        var dirlight = new THREE.DirectionalLight(0xffffff, 1);\n        dirlight.position.set(0, this.skybox_scale / 3, 0);\n        //dirlight.color.setHSL(.74, .64, .59 );\n        //dirlight.position.set(-1, 1.75, 1);\n        //dirlight.position.multiplyScalar(150);\n        dirlight.castShadow = true;\n        dirlight.shadowMapWidth = 2048;\n        dirlight.shadowMapHeight = 2048;\n\n        var d = 50;\n\n        dirlight.shadowCameraLeft = -d;\n        dirlight.shadowCameraRight = d;\n        dirlight.shadowCameraTop = d;\n        dirlight.shadowCameraBottom = -d;\n\n        dirlight.shadowCameraFar = 3500;\n        dirlight.shadowBias = -0.0001;\n\n        this.dirlight = dirlight;\n        this.add(dirlight);\n    }\n\n    setFog() {\n        // set fog i guess\n        this.fog = new THREE.FogExp2( 0xd3e0e8, 100 );\n    }\n\n    setControls () {\n        // var controls = new THREE.TrackballControls(this.getCamera(), this.getRenderer().domElement);\n        // controls.noPan = true;\n        // controls.rotateSpeed = 8.0;\n        // controls.minDistance = 20;\n        // controls.maxDistance = 400;\n        //\n        // this.controls = controls;\n    }\n\n    setCamera () {\n\n    }\n\n    start (callback) {\n        var scene = this;\n        var start = function() {\n            scene.init(callback);\n        };\n\n        //this.models.add({name: 'click_good', filename: \"shared/mouse_click_good.png\"});\n        //this.models.add({name: 'click_bad', filename: \"shared/mouse_click_bad.png\"});scene.bindEvents();\n\n        // todo: Enhance!\n        // scene.addSkybox();\n\n        scene.init(callback);\n\n    }\n\n    setWater() {\n        // Create the water effect\n        // this.water = new THREE.Water(\n        //     10000,\n        //     10000,\n        //     {\n        //         textureWidth: 512,\n        //         textureHeight: 512,\n        //         waterNormals: new THREE.TextureLoader().load( 'textures/waternormals.jpg', function ( texture ) {\n        //             texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        //         }),\n        //         //alpha: \tparameters.alpha,\n        //         sunDirection: this.dirlight.position.clone().normalize(),\n        //         sunColor: 0xffffff,\n        //         waterColor: 0x001e0f,\n        //         //distortionScale: parameters.distortionScale,\n        //         //fog: scene.fog != undefined\n        //     }\n        // );\n        //\n        // this.water.rotation.x = - Math.PI / 2;\n        // this.water.receiveShadow = true;\n        // this.water.scale.set(1000, 1000, 1000);\n        // //this.water.position.y += 400;\n        // this.add(this.water);\n\n        // this.water = new THREE.Water(\n        //     this.getRenderer(),\n        //     this.getCamera(),\n        //     this.scene,\n        //     {\n        //         textureWidth: 512,\n        //         textureHeight: 512,\n        //         waterNormals: new THREE.TextureLoader().load( 'textures/waternormals.jpg', function ( texture ) {\n        //             texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        //         }),\n        //         alpha: 1,\n        //         sunDirection: this.dirlight.position.clone().normalize(),\n        //         sunColor: 0xffffff,\n        //         waterColor: 0x001e0f,\n        //         //distortionScale: parameters.distortionScale,\n        //         //fog: scene.fog != undefined\n        //     }\n        // );\n        //\n        // this.watermesh = new THREE.Mesh(\n        //     new THREE.PlaneGeometry(10000, 10000, 1, 1),\n        //     this.water.material\n        // );\n        //\n        // //this.watermesh.scale.set(1000, 1000, 1000);\n        // this.watermesh.add(this.water);\n        // this.watermesh.rotation.x = - Math.PI * 0.5;\n        // this.water.position.y -= 330;\n        //\n        // this.water.add(this.watermesh);\n        //\n        // this.add(this.water);\n        this.water_options = {\n            oceanSide: this.skybox_scale * 2,\n            size: 512,\n            distortionScale: 0,\n            alpha: 0.7\n        };\n\n        //this.waterNormals;\n\n        var water = new THREE.Water(\n            this.water_options.oceanSide,\n            this.water_options.oceanSide,\n            {\n                textureWidth: this.water_options.size,\n                textureHeight: this.water_options.size,\n                waterNormals: new THREE.TextureLoader().load( 'textures/water-512.jpg', function ( texture ) {\n                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n                }),\n                alpha: \tthis.water_options.alpha,\n                sunDirection: this.dirlight.position.clone().normalize(),\n                sunColor: 0x00aaac,\n                waterColor: 0x00fffc,\n                distortionScale: this.water_options.distortionScale,\n                fog: this.fog || undefined\n            }\n        );\n\n        water.material.side = THREE.DoubleSide;\n\n        this.water = new THREE.Group();\n        this.water.rotation.x = - Math.PI / 2;\n        this.water.castShadow = false;\n        this.water.receiveShadow = false;\n        this.water.position.y = 0;\n        this.water.name = \"water\";\n\n        this.water.add(water);\n\n        this.add( this.water );\n\n\n        ////////////////////////////////////////\n        ////////////////////////////////////////\n    }\n\n    init (callback) {\n        var scene = this;\n\n        scene.handleResize();\n\n        mcec.log(\"Initializing scene\");\n\n        window.addEventListener('resize', function() { scene.handleResize(); }, false);\n\n        var scene = this;\n        var render = function (timeStamp) {\n\n            //var deltaTime = scene.clock.getDelta();\n            //scene.update(deltaTime);\n\n            // call our game loop with the time elapsed since last rendering, in ms\n            callback();\n\n            var camera = scene.getCamera();\n\n            requestAnimationFrame(render);\n\n            scene.getRenderer(true).render(scene.css_scene, camera);\n            scene.getRenderer().render(scene.get(), camera);\n            //scene.time += deltaTime;\n        };\n\n        this.inject();\n        render();\n    }\n\n    // reset back to login screen\n    doReset() {\n        for(var i in this.scene.children) {\n            this.scene.remove(this.scene.children[i]);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // start adding models\n        this.models = new models(this);\n        this.world = new world(this);\n        this.players = new players(this);\n        this.water = false;\n\n        //this.doReset();\n        this.setLighting();\n        this.setFog();\n        this.setWater();\n\n\n        this.camera.setLoginCamera();\n\n        mcec.log(\"Scene reset\");\n    }\n\n    hide() {\n        if(!this.is_showing) return;\n        this.is_showing = false;\n\n        //this.constructor(this.game);\n    }\n\n    show() {\n        if(this.is_showing) return;\n        this.is_showing = true;\n\n        mcec.log(\"Scene start bitch\");\n\n        this.addSkybox();\n        this.models.startQueue();\n    }\n\n    setBinds() {\n        // io.send('login', {user: user, pass: pass}, (result, user_info, error) => {\n        //     console.log(\"LOGIN\", result, user_info, error);\n        //     this.user_info = user_info;\n        //     this.game.scene.getMyPlayer().loadDefaults(user_info);\n        // });\n\n        io.bind('player_add', (player_info) => {\n            console.log(\"Server says theres a player nearby!\", player_info);\n            var player = this.players.addPlayer(player_info);\n        });\n\n        io.bind('player_walk', (info) => {\n\n            var player_id = info.player_id;\n            var walk_to = info.position;\n\n            console.log(\"WALK_TO\", walk_to);\n\n            var player = this.players.getPlayer(player_id);\n\n            if(!player) {\n                mcec.log(\"Cannot find player #\" + player_id);\n                return;\n            }\n\n            console.log(\"PLAYER WALK\", player_id, player);\n\n            if(player.model.position.x !== walk_to.x || player.model.position.y !== walk_to.y) {\n                player.walkTo(walk_to.x, walk_to.z);\n            } else {\n                console.log(\"Player doesnt need to move!\", walk_to, player.model.position);\n            }\n        });\n\n        io.bind('player_remove', (player_id) => {\n            mcec.log(\"Server says to remove player \" + player_id);\n            var player = this.players.removePlayer(player_id);\n        });\n    }\n\n    inject () {\n        // run after start() was called, and everything has loaded\n\n        mcec.log(\"Injecting renderer into DOM element\");\n\n        this.getContainer().appendChild(this.getRenderer().domElement);\n        //this.getContainer().appendChild(this.getRenderer(true).domElement);\n\n        var elem = $(this.getRenderer().domElement);\n        elem.attr('id', 'game');\n\n        mcec.bindClick(true, (e) => {\n            this.handleClick(e);\n        });\n\n        return true;\n    }\n\n    update (delta) {\n        this.models.update(delta);\n        this.camera.update(delta);\n\n        if(this.game.state <= 0) {\n            this.camera.setLoginCamera();\n            this.hide();\n        } else {\n            this.models.startQueue();\n            this.show();\n        }\n\n        if(this.getMyPlayer() !== false) {\n            if (this.getMyPlayer().isMeshLoaded()) {\n                if (typeof this.skybox !== \"undefined\") {\n                    // move the skybox around our player\n                    this.skybox.position.x = this.getMyPlayer().model.position.x;\n                    this.skybox.position.z = this.getMyPlayer().model.position.z;\n                }\n\n                if (typeof this.water !== \"undefined\" && typeof this.water.position !== \"undefined\") {\n                    // .. and the water?\n                    this.water.position.x = this.getMyPlayer().model.position.x;\n                    this.water.position.z = this.getMyPlayer().model.position.z;\n                }\n            }\n        }\n\n        if(typeof this.water !== \"undefined\") {\n            if(typeof this.water.children !== \"undefined\")\n            this.water.children[0].material.uniforms.time.value += 0.4 / 60.0;\n        }\n    }\n}\n\nmodule.exports = scene;","class shaders {\n    constructor(scene) {\n        this.scene = scene;\n        this.shaders = [];\n        this.materials = [];\n\n        // only one in use right now\n        this.shaders.terrain = {\n            uniforms : {},\n            fog: scene.fog,\n            vertexShader:\n                \"        uniform sampler2D bumpTexture;\\n\" +\n                \"        uniform float bumpScale;\\n\" +\n                \"\\n\" +\n                \"        varying float vAmount;\\n\" +\n                \"        varying vec2 vUV;\\n\" +\n                \"\\n\" +\n                \"        void main()\\n\" +\n                \"        {\\n\" +\n                \"            vUV = uv;\\n\" +\n                \"            vec4 bumpData = texture2D( bumpTexture, uv );\\n\" +\n                \"\\n\" +\n                \"            vAmount = bumpData.r; // assuming map is grayscale it doesn't matter if you use r, g, or b.\\n\" +\n                \"\\n\" +\n                \"            // move the position along the normal\\n\" +\n                \"            vec3 newPosition = position + normal * bumpScale * vAmount;\\n\" +\n                \"\\n\" +\n                \"            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\" +\n                \"        }\",\n            fragmentShader:\n                \"        uniform sampler2D oceanTexture;\\n\" +\n                \"        uniform sampler2D snowyTexture;\\n\" +\n                \"        uniform sampler2D sandyTexture;\\n\" +\n                \"        uniform sampler2D grassTexture;\\n\" +\n                \"        uniform sampler2D rockyTexture;\\n\" +\n                \"\\n\" +\n                \"        varying vec2 vUV;\\n\" +\n                \"\\n\" +\n                \"        varying float vAmount;\\n\" +\n                \"\\n\" +\n                \"        void main()\\n\" +\n                \"        {\\n\" +\n                \"            // its like .. bottom point - top point .. and the range in between is the fade\\n\" +\n                \"            vec4 snowy = (smoothstep(0.60, 0.6205, vAmount) - smoothstep(1.10, 1.20, vAmount)) * texture2D( snowyTexture, vUV * 100.0 );\\n\" +\n                \"            vec4 rocky = (smoothstep(0.39, 0.47, vAmount) - smoothstep(0.5985, 0.6195, vAmount)) * texture2D( rockyTexture, vUV * 80.0 );\\n\" +\n                \"            vec4 grass = (smoothstep(0.27, 0.38, vAmount) - smoothstep(0.44, 0.45, vAmount)) * texture2D( grassTexture, vUV * 90.0 );\\n\" +\n                \"            vec4 sand = (smoothstep(0.05, 0.25, vAmount) - smoothstep(0.28, 0.36, vAmount)) * texture2D( sandyTexture, vUV * 280.0 );\\n\" +\n                \"            vec4 water = (smoothstep(-0.30, -0.25, vAmount) - smoothstep(0.0, 0.35, vAmount)) * texture2D( oceanTexture, vUV * 100.0 );\\n\" +\n                \"\\n\" +\n                \"            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0) + water + sand + grass + rocky + snowy;\\n\" +\n                \"        }\",\n        };\n\n        this.shaders.TerrainNormal = {\n\n            uniforms: {\n                'heightMap': {type: 't', value: null},\n                'resolution': {type: 'v2', value: new THREE.Vector2(128, 128)},\n                'scale': {type: 'v2', value: new THREE.Vector2(0, 0)},\n                'height': {type: 'f', value: 0.05}\n            },\n\n            vs: [\n\n                'varying vec2 vUv;',\n\n                'void main() {',\n\n                'vUv = uv;',\n                'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n                '}'\n\n            ].join('\\n'),\n\n            fs: [\n\n                'uniform float height;',\n                'uniform vec2 resolution;',\n                'uniform sampler2D heightMap;',\n\n                'varying vec2 vUv;',\n\n                'void main() {',\n\n                'float val = texture2D( heightMap, vUv ).x;',\n\n                'float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;',\n                'float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;',\n\n                'gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );',\n\n                '}'\n\n            ].join('\\n')\n\n        };\n\n\n        this.shaders.TerrainNoise = {\n\n            uniforms: {\n                time: {type: 'f', value: 1.0},\n                scale: {type: 'v2', value: new THREE.Vector2(1.5, 1.5)},\n                offset: {type: 'v2', value: new THREE.Vector2(0, 0)},\n            },\n            fs: [\n\n                'uniform float time;',\n                'varying vec2 vUv;',\n\n                'vec4 permute( vec4 x ) {',\n\n                'return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );',\n\n                '}',\n\n                'vec4 taylorInvSqrt( vec4 r ) {',\n\n                'return 1.79284291400159 - 0.85373472095314 * r;',\n\n                '}',\n\n                'float snoise( vec3 v ) {',\n\n                'const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );',\n                'const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );',\n\n                '// First corner',\n\n                'vec3 i  = floor( v + dot( v, C.yyy ) );',\n                'vec3 x0 = v - i + dot( i, C.xxx );',\n\n                '// Other corners',\n\n                'vec3 g = step( x0.yzx, x0.xyz );',\n                'vec3 l = 1.0 - g;',\n                'vec3 i1 = min( g.xyz, l.zxy );',\n                'vec3 i2 = max( g.xyz, l.zxy );',\n\n                'vec3 x1 = x0 - i1 + 1.0 * C.xxx;',\n                'vec3 x2 = x0 - i2 + 2.0 * C.xxx;',\n                'vec3 x3 = x0 - 1. + 3.0 * C.xxx;',\n\n                '// Permutations',\n\n                'i = mod( i, 289.0 );',\n                'vec4 p = permute( permute( permute(',\n                ' i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )',\n                '+ i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )',\n                '+ i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );',\n\n                '// Gradients',\n                '// ( N*N points uniformly over a square, mapped onto an octahedron.)',\n\n                'float n_ = 1.0 / 7.0; // N=7',\n\n                'vec3 ns = n_ * D.wyz - D.xzx;',\n\n                'vec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)',\n\n                'vec4 x_ = floor( j * ns.z );',\n                'vec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)',\n\n                'vec4 x = x_ *ns.x + ns.yyyy;',\n                'vec4 y = y_ *ns.x + ns.yyyy;',\n                'vec4 h = 1.0 - abs( x ) - abs( y );',\n\n                'vec4 b0 = vec4( x.xy, y.xy );',\n                'vec4 b1 = vec4( x.zw, y.zw );',\n\n\n                'vec4 s0 = floor( b0 ) * 2.0 + 1.0;',\n                'vec4 s1 = floor( b1 ) * 2.0 + 1.0;',\n                'vec4 sh = -step( h, vec4( 0.0 ) );',\n\n                'vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;',\n                'vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;',\n\n                'vec3 p0 = vec3( a0.xy, h.x );',\n                'vec3 p1 = vec3( a0.zw, h.y );',\n                'vec3 p2 = vec3( a1.xy, h.z );',\n                'vec3 p3 = vec3( a1.zw, h.w );',\n\n                '// Normalise gradients',\n\n                'vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );',\n                'p0 *= norm.x;',\n                'p1 *= norm.y;',\n                'p2 *= norm.z;',\n                'p3 *= norm.w;',\n\n                '// Mix final noise value',\n\n                'vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );',\n                'm = m * m;',\n                'return 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 ), dot( p3, x3 ) ) );',\n\n                '}',\n\n                'float surface3( vec3 coord ) {',\n\n                'float n = 0.0;',\n\n                'n += 1.0 * abs( snoise( coord ) );',\n                'n += 0.5 * abs( snoise( coord * 2.0 ) );',\n                'n += 0.25 * abs( snoise( coord * 4.0 ) );',\n                'n += 0.125 * abs( snoise( coord * 8.0 ) );',\n\n                'return n;',\n\n                '}',\n\n                'void main( void ) {',\n\n                'vec3 coord = vec3( vUv, -time );',\n                'float n = surface3( coord );',\n\n                'gl_FragColor = vec4( vec3( n, n, n ), 1.0 );',\n\n                '}'\n\n            ].join('\\n'),\n\n            vs: [\n\n                'varying vec2 vUv;',\n                'uniform vec2 scale;',\n                'uniform vec2 offset;',\n\n                'void main( void ) {',\n\n                'vUv = uv * scale + offset;',\n                'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n                '}',\n\n            ].join('\\n')\n        };\n\n        this.shaders.TerrainLuminosity = {\n\n            uniforms: {\n                'tDiffuse': {type: 't', value: null}\n            },\n\n            vs: [\n                'varying vec2 vUv;',\n                'void main() {',\n                'vUv = uv;',\n                'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fs: [\n                'uniform sampler2D tDiffuse;',\n                'varying vec2 vUv;',\n                'void main() {',\n                'vec4 texel = texture2D( tDiffuse, vUv );',\n                'vec3 luma = vec3( 0.299, 0.587, 0.114 );',\n                'float v = dot( texel.xyz, luma );',\n                'gl_FragColor = vec4( v, v, v, texel.w );',\n                '}'\n            ].join('\\n')\n        };\n\n\n        this.shaders.TerrainShader2 = {\n            uniforms: {\n                env: {type: 't', value: null},\n                enableReflection: {type: 'i', value: 0},\n                useRefract: {type: 'i', value: 0},\n                reflectivity: {type: 'f', value: 1.0},\n                refractionRatio: {type: 'f', value: 0.98},\n                combine: {type: 'i', value: 0},\n                fogcolor: {type: 'c', value: new THREE.Color(0x25292e)},\n\n                'oceanTexture': {type: 't', value: null},\n                'sandyTexture': {type: 't', value: null},\n                'grassTexture': {type: 't', value: null},\n                'rockyTexture': {type: 't', value: null},\n                'snowyTexture': {type: 't', value: null},\n\n                'enableDiffuse1': {type: 'i', value: 0},\n                'enableDiffuse2': {type: 'i', value: 0},\n                'enableSpecular': {type: 'i', value: 1},\n                'enableFog': {type: 'i', value: 1},\n\n                'tDiffuse1': {type: 't', value: null},\n                'tDiffuse2': {type: 't', value: null},\n                'tDetail': {type: 't', value: null},\n                'tNormal': {type: 't', value: null},\n                'tSpecular': {type: 't', value: null},\n                'tDisplacement': {type: 't', value: null},\n\n                'uNormalScale': {type: 'f', value: 1.0},\n\n                'uDisplacementBias': {type: 'f', value: 0.0},\n                'uDisplacementScale': {type: 'f', value: 1.0},\n\n                'diffuse': {type: 'c', value: new THREE.Color(0xeeeeee)},\n                'specular': {type: 'c', value: new THREE.Color(0xFF1111)},\n                'ambient': {type: 'c', value: new THREE.Color(0x050505)},\n                'shininess': {type: 'f', value: 30},\n                'opacity': {type: 'f', value: 1},\n\n                'vAmount': {type: 'f', value: 30},\n\n                'uRepeatBase': {type: 'v2', value: new THREE.Vector2(1, 1)},\n                'uRepeatOverlay': {type: 'v2', value: new THREE.Vector2(1, 1)},\n\n                'uOffset': {type: 'v2', value: new THREE.Vector2(0, 0)}\n            },\n\n            //] ),\n\n            fs: [\n                //'precision highp float;',\n                'uniform sampler2D env;',\n                'uniform sampler2D oceanTexture;',\n                'uniform sampler2D sandyTexture;',\n                'uniform sampler2D grassTexture;',\n                'uniform sampler2D rockyTexture;',\n                'uniform sampler2D snowyTexture;',\n\n                'uniform bool useRefract;',\n                'uniform float refractionRatio;',\n                'uniform float reflectivity;',\n                'uniform bool enableReflection;',\n                'uniform bool enableFog;',\n\n                'varying float vAmount;',\n\n                'uniform vec3 fogcolor;',\n                'uniform vec3 ambient;',\n                'uniform vec3 diffuse;',\n                'uniform vec3 specular;',\n                'uniform float shininess;',\n                'uniform float opacity;',\n\n                'uniform bool enableDiffuse1;',\n                'uniform bool enableDiffuse2;',\n                'uniform bool enableSpecular;',\n\n                'uniform sampler2D tDiffuse1;',\n                'uniform sampler2D tDiffuse2;',\n                'uniform sampler2D tDetail;',\n                'uniform sampler2D tNormal;',\n                'uniform sampler2D tSpecular;',\n                'uniform sampler2D tDisplacement;',\n\n                'uniform float uNormalScale;',\n\n                'uniform vec2 uRepeatOverlay;',\n                'uniform vec2 uRepeatBase;',\n\n                'uniform vec2 uOffset;',\n\n                'varying vec3 vTangent;',\n                'varying vec3 vBinormal;',\n                'varying vec3 vNormal;',\n                'varying vec2 vUv;',\n                'varying vec2 vN;',\n\n\n                'varying vec3 vViewPosition;',\n                'varying vec3 vWorldPosition;',\n\n                //THREE.ShaderChunk[ 'shadowmap_pars_fragment' ],\n                //THREE.ShaderChunk[ 'envmap_pars_fragment' ],\n                //THREE.ShaderChunk[ 'fog_pars_fragment' ],\n\n\n                'void main() {',\n\n                'vec2 uvOverlay = uRepeatOverlay * vUv + uOffset;',\n                'vec2 uvBase = uRepeatBase * vUv;',\n\n                'vec4 water = (smoothstep(0.01, 0.20, vAmount) - smoothstep(0.24, 0.26, vAmount)) * texture2D( oceanTexture, uvOverlay );',\n                'vec4 sandy = (smoothstep(0.10, 0.30, vAmount) - smoothstep(0.28, 0.31, vAmount)) * texture2D( sandyTexture, uvOverlay );',\n                'vec4 grass = (smoothstep(0.28, 0.40, vAmount) - smoothstep(0.35, 0.40, vAmount)) * texture2D( grassTexture, uvOverlay );',\n                'vec4 rocky = (smoothstep(0.30, 0.76, vAmount) - smoothstep(0.40, 0.70, vAmount)) * texture2D( rockyTexture, uvOverlay );',\n                'vec4 snowy = (smoothstep(0.80, 0.99, vAmount))                                   * texture2D( snowyTexture, uvOverlay );',\n\n                'gl_FragColor = vec4( vec3( 1.0 ), opacity );',\n\n                'vec3 specularTex = vec3( 1.0 );',\n\n\n                'vec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;',\n                'normalTex.xy *= uNormalScale;',\n                'normalTex = normalize( normalTex );',\n\n\n                'if( enableDiffuse1 && enableDiffuse2 ) {',\n\n                'vec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );',\n                'vec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );',\n\n                /*'#ifdef GAMMA_INPUT',\n                    'colDiffuse1.xyz *= colDiffuse1.xyz;',\n                    'colDiffuse2.xyz *= colDiffuse2.xyz;',\n                '#endif',*/\n\n                'gl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );',\n                //'gl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) )+ water + sandy + grass + rocky + snowy;',\n                'gl_FragColor = vec4( gl_FragColor.xyz, 1.0 )+ water + sandy + grass + rocky + snowy;',\n                //'fullTexture = vec4( gl_FragColor.xyz, 1.0 )+ water + sandy + grass + rocky + snowy;',\n                //'gl_FragColor.xyz = mix( gl_FragColor.xyz, fullTexture, 1.0 );',\n\n\n                ' } else if( enableDiffuse1 ) {',\n\n                'gl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );',\n                //'gl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay ) + water + sandy + grass + rocky + snowy;',\n                //'gl_FragColor = gl_FragColor * mix ( tDiffuse1, water + sandy + grass + rocky + snowy, 1.0 - texture2D( tDisplacement, uvBase ) );',\n\n                '} else if( enableDiffuse2 ) {',\n\n                'gl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );',\n\n                '}',\n\n                'if( enableSpecular )',\n                'specularTex = texture2D( tSpecular, uvOverlay ).xyz;',\n\n                'mat3 tsb = mat3( vTangent, vBinormal, vNormal );',\n                'vec3 finalNormal = tsb * normalTex;',\n\n                'vec3 normal = normalize( finalNormal );',\n                'vec3 viewPosition = normalize( vViewPosition );',\n\n\n                'if ( enableReflection ) {',\n                // environment\n                'vec3 ev = texture2D( env, vN ).rgb;',\n                //'gl_FragColor.xyz *= ev;',\n                'gl_FragColor.xyz = mix( gl_FragColor.xyz, ev.xyz, reflectivity );',\n                '}',\n\n                // fog\n                'if(enableFog){',\n                'float circle_radius_min = 0.3;',\n                'float circle_radius_max = 0.5;',\n                'float fogDensity = 0.4;',\n                'float fog_far = 30.4;',\n                'vec2 nuv = vUv - vec2(0.5, 0.5);',\n                'float dist =  sqrt(dot(nuv, nuv));',\n                //'vec3 fog_color = vec3(1.0/37., 1.0/41., 1.0/46.);',\n                'float fog = 0.0;',\n                'if ( dist > circle_radius_min )',\n                'fog =(dist-circle_radius_min)*5.0;',\n\n                //'float fog = fogDensity * (gl_FragCoord.z / gl_FragCoord.w) / fog_far;',\n                //'float fog = fogDensity * (vUv.x / vUv.y) / fog_far;',\n                //'fog -= .2;',\n                //'vec3 col = mix( fogcolor, gl_FragColor.xyz , clamp(1. - fog, 0., 1.));',\n                //'gl_FragColor = vec4(col, 1.);',\n                'gl_FragColor = vec4(gl_FragColor.xyz, 1.-fog);',\n                '}',\n\n                '}'\n\n            ].join('\\n'),\n\n            vs: [\n                //'precision highp float;',\n                'attribute vec4 tangent;',\n\n                'uniform vec2 uRepeatBase;',\n\n                'uniform sampler2D tNormal;',\n\n                'uniform sampler2D tDisplacement;',\n                'uniform float uDisplacementScale;',\n                'uniform float uDisplacementBias;',\n\n                'varying vec3 vTangent;',\n                'varying vec3 vBinormal;',\n                'varying vec3 vNormal;',\n                'varying vec2 vUv;',\n\n                'varying vec3 vViewPosition;',\n                'varying vec3 vWorldPosition;',\n                'varying float vAmount;',\n                // spherical test\n                'varying vec2 vN;',\n                'varying vec3 vPos;',\n\n                'void main() {',\n\n                'vNormal = normalize( normalMatrix * normal );',\n\n                // tangent and binormal vectors\n\n                'vTangent = normalize( normalMatrix * tangent.xyz );',\n\n                'vBinormal = cross( vNormal, vTangent ) * tangent.w;',\n                'vBinormal = normalize( vBinormal );',\n\n                // texture coordinates\n\n                'vUv = uv;',\n\n                'vec4 bumpData = texture2D( tDisplacement, uv );',\n                'vAmount = bumpData.r;',\n\n                'vec2 uvBase = uv * uRepeatBase;',\n\n                // displacement mapping\n\n                'vec3 dv = texture2D( tDisplacement, uvBase ).xyz;',\n                'float df = uDisplacementScale * dv.x + uDisplacementBias;',\n                'vec3 displacedPosition = normal * df + position;',\n\n                'vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );',\n                'vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );',\n\n\n                'gl_Position = projectionMatrix * mvPosition;',\n\n                'vWorldPosition = worldPosition.xyz;',\n                'vViewPosition = -mvPosition.xyz;',\n\n                'vec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;',\n                'vNormal = normalMatrix * normalTex;',\n\n                // spherical\n                'vPos = normalize( vec3( mvPosition ) );',\n                //'vNormal = normalize( normalMatrix * normal );',\n                'vec3 r = reflect( vPos, normalize(vNormal) );',\n                'float m = 2. * sqrt( pow( r.x, 2. ) + pow( r.y, 2. ) + pow( r.z + 1., 2. ) );',\n                'vN = r.xy / m + .5;',\n                '}'\n\n            ].join('\\n')\n\n        }\n    }\n\n    getShaders() {\n        return this.shaders;\n    }\n\n    getShader(name) {\n        return this.shaders[ name ];\n    }\n\n    addShader(name, shader) {\n        this.shaders[ name ] = shader;\n    }\n\n    getShaderMaterial(name) {\n        if (typeof this.materials[ name ] == \"undefined\") {\n            this.materials[ name ] = new THREE.ShaderMaterial(this.getShader(name));\n        }\n\n        return this.materials[ name ];\n    }\n\n    setUniforms(name, uniforms) {\n\n        if(typeof this.shaders[ name ] == \"undefined\") return false;\n\n        this.shaders[ name ]['uniforms'] = uniforms;\n\n        return true;\n\n    }\n\n}\n\nmodule.exports = shaders;","var mcec = require('../shared/mcec');\nimport io from \"socket.io-client\";\n\nclass sockets {\n    constructor() {\n        this.server_ip = mcec.config('server_ip');\n        this.server_port = mcec.config('server_port');\n\n        this.callbacks = [];\n    }\n\n    // unused events: flush, drain, upgradeError, upgrade\n    connect() {\n        this.socket = io(this.server_ip + \":\" + this.server_port);\n\n        mcec.log(\"Initializing socket\");\n\n        // this.socket.on('connect',       (data) => { this.fire('connect',    data); });\n        // this.socket.on('event',         (data) => { this.fire('event',      data); });\n        // this.socket.on('error',         (data) => { this.fire('error',      data); });\n        // this.socket.on('disconnect',    (data) => { this.fire('disconnect', data); });\n        // this.socket.on('ping',          (data) => { this.fire('ping',       data); });\n        // this.socket.on('pong',          (data) => { this.fire('pong',       data); });\n\n        this.bind('connect');\n        this.bind('event');\n        this.bind('error');\n        this.bind('disconnect');\n        this.bind('ping');\n        this.bind('pong');\n    }\n\n    fire(event, data) {\n        mcec.log(\"[IO] Firing event: \" + event);\n\n        if(typeof this.callbacks[ event ] == \"undefined\") return;\n\n        for(var i = 0; i < this.callbacks[ event ].length; i++) {\n            var callback = this.callbacks[ event ][ i ];\n\n            callback(data);\n        }\n\n    }\n\n    bind(event, callback) {\n        mcec.log(\"[IO] Binding event \" + event);\n\n        if(typeof this.callbacks[ event ] == \"undefined\") {\n            this.callbacks[ event ] = [];\n\n            this.socket.on(event, (data) => {\n                this.fire(event, data);\n            });\n        }\n\n        if(callback) this.callbacks[ event ].push(callback);\n    }\n\n    send(event, data, callback) {\n        mcec.log(\"[IO] Sending event (\" + event + \") = \" + data);\n\n        this.socket.emit(event, data, callback);\n    }\n}\n\nmodule.exports = new sockets();","import terrain_tile from \"../src/terrain_tile\"\n\nexport default class terrain {\n    constructor(scene, world) {\n        this.scene = scene;\n        this.world = world;\n\n        //\n        // WARNING\n        // WARNING\n        // WARNING\n        //\n        // Changing any of these settings may have serious effects in\n        // unexpected areas of the game. If there are any static positions set\n        // that don't use the grid system, they will be off if sector size is\n        // modified, etc.\n        //\n        // Dont fuck around bra\n        //\n\n        // note: this class uses a lot of x,y shit but THREE uses x,z\n        // so just keep that in mind we aren't really referring to y in here, but z .. but fuck that shit\n\n        // this group will hold all sectors, assembled, as our terrain\n        this.group = new THREE.Group();\n\n        // sector storage\n        this.sectors = [];\n\n        // how many sectors do we have on the X and Y axis\n        // ex: x:5, y:2 would mean we have 10 sectors, 2 rows of 5\n        this.sectors_x = 0;\n        this.sectors_y = 0;\n\n        // we want an infinite map.. so at what coord do we loop back to zero?\n        // this number should be the tile BEFORE THE OUT OF BOUNDS tile\n        // this is basically tile count\n        // todo: obviously retrieve from server on init\n        this.sector_max_x = 14; // 14 = 15 since zero counts bra\n        this.sector_max_y = 14;\n\n        // sectors are square, no need for W x H\n        this.sector_size = 10000; // basically Width and Height and below is max depth, varied by the bump map\n        this.max_height = this.sector_size / 3; //  max depth interpreted by the height map\n        this.data_size = [100, 100]; // the size of each sector square on the heightmap, also vertices per mesh is data_size[0]-1 squared\n\n        // size of our square\n        this.square_x = (this.sector_size / (this.data_size[0]-1));\n        this.square_y = (this.sector_size / (this.data_size[1]-1));\n\n        // max depth and height of each sector\n        this.sector_alt = [this.max_height * -.25, this.max_height * .75]; // 75% of the depth will be above water // 25% will be below water\n\n        ////////////\n\n        this.terrain_ready = false;\n        this.sectors_needed = [];\n    }\n\n    // convert any coordinate to an infinite world one\n    // ex: you have 5 tiles, -1 becomes #5 again\n    // note: this function counts zero as a tile! ex: 0,1,2 .. max: 3 .. -1 becomes 2\n    infiniteCoord(coord, max) {\n        max = max + 1;\n\n        while(coord < 0 || coord >= max) {\n            coord = 0 + (coord % max);\n\n            if (coord < 0) {\n                coord = -(coord);\n                coord = max - coord;\n            }\n        }\n\n        return coord;\n    }\n\n    // convert any grid/sector coord (like -2/5) to a looparound infite one (max-2/5)\n    safeSectors(sector_x, sector_y) {\n        // INFINITE WORLD MOTHERFUCKER\n        // yeah, hi, and it only took this many lines..\n\n        var x = this.infiniteCoord(sector_x, this.sector_max_x);\n        var y = this.infiniteCoord(sector_y, this.sector_max_y);\n\n        return {x: x, y: y};\n    }\n\n    safeX(sector_x) {\n        var sector_x = this.infiniteCoord(sector_x, this.sector_max_x);\n\n        return sector_x;\n    }\n\n    safeY(sector_y) {\n        var sector_y = this.infiniteCoord(sector_y, this.sector_max_y);\n\n        return sector_y;\n    }\n\n    // find a sector [x, y] based on a vector position\n    getSectorFromCoords(x, z, safe) {\n        // the skybox is currently set to be one tile size\n        var tile_size = this.sector_size;\n\n        // which sector is the player on\n        var sector_x = (x / tile_size);\n        var sector_y = (z / tile_size);\n\n        // % to next sector\n        var sector_x_loc = (((x % tile_size) / sector_x) / 100).toFixed(2); // % to next sector (decimal)\n        var sector_y_loc = (((z % tile_size) / sector_y) / 100).toFixed(2); // % to next sector (decimal)\n\n        // floor it\n        sector_x = Math.floor(sector_x);\n        sector_y = Math.floor(sector_y);\n\n        if(safe) {\n            sector_x = this.safeX(sector_x);\n            sector_y = this.safeY(sector_y);\n        }\n\n        return {x: sector_x, y: sector_y};\n    }\n\n    // find a sector [x, y] based on a vector position\n    getSectorFromPosition(x, z) {\n        var sec = this.getSectorIDFromPosition(x, z);\n        var sector = this.getSector(sec.x, sec.y);\n\n        return sector;\n    }\n\n    // find a sector [x, y] based on a vector position\n    getSectorIDFromPosition(x, z, safe) {\n        // the skybox is currently set to be one tile size\n        var tile_size = this.sector_size;\n\n        // which sector is the player on\n        var sector_x = (x / tile_size);\n        var sector_y = (z / tile_size);\n\n        // % to next sector\n        var sector_x_loc = (((x % tile_size) / sector_x) / 100).toFixed(2); // % to next sector (decimal)\n        var sector_y_loc = (((z % tile_size) / sector_y) / 100).toFixed(2); // % to next sector (decimal)\n\n        // floor it\n        sector_x = Math.floor(sector_x);\n        sector_y = Math.floor(sector_y);\n\n        if(safe) {\n            sector_x = this.safeX(sector_x);\n            sector_y = this.safeY(sector_y);\n        }\n\n        return {x: sector_x, y: sector_y};\n    }\n\n    // find a vector2 coord of the top left (0,0) of the tile\n    getSectorCoords(sector_x, sector_y) {\n\n    }\n\n    getSector(sector_x, sector_y, spoofing_x, spoofing_y, dont_create) {\n\n        var x = sector_x;\n        var y = sector_y;\n\n        var safe_x = this.safeX(x);\n        var safe_y = this.safeY(y);\n\n        // detect if we are beyond the grid limits\n        if(x !== safe_x || y !== safe_y) {\n            // get the real sector we need, spoof as this one\n            return this.getSector(safe_x, safe_y, sector_x, sector_y, dont_create);\n        }\n\n        var sector = this.getSectorListItem(x, y, spoofing_x, spoofing_y, dont_create);\n\n        return sector;\n    }\n\n    old_getSector(sector_x, sector_y, spoofing) {\n\n        var x = sector_x;\n        var y = sector_y;\n\n\n        var info = {\n            x: sector_x,\n            y: sector_y\n        }\n\n        if(spoofing) {\n            x = spoofing.x;\n            y = spoofing.y;\n\n            info.spoofing_x = x;\n            info.spoofing_y = y;\n        }\n\n        if(sector_x < 0 || sector_x > this.sector_max_x || sector_y < 0 || sector_y > this.sector_max_y) {\n            return this.getSafeSector(sector_x, sector_y, spoofing);\n        }\n\n        var sector = this.getSectorListItem(x, y, info);\n\n        return sector;\n    }\n\n    getSafeSector(sector_x, sector_y, spoofing) {\n        sector_x = this.safeX(sector_x);\n        sector_y = this.safeY(sector_y);\n\n        return this.getSector(sector_x, sector_y, spoofing);\n    }\n\n    getSectorListItem(x, y, spoofing_x, spoofing_y, dont_create) {\n\n        // detect if we are beyond the grid limits\n        if(x < 0 || x > this.sector_max_x || y < 0 || y > this.sector_max_y) {\n            mcec.log(\"ERROR: \" + x + \", \" + y + \" - sector doesn't exist! Should be called through getSector() first\");\n            return false;\n        }\n\n        for(var i=0; i<this.sectors.length; i++) {\n            var sector = this.sectors[i];\n\n            if(sector.x == x && sector.y == y) {\n                return sector;\n            }\n        }\n\n        if(dont_create) return false;\n\n        var sector = new terrain_tile(this.scene, x, y, spoofing_x, spoofing_y);\n        this.sectors.push(sector);\n\n        return sector;\n    }\n\n    getSector_old(sector_x, sector_y, spoofing) {\n        // create row if it doesnt exist\n        if(typeof this.sectors[ sector_y ] == \"undefined\") {\n            this.sectors[ sector_y ] = [];\n        }\n\n        // create col if it doesnt exist, and load tile into it\n        if(typeof this.sectors[ sector_y ][ sector_x ] == \"undefined\") {\n            this.terrain_ready = false;\n            this.sectors[ sector_y ][ sector_x ] = new terrain_tile(this.scene, sector_x, sector_y, spoofing);\n        } else {\n            // check if sector has been loaded before, but the mesh was removed due to player movement\n            if(this.sectors[ sector_y ][ sector_x ].needs_refresh) {\n                this.sectors[ sector_y ][ sector_x ].load();\n            }\n        }\n\n        var sector = this.sectors[ sector_y ][ sector_x ];\n        return sector;\n    }\n\n    // load necessary terrain tiles, based on location\n    // add to group, return group with callback\n    load(callback) {\n        // send back the group\n        callback(this.group);\n    }\n    \n    getCurrentGridCoords() {\n        var player = this.scene.getMyPlayer();\n        var x = player.position.x;\n        var z = player.position.z;\n        \n        return this.getGridCoordsAt(player.position.x, player.position.z);\n    }\n\n    // which sectors does active player need?\n    sectorsForPlayer() {\n        var player = this.scene.getMyPlayer();\n        var x = player.position.x;\n        var z = player.position.z;\n\n        var sectors_needed = this.determineSectorsNeeded(x, z);\n\n        return sectors_needed;\n    }\n\n    // which sector is active player on?\n    getCurrentSector() {\n        var player = this.scene.getMyPlayer();\n        var x = player.position.x;\n        var z = player.position.z;\n\n        var coords = this.getSectorFromCoords(x, z, true);\n        var sector = this.getSector(coords.x, coords.y);\n\n        return sector;\n    }\n\n    // returns grid location (like from 200x200 for example) from actual world position\n    // note: doesnt return which sector this lands on though\n    getGridCoordsAt(x, z) {\n        // normalize position\n        x = x % this.sector_size;\n        z = z % this.sector_size;\n\n        // 0-1 value, a percentage, of where the grid was clicked projected onto the image\n        var x_mult = x / this.sector_size;\n        var y_mult = z / this.sector_size;\n\n        // calculate xy coords on the image, and round because theres no 1.5 pixel wide anything\n        var _x = Math.floor((this.data_size[0]-1) * x_mult);\n        var _y = Math.floor((this.data_size[1]-1) * y_mult);\n\n        // invert negative numbers because its coming from the other direction\n        if(_x < 0) {\n            _x += this.data_size[0];\n        }\n        if(_y < 0) {\n            _y += this.data_size[1];\n        }\n        return {x: _x, y: _y};\n    }\n\n    // returns grid location (like from 200x200 for example) from actual world position\n    // note: doesnt return which sector this lands on though\n    // note: precision = this may return, say, 5.5x6.7 for 5x6 to indicate where on the grid this location lands!\n    getPrecisionGridCoordsAt(x, z) {\n        // normalize position\n        x = x % this.sector_size;\n        z = z % this.sector_size;\n\n        // 0-1 value, a percentage, of where the grid was clicked projected onto the image\n        var x_mult = x / this.sector_size;\n        var y_mult = z / this.sector_size;\n\n        // calculate xy coords on the image, and round because theres no 1.5 pixel wide anything\n        var _x = ((this.data_size[0]-1) * x_mult);\n        var _y = ((this.data_size[1]-1) * y_mult);\n\n        // invert negative numbers because its coming from the other direction\n        if(_x < 0) {\n            _x += this.data_size[0];\n        }\n        if(_y < 0) {\n            _y += this.data_size[1];\n        }\n        return {x: _x, y: _y};\n    }\n\n    // example: 150 x 150 turns into 1500x1500 on a 200x200 grid thats 2000x2000 size\n    getRelativePositionFromGridCoords2(x, y) {\n\n        return this.getGridCoordsAt(x, y);\n        // // var _x = x % this.sector_size;\n        // // var _z = y % this.sector_size;\n        //\n        // var _x = x / this.data_size[0];\n        // var _z = y / this.data_size[0];\n        //\n        // _x = _x * this.sector_size;\n        // _z = _z * this.sector_size;\n        //\n        // return {x: _x, z: _z};\n    }\n\n    // will return real world position (realtive to that sector) from grid coords\n    getRelativePositionFromGridCoords(x, y) {\n        // this will return generic converted coords for us\n        var pos = this.getGridCoordsAt(x, y);\n\n        pos.x += this.mesh.position.x - (this.sector_size / 2);\n        pos.z += this.mesh.position.z - (this.sector_size / 2);\n\n        return {x: pos.x, z: pos.z};\n    }\n\n    getFaceFromPosition(x, z, just_geom) {\n        var sector = this.getSectorFromPosition(x, z);\n        var pos = this.getPrecisionGridCoordsAt(x, z);\n        var face = sector.getFaceFromGridPoint(pos.x, pos.y, just_geom);\n\n        return face;\n        //console.log(pos);\n    }\n\n    // this is to be passed raw real word coords\n    getY3(x, z, filter_passes) {\n\n        if(!filter_passes) filter_passes = false;\n\n        // determine which sector that lands on..\n        var coords = this.getSectorFromCoords(x, z, true);\n        var sector = this.getSector(coords.x, coords.y);\n\n        // do math to figure out which x,z on that sector we need\n        //mcec.log(\"Terrain -> getY(\" + x + \", \" +  z + \")\");\n\n        // our x,y (i like y) coords of where on the tile we need to find\n        var _x = x % this.sector_size;\n        var _z = z % this.sector_size;\n\n        // ask that sector for its heightmap value at x,z\n        // distribute the work to give the illusion of ease\n        var y = sector.getHeightMapValueAt(_x, _z, filter_passes);\n\n        return y;\n    }\n\n    getY (x, z, ref_y) {\n        var sector = this.getSectorFromPosition(x, z, true);\n\n        // console.log(\"XZ WAS IN SECTOR:\", x, z, sector.id());\n        return sector.getY(x, z, ref_y);\n\n\n\n\n\n\n        return false;\n\n        var height = 50;\n        var raycaster = sector.raycaster;\n\n        raycaster.ray.direction.set( 0, -1, 0 );\n        raycaster.ray.origin.set(x, 500, z);\n\n        // var mouse = new THREE.Vector2(x, z);\n        // var intersect = this.gpuPicker.pick(mouse, raycaster);\n\n        //return intersect;\n\n        //this.scene.getRenderer().render(sector.picking_scene, this.scene.getCamera());\n        sector.picking_scene.updateMatrixWorld(true);\n\n        //\n        var hits = raycaster.intersectObjects( sector.picking_scene.children, true );\n        var hits_filtered = [];\n        \n        //if(hits.length > 0) console.log(hits);\n\n        if( ( hits.length > 0 ) ) {\n            for(var i=0; i<hits.length; i++) {\n                //if(hits[i].object.name == this.name) {\n                //console.log(hits[i]);\n                var offset = height - hits[i].distance;\n                //console.log(offset);\n                //return offset + hits[i].face.normal.y;\n                return (hits[i].point.y);//distance);\n                //}\n            }\n\n        }\n\n        return false;\n    }\n\n    GetGridSquarePositionAt(x, z, center) {\n        var coords = this.getGridCoordsAt(x, z);\n        console.log(\"Grid coords of click: \", coords);\n\n        var sec = this.getSectorIDFromPosition(x, z);\n\n        if(center) {\n            var pos = this.getGridSquareCenter(sec.x, sec.y, coords.x, coords.y);\n        } else {\n            var pos = this.getGridSquarePosition(sec.x, sec.y, coords.x, coords.y);\n        }\n\n        console.log(\"Position of those coords: \", sec, pos);\n\n        return pos;\n    }\n\n    // this is to be passed raw real word coords\n    getYTest(x, z, filter_passes) {\n\n        // determine which sector that lands on..\n        var coords = this.getSectorFromCoords(x, z, true);\n        var sector = this.getSector(coords.x, coords.y);\n\n        // do math to figure out which x,z on that sector we need\n        //mcec.log(\"Terrain -> getY(\" + x + \", \" +  z + \")\");\n\n        // our x,y (i like y) coords of where on the tile we need to find\n        var _x = x % this.sector_size;\n        var _z = z % this.sector_size;\n\n        // ask that sector for its heightmap value at x,z\n        // distribute the work to give the illusion of ease\n        var y = sector.getHeightMapValueAt(_x, _z, filter_passes);\n\n        return y;\n    }\n\n    // returns the CENTER of the grid square\n    getGridSquarePosition(sector_x, sector_y, x, y) {\n\n        // sectors real world position.. 0,0 = 500,500 (1000 / 2 = 500 to get it at 0)\n        var pos = this.getSectorPositionTopLeft(sector_x, sector_y);\n\n        // grid square size is square_x and y\n        var _x = this.square_x * x;\n        var _z = this.square_y * y;\n\n        console.log(\"Sector position: \", pos);\n\n        // add the position of our sector\n        _x += pos.x;\n        _z += pos.z;\n\n        // _x -= (this.sector_size / 2);\n        // _z -= (this.sector_size / 2);\n        //\n        // _x += ((this.sector_size / this.data_size[0]) / 2);\n        // _z += ((this.sector_size / this.data_size[1]) / 2);\n\n        return {x: _x, z: _z};\n    }\n\n    getGridSquareCenter(sector_x, sector_y, x, y) {\n        var pos = this.getGridSquarePosition(sector_x, sector_y, x, y);\n\n        pos.x += this.square_x / 2;\n        pos.z += this.square_y / 2;\n\n        return {x: pos.x, z: pos.z};\n    }\n\n    getVerticeLocation(sector_x, sector_y, x, y) {\n        var pos = this.getGridSquarePosition(sector_x, sector_y, x, y);\n\n        pos.x -= this.square_x / 2;\n        pos.z -= this.square_y / 2;\n\n        return {x: pos.x, z: pos.z};\n    }\n\n    // check which sectors are needed and load them\n    // unload sectors which arent necessary anymore\n    // this should be called on update()\n    checkNeededSectors() {\n        var player = this.scene.getMyPlayer();\n        var x = player.position.x;\n        var z = player.position.z;\n\n        for (var n = 0; n < this.sectors.length; n++) {\n            var sector = this.sectors[ n ];\n\n            if(sector.is_needed) {\n                sector.is_needed = false;\n            }\n        }\n\n        for (var i = 0; i < this.sectors_needed.length; i++) {\n            var needed = this.sectors_needed[i];\n            var sector = this.getSector(needed.x, needed.y);\n\n            sector.is_needed = true;\n            if(sector.is_loaded) sector.setSpoofing(needed.x, needed.y);\n        }\n    }\n\n    // will return array of which sectors are needed\n    // this is actual sectors, this will never return a negative\n    determineSectorsNeeded(x, z) {\n        // grab sector from our vec2\n        var coords = this.getSectorFromCoords(x, z);\n\n        // populate this shit with the sectors we need to load\n        var sectors_needed = [];\n\n        // what type of grid are we making around the player\n        var radius = 3;\n\n        // figure shit out\n        for(var i=0; i<radius; i++) {\n\n            var _x = i + coords.x - Math.floor(radius / 2);\n\n            for(var j=0; j<radius; j++) {\n\n                var _y = j + coords.y - Math.floor(radius / 2);\n                var actual = {x: _x, y: _y};\n                //var needed = this.safeSectors(_x, _y);\n\n                //console.log(\"SECTOR NEEDED: \", actual);\n\n                //needed.actual = actual;\n                sectors_needed.push(actual);\n            }\n        }\n\n        return sectors_needed;\n    }\n\n    loadSector(sector_x, sector_y) {\n\n        var sector = this.getSector(sector_x, sector_y);\n\n        return sector;\n\n    }\n\n    unloadSector(sector) {\n        var id = sector.id();\n\n        for(var i=0; i<this.group.children.length; i++) {\n\n            var child = this.group.children[i];\n            if(child == sector.mesh) {\n                this.group.remove(child);\n\n                //delete this.sectors[ sector.sector_y ][ sector.sector_x ];\n                sector.mesh = null;\n                sector.has_init = false;\n                sector.is_loaded = false;\n                sector.is_loading = false;\n\n                mcec.log(\"Completely unloaded mesh for sector \" + id);\n            }\n\n        }\n    }\n\n    loopLoadedSectors(callback) {\n\n        for(var y in this.sectors) {\n\n            if(typeof this.sectors[ y ] == \"undefined\") continue;\n\n            var sector = this.sectors[ y ];\n\n            callback(sector.raw_x, sector.raw_y);\n\n            // for(var x in this.sectors[ y ]) {\n            //\n            //     //var sector = this.getSector(x, y);\n            //\n            //     if(typeof this.sectors[ y ][ x ] !== \"undefined\") {\n            //         //var sector = this.sectors[ y ][ x ];\n            //\n            //         callback(x, y);\n            //     }\n            // }\n        }\n    }\n\n    loopNeededSectors(callback) {\n\n        if(typeof this.sectors_needed == \"undefined\") return;\n\n        for(var y in this.sectors_needed) {\n\n            var sector = this.sectors_needed[ y ];\n\n            callback(sector.x, sector.y);\n\n            // for(var x in this.sectors[ y ]) {\n            //\n            //     //var sector = this.getSector(x, y);\n            //\n            //     if(typeof this.sectors[ y ][ x ] !== \"undefined\") {\n            //         //var sector = this.sectors[ y ][ x ];\n            //\n            //         callback(x, y);\n            //     }\n            // }\n        }\n    }\n\n    // this is all local math, so make sure to pass the sector you want the\n    // position for (spoofed), and not the actual sector ..\n    getSectorPosition(sector_x, sector_y) {\n        // position the mesh\n        var size = this.sector_size;\n        var offset = (size / 2);\n\n        var pos_x = size * sector_x;\n        var pos_z = size * sector_y;\n\n        pos_x += offset;\n        pos_z += offset;\n\n        return {x: pos_x, z: pos_z};\n    }\n\n    // this is all local math, so make sure to pass the sector you want the\n    // position for (spoofed), and not the actual sector ..\n    getSectorPositionTopLeft(sector_x, sector_y) {\n        // position the mesh\n        var size = this.sector_size;\n        //var offset = (size / 2);\n\n        var pos_x = size * sector_x;\n        var pos_z = size * sector_y;\n\n        //pos_x += offset;\n        //pos_z += offset;\n\n        return {x: pos_x, z: pos_z};\n    }\n\n    initSector(sector) {\n\n        mcec.log(\"INIT SECTOR \" + sector.id());\n\n        sector.init();\n        sector.has_init = true;\n\n        // position the mesh\n        var x = sector.raw_x;\n        var y = sector.raw_y;\n\n        var pos = this.getSectorPosition(x, y);\n        sector.setPosition(pos.x, pos.z);\n    }\n\n    updateSector(sector_x, sector_y) {\n        //var sector = this.getSector(sector_x, sector_y);\n\n        if(!sector.has_init) {\n            if(sector.is_loaded) {\n                // mcec.log(\"Sector \" + sector.id() + \" has init, adding to group!\");\n                //\n                // this.initSector(sector);\n            } else {\n                //mcec.log(\"Sector stil hasnt loaded \" + sector.id());\n            }\n        }\n\n        return sector.has_init;\n    }\n\n    // check if a real sector is loaded, should be passes safe values\n    isSectorLoaded(x, y) {\n        this.loopLoadedSectors((x, y) => {\n            var sector = this.getSector(x, y, false, false, true);\n\n            if(sector.raw_x == x && sector.raw_y == y) {\n                return true;\n            }\n        });\n\n        return false;\n    }\n\n    update(delta) {\n        if(typeof this.scene.getMyPlayer() == \"undefined\") return;\n        // player position\n        var x = this.scene.getMyPlayer().position.x;\n        var z = this.scene.getMyPlayer().position.z;\n\n        // determine which sectors we need and store\n        this.sectors_needed = this.determineSectorsNeeded(x, z);\n\n        // make sure all necessary sectors are loaded\n        this.loopNeededSectors((x, y) => {\n            var sector = this.getSector(x, y);\n        });\n\n        // loop all loaded sectors and give them an update call\n        this.loopLoadedSectors((x, y) => {\n            var sector = this.getSector(x, y);\n\n            sector.update();\n        });\n\n\n        //this.checkNeededSectors();\n        //\n        // if(!this.terrain_ready && this.sectors_needed.length > 0) {\n        //     var waiting = 0;\n        //     this.loopLoadedSectors((x, y) => {\n        //         var init = this.getSector(x, y).has_init;\n        //\n        //         if(!init) waiting++;\n        //     });\n        //\n        //     if(waiting == 0) {\n        //         this.terrain_ready = true;\n        //         // this just happens when first loading\n        //         mcec.log(\"Terrain is ready to go!\");\n        //     }\n        // }\n        //\n        // if(this.sectors.length > 0) {\n        //     this.loopLoadedSectors((x, y) => {\n        //         var sector = this.getSector(x, y);\n        //\n        //         sector.update();\n        //     });\n        // }\n    }\n\n    // currently unused sample code .. may speed things up\n    combine_meshes__() {\n        // List of all the materials used in the meshes you want to combine\n        var materials = [material1, material2, material3];\n\n        // List of the meshes you want to combine, for each one you have to store the index of the material within the materials array\n        var meshes = [{mesh: mesh1, materialIndex:0}, {mesh: mesh2, materialIndex:1}, {mesh: mesh3, materialIndex:2}];\n\n        // Geometry of the combined mesh\n        var totalGeometry = new THREE.Geometry();\n        for(var i = 0; i < meshes.length; i++)\n        {\n            meshes[i].mesh.updateMatrix();\n            totalGeometry.merge(meshes[i].mesh.geometry, meshes[i].mesh.matrix, meshes[i].materialIndex);\n        }\n\n        // Create the combined mesh\n        var combinedMesh = new THREE.Mesh(totalGeometry, new THREE.MeshFaceMaterial(materials));\n        scene.add(combinedMesh);\n    }\n\n    sameSide(p1,p2,a,b) {\n        var ab = b.clone().sub(a)\n        var ap1 = p1.clone().sub(a)\n        var ap2 = p2.clone().sub(a)\n        var cp1 = new THREE.Vector3().crossVectors(ab, ap1)\n        var cp2 = new THREE.Vector3().crossVectors(ab, ap2)\n        return cp1.dot(cp2) >= 0\n    }\n\n    pointInTriangle(p, a, b, c) {\n        return this.sameSide(p,a,b,c) && this.sameSide(p,b,a,c) && this.sameSide(p,c,a,b)\n    }\n\n    closestToSegment(p, a, b) {\n        var ab = b.clone().sub(a)\n        var nab = ab.clone().normalize()\n        var n = nab.dot(p.clone().sub(a))\n        if (n < 0) return a\n        if (n > ab.length()) return b\n        return a.clone().add(nab.multiplyScalar(n))\n    }\n\n    closestToSides(p, sides) {\n        var minDist = 1e9\n        var ret\n        var self = this;\n        sides.forEach(function (side) {\n            var ct = self.closestToSegment(p, side[0], side[1])\n            var dist = ct.distanceTo(p)\n            if (dist < minDist) {\n                minDist = dist\n                ret = ct\n            }\n        })\n        return ret\n    }\n\n    closestPointToTriangle(p, a, b, c) {\n        // if the point is inside the triangle then it's the closest point\n        if (this.pointInTriangle(p,a,b,c)) return p\n        // otherwise it's the closest point to one of the sides\n        return this.closestToSides(p, [[a, b], [b, c], [a, c]])\n    }\n}\n\nmodule.exports = terrain;","\n\nexport default class terrain_tile {\n    constructor(scene, sector_x, sector_y, spoofing_x, spoofing_y) {\n        // for ease\n        this.scene = scene;\n        this.terrain = scene.world.terrain;\n\n        // this will hold the X and Y that this tile represents\n        this.sector_x = sector_x;\n        this.sector_y = sector_y;\n\n        // for ease\n        this.x = this.sector_x;\n        this.y = this.sector_y;\n\n        // should be set to the same size as the heightmap image\n        this.data_size = this.terrain.data_size;\n\n        // is the mesh set?\n        this.is_loaded = false;\n\n        // are we trying?\n        this.is_loading = false;\n\n        // is this mesh needed?\n        this.is_needed = false;\n\n        // has init() been called?\n        this.has_init = false;\n\n        // should we reinit and reload the mesh?\n        this.needs_refresh = false;\n\n        // this tiles mesh (a member of the world group)\n        this.mesh = null;\n\n        // for hit detection\n        this.name = scene.world.name;\n\n        var extra = \"\";\n        if(spoofing_x) {\n            extra = \" Acting as [ \" + spoofing_x + \", \" + spoofing_y + \" ]\";\n        }\n\n        mcec.log(\"Terrain sector created [ \" + sector_x + \", \" + sector_y +\" ]\" + extra);\n\n        this.setSpoofing(spoofing_x, spoofing_y, true);\n\n\n    }\n\n    setSpoofing(spoofing_x, spoofing_y, bypass_init) {\n        //console.log(\"SET SPOOFING TO\", spoofing_x, spoofing_y, this.id());\n\n        // if(spoofing_x !== this.spoofing_x || spoofing_y !== this.spoofing_y) {\n        //     if(!bypass_init) this.terrain.initSector(this);\n        // }\n\n        // where are we faking as, if any?\n        this.spoofing_x = spoofing_x;\n        this.spoofing_y = spoofing_y;\n\n        // raw coords, always populated\n        this.raw_x = spoofing_x ? spoofing_x : this.x;\n        this.raw_y = spoofing_y ? spoofing_y : this.y;\n\n        // this is for our infinite world actual coords (could be negative or overmaxed grid coords)\n        this.spoofing = {x: spoofing_x, y:spoofing_y};\n        this.is_spoofing = spoofing_x ? true : false;\n    }\n\n    id() {\n        return \"[\" + this.sector_x + \",\" + this.sector_y + \"] - as:[\" + this.raw_x + \",\" + this.raw_y + \"]\";\n    }\n\n    // init the camera and whatever is needed for gpu picking this actual tile\n    initPicker2__UNUSED() {\n        var renderer = this.scene.getRenderer();\n\n        this.picking_texture = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter});\n        var texture = new THREE.Texture(this.canvas, THREE.UVMapping, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.NearestFilter, THREE.NearestFilter);\n\n\n        //this.picking_camera = new THREE.OrthographicCamera(this.terrain.sector_size / - 2, this.terrain.sector_size / 2, this.terrain.sector_size / 2, this.terrain.sector_size / - 2, -10000, 10000);\n        this.picking_camera = new THREE.PerspectiveCamera(40, 1, 1, 10000);\n\n        this.picking_camera.lookAt(new THREE.Vector3(0, -1, 0));\n        this.picking_camera.position.y = this.terrain.sector_alt[1];\n        this.picking_camera.position.x = this.terrain.sector_size / 2;\n        this.picking_camera.position.z = this.terrain.sector_size / 2;\n        //this.scene.camera.tits = this.picking_camera;\n\n        this.picking_scene = new THREE.Scene();\n\n\n        var mesh = new THREE.Mesh(this.mesh.geometry, texture);\n        this.picking_scene.add(mesh);\n\n\n\n\n\n        // render our scene and store it for picking whenever\n        // renderer.render(this.picking_scene, this.picking_camera);//, this.picking_texture);\n        //\n        // var size = this.terrain.sector_size * this.terrain.sector_size;\n        // var gl = renderer.getContext();\n        // var pixelBuffer = new Uint8Array(4 * size);\n        //\n        // //read the pixel under the mouse from the texture\n        // gl.readPixels(0, 0, this.terrain.sector_size, this.terrain.sector_size, gl.RGBA, gl.UNSIGNED_BYTE, pixelBuffer);\n        //\n        //\n        // var screenshot = renderer.domElement.toDataURL();\n        // //\n        // var ss = new Image();\n        // ss.src = screenshot;\n        // //\n        // var src = document.getElementById(\"body\");\n        //\n        // //\n        // if(this.x == 0 && this.y == 0) {\n        //     console.log(pixelBuffer);\n        //     src.appendChild(ss);\n        // }\n\n        //console.log(pixelBuffer);\n\n        // //interpret the pixel as an ID\n        // var id = (pixelBuffer[0] << 16) | (pixelBuffer[1] << 8) | (pixelBuffer[2]);\n        // var data = pickingData[id];\n        // if(data){\n        //     //move our highlightBox so that it surrounds the picked object\n        //     if(data.position && data.rotation && data.scale){\n        //         highlightBox.position.copy(data.position);\n        //         highlightBox.rotation.copy(data.rotation);\n        //         highlightBox.scale.copy(data.scale).addSelf(offset);\n        //         highlightBox.visible = true;\n        //     }\n        // } else {\n        //     highlightBox.visible = false;\n        // }\n\n        mcec.log(this.id() + \" GPU Picker initialized and rendered\");\n    }\n\n    initPicker() {\n        mcec.log(\"Initializing picker \" + this.id());\n        this.raycaster = new THREE.Raycaster();\n        this.picking_scene = new THREE.Scene();\n        this.picking_objects = [];\n        this.faces_created = [];\n    }\n\n    // called after the mesh is actually loaded into the scene\n    init() {\n        // ideas..\n\n        mcec.log(\"Sector init \" + this.id());\n        this.initPicker();\n\n        // this.point = new THREE.Mesh(\n        //     new THREE.SphereGeometry(0.1, 32, 32),\n        //     new THREE.MeshBasicMaterial({ color: 0xff0000 })\n        // );\n        //\n        // this.scene.add(this.point);\n        // this.point.position.copy(this.mesh.position);\n\n        // this.initCharacters();\n        // this.initObjects();\n        // this.initTerrain();\n        //\n    }\n\n    // using x,z because we arent dealing with our grid system, but actual position/vector\n    setPosition(x, y, z) {\n        if(!z) {\n            z = y;\n            y = false;\n        }\n\n        this.mesh.position.x = x;\n        if(y) this.mesh.position.y = y;\n        this.mesh.position.z = z;\n\n        mcec.log(this.id() + \" setting position = (\" + x + \", \" + y + \", \" + z + \")\");\n\n        return this.mesh.position;\n    }\n\n    setPositionInsideSector(x, y, z) {}\n\n    getPosition() {\n        return this.mesh.position;\n    }\n\n    unload() {\n        delete this.mesh;\n        this.mesh = null;\n\n        this.has_init = false;\n        this.is_loaded = false;\n    }\n\n    onLoad(callback) {\n        this.callbacks.push(callback);\n    }\n\n    // basically init\n    load() {\n        // if(this.is_loaded) return;\n        // if(this.is_loading) return;\n\n        mcec.log(\"Starting LOAD for sector \" + this.id());\n\n        this.is_loading = true;\n        this.is_loaded = false;\n        this.has_init = false;\n        this.needs_refresh = false;\n\n        // this is going to come from the server so, just sloppy load it for now nastayyyy\n        if(!this.image_map) {\n            var bumpTexture = new THREE.ImageUtils.loadTexture('shared/world.png');\n            bumpTexture.wrapS = bumpTexture.wrapT = THREE.RepeatWrapping;\n            this.image_map = bumpTexture;\n        }\n\n        var self = this;\n        this.getHeightDataFromImage(this.image_map.image, function(data) {\n\n            var filt = self.BoxFilterHeightMap(self.data_size[0], self.data_size[1], data, true, 1);\n            self.setHeightMap(filt);\n\n            var min = 0, max = 0;\n            for(var i=0; i<filt.length; i++) {\n\n                var val = filt[i];\n\n                if(min == 0) min = val;\n                if(val > max) max = val;\n                if(val < min) min = val;\n\n            }\n\n            self.heightmap_min = min;\n            self.heightmap_min = max;\n\n            // create mesh\n            var mesh = self.heightDataToMesh(filt);\n\n            // set the mesh and set is_loaded which tells terrain to init this tile\n            self.mesh = mesh;\n            self.is_loaded = true;\n            self.is_loading = false;\n\n            // add to world group\n            self.terrain.group.add(mesh);\n\n            self.terrain.initSector(self);\n\n\n            mcec.log(\"SET MESH FOR \" + self.id());\n\n            // for(var i=0; i<self.callbacks.length; i++) {\n            //     self.callbacks[i](self);\n            // }\n            //\n            // self.callbacks = [];\n        });\n    }\n\n    setHeightMap(data) {\n        this.heightmap = data;\n    }\n\n    BoxFilterHeightMap(width, height, heightMap, smoothEdges, passes) {\n        //     width: Width of the height map in bytes\n        //    height: Height of the height map in bytes\n        // heightMap: Pointer to your height map data\n\n        // Temporary values for traversing single dimensional arrays\n        var x = 0;\n        var z = 0;\n\n        var widthClamp = (smoothEdges) ?  width : width  - 1;\n        var heightClamp = (smoothEdges) ? height : height - 1;\n\n        // [Optimization] Calculate size ahead of time\n        var size = width * height;\n\n        // Validate requirements\n        if (!heightMap) return;\n        if (!passes) passes = 1;\n\n        // Allocate the result\n        var result = new Float32Array( size );\n\n        // Make sure memory was allocated\n        if (!result) return;\n\n        for (var z = ((smoothEdges) ? 0 : 1); z < heightClamp; ++z) {\n\n            for (var x = ((smoothEdges) ? 0 : 1); x < widthClamp; ++x) {\n                // Sample a 3x3 filtering grid based on surrounding neighbors\n\n                var value = 0.0;\n                var cellAverage = 1.0;\n\n                // Sample top row\n\n                if (((x - 1) + (z - 1) * width) >= 0 &&\n                    ((x - 1) + (z - 1) * width) < size)\n                {\n                    value += heightMap[(x - 1) + (z - 1) * width];\n                    cellAverage++;\n                }\n\n                if (((x - 0) + (z - 1) * width) >= 0 &&\n                    ((x - 0) + (z - 1) * width) < size)\n                {\n                    value += heightMap[(x    ) + (z - 1) * width];\n                    cellAverage++;\n                }\n\n                if (((x + 1) + (z - 1) * width) >= 0 &&\n                    ((x + 1) + (z - 1) * width) < size)\n                {\n                    value += heightMap[(x + 1) + (z - 1) * width];\n                    cellAverage++;\n                }\n\n                // Sample middle row\n\n                if (((x - 1) + (z - 0) * width) >= 0 &&\n                    ((x - 1) + (z - 0) * width) < size)\n                {\n                    value += heightMap[(x - 1) + (z    ) * width];\n                    cellAverage++;\n                }\n\n                // Sample center point (will always be in size)\n                value += heightMap[x + z * width];\n\n                if (((x + 1) + (z - 0) * width) >= 0 &&\n                    ((x + 1) + (z - 0) * width) < size)\n                {\n                    value += heightMap[(x + 1) + (z    ) * width];\n                    cellAverage++;\n                }\n\n                // Sample bottom row\n\n                if (((x - 1) + (z + 1) * width) >= 0 &&\n                    ((x - 1) + (z + 1) * width) < size)\n                {\n                    value += heightMap[(x - 1) + (z + 1) * width];\n                    cellAverage++;\n                }\n\n                if (((x - 0) + (z + 1) * width) >= 0 &&\n                    ((x - 0) + (z + 1) * width) < size)\n                {\n                    value += heightMap[(x    ) + (z + 1) * width];\n                    cellAverage++;\n                }\n\n                if (((x + 1) + (z + 1) * width) >= 0 &&\n                    ((x + 1) + (z + 1) * width) < size)\n                {\n                    value += heightMap[(x + 1) + (z + 1) * width];\n                    cellAverage++;\n                }\n\n                // Store the result\n                result[x + z * width] = (value / cellAverage);\n            }\n        }\n\n        if(passes > 1) {\n\n            for(var pass=1; pass<passes; pass++) {\n                mcec.log(\"Pass #\" + (pass+1) + \" for heightmap\");\n                result = this.BoxFilterHeightMap(width, height, result, smoothEdges);\n            }\n        }\n\n        return result;\n    }\n\n    getHeightDataFromImage(image, callback) {\n        var self = this;\n\n        // has our image already loaded? if so just process it\n        if(typeof image.has_init !== \"undefined\") {\n            self.processImageHeightData(image, callback);\n            return;\n        }\n\n        // process after loading\n        image.onload = function () {\n            self.processImageHeightData(image, callback);\n        };\n    }\n\n    processImageHeightData(image, callback) {\n        var self = this;\n        var width = self.data_size[0];\n        var height = self.data_size[1];\n\n        // create canvas\n        self.canvas = document.createElement('canvas');\n        self.canvas.width = width; // or 'width' if you want a special/scaled size\n        self.canvas.height = height; // or 'height' if you want a special/scaled size\n\n        // various shit\n        var size = width * height;\n        var data = new Float32Array( size );\n        var min = self.terrain.sector_alt[0];\n        var max = self.terrain.sector_alt[1];\n        var range = max - min;\n\n        // draw the image onto the canvas\n        var context = self.canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n\n        // loop through all x,y coords and add to data[]\n        // (float 0-1 for pixel depth) x (height range) + min\n        var range = max - min;\n        var i = 0;\n        for ( var y = 0; y < height; y ++ ) {\n\n            var row = context.getImageData(0, y, width, 1).data;\n\n            for ( var x = 0; x < width; x ++ ) {\n\n                var r = row[x*4];\n                var g = row[(x*4)+1];\n                var b = row[(x*4)+2];\n                var a = row[(x*4)+3];\n\n                var num = ((r / 255) + (g / 255) + (b / 255)) / 3;\n\n                data[ i ] = (num * range) + min;\n\n                i++;\n            }\n        }\n\n        image.has_init = true;\n        callback(data);\n    }\n\n    heightDataToMesh(data) {\n        // geometry\n        var geometry = this.getTerrainGeometryFromHeightmap(data, this.terrain.sector_size, this.terrain.sector_size);\n\n        // material\n        // var texture = THREE.ImageUtils.loadTexture( 'shared/world.png' );\n        // var material = new THREE.MeshLambertMaterial( { map: texture, side: THREE.DoubleSide, morph_normals: true } );\n\n        // mesh\n        var mesh = new THREE.Mesh( geometry, this.scene.world.shaders.getShaderMaterial('terrain'));\n        mesh.name = this.name;\n\n        return mesh;\n    }\n\n    addWireframe(mesh) {\n        if(!mesh) mesh = this.mesh;\n        // // wireframe\n        var geo = new THREE.WireframeGeometry( mesh.geometry ); // or WireframeGeometry\n        var mat = new THREE.LineBasicMaterial( { color: 0xffffff, linewidth: 2 } );\n        var wireframe = new THREE.LineSegments( geo, mat );\n        mesh.add( wireframe );\n    }\n\n    getVertice(x, y) {\n\n        var data = this.mesh.geometry.attributes.position.array;\n        var square = (y * this.data_size[0]) + x;\n        var pos = (square * 3);\n\n        var vertice = new THREE.Vector3(data[ pos ], data[ pos + 1 ], data[ pos + 2 ]);\n        return vertice;\n    }\n\n    getNormal(x, y) {\n        var data = this.mesh.geometry.attributes.normal.array;\n        var square = (y * this.data_size[0]) + x;\n        var pos = (square * 3);\n\n        var vertice = new THREE.Vector3(data[ pos ], data[ pos + 1 ], data[ pos + 2 ]);\n        return vertice;\n    }\n\n    getFaceFromGridPoint(precision_x, precision_y, just_geom) {\n        // normalize the x and y\n        var x = Math.floor(precision_x);\n        var y = Math.floor(precision_y);\n\n        // we convert the precision x and y to decimal, basically a percentage of X and Y\n        // so its 0-1, so if we combine the two, and we are above 1 (100%) then we are over\n        // the halfway point of the triangle. dont question me bitch.\n        if(((precision_x % 1) + (precision_y % 1)) < 1) {\n            var face = 1;\n\n        } else {\n            var face = 2;\n        }\n\n        // cache the faces\n        // todo: limit the amount cached and auto purge\n        if(typeof this.faces_created == \"undefined\") this.faces_created = [];\n        if(typeof this.faces_created[x] == \"undefined\") this.faces_created[x] = [];\n        if(typeof this.faces_created[x][y] == \"undefined\") this.faces_created[x][y] = [];\n        if(typeof this.faces_created[x][y][face] !== \"undefined\") return this.faces_created[x][y][face];\n\n        // grab our vertices (for the whole square)\n        // todo: do something clever later using the face # to limit this\n        var v1 = this.getVertice(x, y);\n        var v2 = this.getVertice(x + 1, y);\n        var v3 = this.getVertice(x, y + 1);\n        var v4 = this.getVertice(x + 1, y + 1);\n\n        // math *yawn*\n        var normal = new THREE.Vector3( 0, 1, 0 );\n        normal = this.mesh.position.clone();\n        var geom = new THREE.Geometry();\n\n        // which side of the square are we pushing\n        if(face == 1) {\n            geom.vertices.push(v1);\n            geom.vertices.push(v2);\n            geom.vertices.push(v3);\n            geom.faces.push(new THREE.Face3(0, 1, 2, normal));\n\n            var tri = new THREE.Triangle(v1, v2, v3);\n\n         } else {\n            geom.vertices.push(v2);\n            geom.vertices.push(v3);\n            geom.vertices.push(v4);\n            geom.faces.push(new THREE.Face3(2, 1, 0, normal));\n\n            var tri = new THREE.Triangle(v4, v3, v2);\n        }\n\n        // update shit\n        //geom.verticesNeedUpdate = true;\n        //geom.elementsNeedUpdate = true;\n        //geom.morphTargetsNeedUpdate = true;\n        //geom.uvsNeedUpdate = true;\n        //geom.normalsNeedUpdate = true;\n        //geom.colorsNeedUpdate = true;\n        //geom.tangentsNeedUpdate = true;\n\n        geom.computeFaceNormals();\n        //geom.computeVertexNormals();\n        //geom.computeBoundingBox();\n        //geom.computeBoundingSphere();\n\n        // dont do the rest if we just want the geometry\n        if(just_geom) return geom;\n\n\n        // create object\n        var object = new THREE.Mesh( geom, new THREE.MeshBasicMaterial({color: 0xcccc00, side: THREE.DoubleSide, transparent: true, opacity: 0.5}) );\n\n        // set properties\n        object.position.copy(this.mesh.position);\n        object.position.y += 0.01;\n        object.name = \"click_face\";\n        object.triangle = tri;\n\n        // cache this face\n        this.faces_created[x][y][face] = object;\n\n        // add to picking scene\n        //this.picking_scene.add(object);\n\n        // clone and add for visibility / debug\n        var scene_obj = object.clone();\n        this.scene.add(scene_obj);\n        this.addWireframe(scene_obj);\n\n        // return the face!\n        return this.faces_created[x][y][face];\n    }\n\n    getTerrainGeometryFromHeightmap(data, width, height) {\n\n        // build geometry\n        var geometry\t= new THREE.PlaneBufferGeometry(width, height, (this.data_size[0]-1), (this.data_size[1]-1));\n        geometry.rotateX( - Math.PI / 2 );\n\n        var vertices = geometry.attributes.position.array;\n        for ( var i = 0, j = 0, l = vertices.length; i < l; i ++, j += 3 ) {\n            vertices[ j + 1 ] = data[ i ];\n        }\n\n        //var square = 51;\n\n        //var vertice = square * 3 + 1;\n\n        //vertices[ vertice ] = -80;\n        //vertices[312] = -50;\n        // vertices[313] = -50;\n        // vertices[314] = -50;\n\n\n\n        // notify the geometry need to update vertices\n        //geometry.mergeVertices();\n        // geometry.dynamic = true;\n        // geometry.verticesNeedUpdate\t= true;\n        // geometry.normalsNeedUpdate\t= true;\n\n        geometry.verticesNeedUpdate = true;\n        geometry.elementsNeedUpdate = true;\n        geometry.morphTargetsNeedUpdate = true;\n        geometry.uvsNeedUpdate = true;\n        geometry.normalsNeedUpdate = true;\n        geometry.colorsNeedUpdate = true;\n        geometry.tangentsNeedUpdate = true;\n\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n\n        geometry.computeBoundingBox();\n        geometry.computeBoundingSphere();\n\n\n        return geometry;\n    }\n\n    getHeightData(img) {\n        var canvas = document.createElement( 'canvas' );\n        canvas.terrain.sector_size = 128;\n        canvas.terrain.sector_size = 128;\n        var context = canvas.getContext( '2d' );\n\n        var size = 128 * 128, data = new Float32Array( size );\n\n        context.drawImage(img, 0,0);\n\n        for ( var i = 0; i < size; i ++ ) {\n            data[i] = 0\n        }\n\n        var imgd = context.getImageData(0, 0, 128, 128);\n        var pix = imgd.data;\n\n        var j=0;\n        for (var i = 0, n = pix.length; i < n; i += (4)) {\n            var all = pix[i]+pix[i+1]+pix[i+2];\n            data[j++] = all/30;\n        }\n\n        return data;\n    }\n\n    Ammo_createTerrainShape(data) {\n\n        // This parameter is not really used, since we are using PHY_FLOAT height data type and hence it is ignored\n        var heightScale = 5;\n\n        // Up axis = 0 for X, 1 for Y, 2 for Z. Normally 1 = Y is used.\n        var upAxis = 1;\n\n        // hdt, height data type. \"PHY_FLOAT\" is used. Possible values are \"PHY_FLOAT\", \"PHY_UCHAR\", \"PHY_SHORT\"\n        var hdt = \"PHY_FLOAT\";\n\n        // Set this to your needs (inverts the triangles)\n        var flipQuadEdges = true;\n\n        // Creates height data buffer in Ammo heap\n        //this.ammoHeightData = Ammo._malloc( 4 * this.data_size[0] * this.data_size[1] );\n\n        // Copy the javascript height data array to the Ammo one.\n        // var p = 0;\n        // var p2 = 0;\n        // for ( var j = 0; j < this.data_size[1]; j ++ ) {\n        //     for ( var i = 0; i < this.data_size[0]; i ++ ) {\n        //\n        //         // write 32-bit float data to memory\n        //         Ammo.HEAPF32[this.ammoHeightData + p2 >> 2] = data[ p ];\n        //\n        //         p ++;\n        //\n        //         // 4 bytes/float\n        //         p2 += 4;\n        //     }\n        // }\n        //\n        // // Creates the heightfield physics shape\n        // var heightFieldShape = new Ammo.btHeightfieldTerrainShape(\n        //\n        //     this.data_size[0],\n        //     this.data_size[1],\n        //\n        //     this.ammoHeightData,\n        //\n        //     heightScale,\n        //     this.terrain.sector_alt[0],\n        //     this.terrain.sector_alt[1],\n        //\n        //     upAxis,\n        //     hdt,\n        //     flipQuadEdges\n        // );\n\n        // Set horizontal scale\n        var scaleX = this.terrain.sector_size / ( this.data_size[0] - 1 );\n        var scaleZ = this.terrain.sector_size / ( this.data_size[1] - 1 );\n\n        scaleX = (scaleX) * this.model.scale.x;\n        scaleZ = (scaleZ) * this.model.scale.z;\n\n        //console.log(\"GET RAW\", heightFieldShape.getRawHeightFieldValue( 100 , 100 ));\n\n\n        //heightFieldShape.setLocalScaling( new Ammo.btVector3( scaleX, this.model.scale.y, scaleZ ) );\n        //heightFieldShape.setScale(2, 2);\n        //heightFieldShape.setMargin( 0.05 );\n\n        //return heightFieldShape;\n\n    }\n\n    update() {\n        this.is_needed = false;\n        this.terrain.loopNeededSectors((x, y) => {\n            var safeX = this.terrain.safeX(x);\n            var safeY = this.terrain.safeY(y);\n\n            // check if im needed\n            if(safeX == this.x && safeY == this.y) {\n                // im necessary for the scene\n                this.is_needed = true;\n\n                // check if spoofing is needed\n                if(safeX !== x || safeY !== y) {\n\n                    // check if spoofing is current (if ive moved)\n                    if(this.spoofing_x !== x || this.spoofing_y !== y) {\n\n                        // update spoofing\n                        this.setSpoofing(x, y);\n\n                        // seems like a special case, where the sector is never unloaded\n                        // but just moved. and it needs to be repositioned\n                        // for example, if sector 1,1 is needed very next, as -14,-14, and never unloads\n                        // we can just reinit\n                        if(this.is_loaded) this.terrain.initSector(this);\n                    }\n                }\n            }\n        });\n\n        // am i needed?\n        if(this.is_needed) {\n\n            // well have i init?\n            if(!this.is_loaded) {\n\n                // am i at least trying?\n                if(!this.is_loading) {\n\n                    // start shit\n                    this.load();\n                }\n            }\n        } else {\n            // im not needed, but im loaded? wtf?\n            if(this.is_loaded || this.has_init) {\n                this.terrain.unloadSector(this);\n            }\n        }\n    }\n\n    getSurroundingCoords(x, y, radius) {\n        // populate this shit with the sectors we need to load\n        var area = [];\n\n        // what type of grid are we making around the player\n        if(!radius) radius = 3;\n\n        // figure shit out\n        for(var i=0; i<radius; i++) {\n\n            var _x = i + x - Math.floor(radius / 2);\n\n            for(var j=0; j<radius; j++) {\n\n                var _y = j + y - Math.floor(radius / 2);\n                var coords = {x: _x, y: _y};\n\n                area.push(coords);\n            }\n        }\n\n        return area;\n    }\n\n    getHeightMapValueAt(x, z, filter_passes) {\n        if(typeof this.heightmap == \"undefined\") return false;\n        if(!filter_passes) filter_passes = 0;\n\n        // get the grid coords, aka location on the map image per pixel, of our x,z\n        var grid_coords = this.terrain.getGridCoordsAt(x, z);\n\n        // how many times will we average the surrounding pixels values into this ones\n        if(filter_passes > 0) {\n            // var surrounding = this.getSurroundingCoords(x, z, 5);\n            //\n            // var total = 0;\n            // var count = 0;\n            //\n            // for(var i=0; i<filter_passes; i++) {\n            //     for(var j=0; j<surrounding.length; j++) {\n            //\n            //         var coords = surrounding[ j ];\n            //\n            //         if(coords.x == parseInt(coords.x, 10) && coords.y == parseInt(coords.y, 10)) {\n            //\n            //             total += this.getHeightMapValueAt(coords.x, coords.y);\n            //             count++;\n            //\n            //         }\n            //     }\n            // }\n\n\n            var total = 0;\n            var count = 0;\n\n            for(var i=0; i<filter_passes; i++) {\n                var heights = [];\n                for(var _z=0; _z<2; _z++) {\n                    for(var _x=0; _x<2; _x++) {\n                        var coords = {x: grid_coords.x + _x, z: grid_coords.y + _z};\n\n                        if (coords.x == parseInt(coords.x, 10) && coords.z == parseInt(coords.z, 10)) {\n                            var val = this.getPixelValueAt(coords.x, coords.z);\n\n                            heights.push(val);\n\n                            // console.log(\"FILTER COORDS: \", coords, val);\n                            // total += val;\n                            // count++;\n\n                        }\n                    }\n                }\n\n\n                var max = Math.max.apply(Math, heights);\n                var min = Math.min.apply(Math, heights);\n\n                for(var j=0; j<heights.length; j++) {\n\n                    var h = heights[j];\n\n                    if (h == min && h !== max) continue;\n                    if (h == max && h !== min) {\n                        //total += h;\n                    }\n\n                    total += h;\n                    count++;\n                }\n\n            }\n\n            console.log(\"Done filtering.. total:\", total, \" count:\", count);\n\n            var map_value = parseFloat(total / count);\n        } else {\n            var map_value = this.getPixelValueAt(grid_coords.x, grid_coords.y);\n        }\n\n\n        //mcec.log(\"Terrain (\" + this.id() + \") -> getHeightMapValueAt(\" + x + \", \" +  z + \") = [ heightmap coords: \" + grid_coords.x + \", \" + grid_coords.y + \" ] = \" + map_value);\n\n        return map_value;\n    }\n\n    getPixelValueAt(x, y) {\n        //console.log(\"EVIDENCE5: \" + this.heightmap[14356]);\n\n        // get the pixel value for our grid coords\n        var pixel = (y * this.data_size[0]) + x;\n\n        // the actual height (y coord) we are looking for\n        var map_value = this.heightmap[ pixel ];\n\n        //console.log(\"pixelValueAt(\" + x + \", \" + y + \") [\" + pixel + \"] = \" + map_value);\n\n        return map_value;\n    }\n\n    getY(x, z, ref_y) {\n        if(this.is_loaded == false) return false;\n\n        var self = this;\n\n        if(!ref_y) ref_y = 100;\n\n        // grab the click face, offset it\n        var geom = this.terrain.getFaceFromPosition(x, z, true);\n        var p = new THREE.Vector3(x, ref_y, z).clone().sub(this.mesh.position);\n\n        // click face geometry and normals\n        var face = geom.faces[0];\n        var normal = face.normal;\n\n        // vertices\n        var va = geom.vertices[face.a];\n        var vb = geom.vertices[face.b];\n        var vc = geom.vertices[face.c];\n\n        // dot\n        var pd = normal.dot(p.clone().sub(va));\n\n        // move p -(pd - td) units in the direction of the normal\n        var proj = p.clone().sub(normal.clone().multiplyScalar(pd));\n\n        // closest point of proj and the triangle\n        var cp = this.terrain.closestPointToTriangle(proj, va, vb, vc);\n\n        // move our point\n        //self.point.position.copy(cp).add(this.mesh.position);\n\n        return cp.y;\n    }\n\n    getYRaycast(x, z) {\n        if (!this.isMeshLoaded()) return;\n\n        // should already be done\n        if(typeof  this.model.geometry !== \"undefined\") {\n            this.model.geometry.computeBoundingBox();\n            // use the height for the ray so we dont waste time putting it to 1k or some shit\n            var height = this.model.geometry.boundingBox.max.y * this.model.scale.y;} else {\n            var height = this.scene.world.terrain.max_height;\n        }\n\n        console.log(\"GETY(): HEIGHT: \" + height);\n\n        var raycaster = new THREE.Raycaster();\n        raycaster.ray.direction.set( 0, -1, 0 );\n        raycaster.ray.origin.set(x, height, z);\n\n        // var mouse = new THREE.Vector2(x, z);\n        // var intersect = this.gpuPicker.pick(mouse, raycaster);\n\n        //return intersect;\n\n        //\n\n        var hits = raycaster.intersectObject( this.terrain.getCurrentSector().mesh );\n        var hits_filtered = [];\n\n        if( ( hits.length > 0 ) ) {\n            for(var i=0; i<hits.length; i++) {\n                //if(hits[i].object.name == this.name) {\n                console.log(hits[i]);\n                var offset = height - hits[i].distance;\n                console.log(offset);\n                return offset + hits[i].face.normal.y;\n                return (hits[i].point.y);//distance);\n                //}\n            }\n\n        }\n\n        return false;\n    }\n\n    computeFaceCentroids( geometry ) {\n\n        var f, fl, face;\n\n        for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n            face = geometry.faces[ f ];\n            face.centroid = new THREE.Vector3( 0, 0, 0 );\n\n            if ( face instanceof THREE.Face3 ) {\n\n                face.centroid.add( geometry.vertices[ face.a ] );\n                face.centroid.add( geometry.vertices[ face.b ] );\n                face.centroid.add( geometry.vertices[ face.c ] );\n                face.centroid.divideScalar( 3 );\n\n            } else if ( face instanceof THREE.Face4 ) {\n\n                face.centroid.add( geometry.vertices[ face.a ] );\n                face.centroid.add( geometry.vertices[ face.b ] );\n                face.centroid.add( geometry.vertices[ face.c ] );\n                face.centroid.add( geometry.vertices[ face.d ] );\n                face.centroid.divideScalar( 4 );\n\n            }\n\n        }\n\n    }\n\n    // converted from c++\n    intersectTriangle (pt, dir, tri) {\n\n        var EPSILON = 0.000001;\n        var edge1 = tri[1].sub(tri[0]);\n        var edge2 = tri[2].sub(tri[0]);\n        var tvec = pt.sub(tri[0]);\n        var pvec = dir.cross(edge2);\n        var qvec = tvec.cross(edge1);\n        var output = new THREE.Vector3();\n\n        console.log(edge1, edge2, tvec, pvec, qvec);\n\n        var det = edge1.dot(pvec);\n        if (det < EPSILON) return null;\n\n        var u = tvec.dot(pvec);\n        if (u < 0 || u > det) return null;\n\n        var v = dir.dot(qvec);\n        if (v < 0 || u + v > det) return null;\n\n        var t = edge2.dot(qvec) / det;\n        output.x = pt.x + t * dir.x;\n        output.y = pt.y + t * dir.y;\n        output.z = pt.z + t * dir.z;\n\n        return output;\n    }\n\n}\n\nmodule.exports = terrain_tile;","// import ColladaLoader from \"../src/ColladaLoader.js\";\nvar mcec = require('../shared/mcec');\nvar io = require('../src/sockets');\n\nexport default class views {\n\tconstructor() {\n\t\tthis.submit_callbacks = [];\n\t}\n\n\t// load a view, call the callback\n\tload(name, callback) {\n        io.send('view', name, (html) => {\n\n        \tmcec.log(`Got HTML back for: ${name}`);\n\n        \thtml = this.processViewHTML(html);\n\n\t\t\tcallback(html);\n        });\n\n        return this;\n\t}\n\n\tclearBinds() {\n\t\tthis.submit_callbacks = [];\n\t}\n\n\tbindForm(id, callback) {\n\t\tif(typeof this.submit_callbacks[ id ] == \"undefined\") this.submit_callbacks[ id ] = [];\n\n\t\tthis.submit_callbacks[ id ].push(callback);\n\t}\n\n    captureFormSubmit(form) {\n\t\tvar form = $(form);\n\t\tvar frm = form.attr('id');\n\n        // check if its for us\n        if(frm.substr(0, 4) !== \"frm-\") return;\n\n        // trim the id\n\t\tvar id = frm.substr(4);\n\n\t\t$('body').off('submit', '#' + frm);\n        $('body').on('submit', '#' + frm, (e) => {\n\t\t\tthis.handleFormSubmit(id, e);\n\t\t});\n\t}\n\n\thandleFormSubmit(id, e) {\n\t\tmcec.log(\"Form #\" + id + \" was submitted\");\n\n\t\t// this is ours to handle\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tif(typeof this.submit_callbacks[ id ] == \"undefined\") return;\n\n\t\tvar form_data = $(e.target).serialize();\n\t\tvar form_els = [];\n\n\t\t$(e.target).find('input,select,textarea').each(function(i, el) {\n\t\t\tel = $(el);\n\t\t\tform_els[ el.attr('name') ] = el.val();\n\t\t});\n\n\t\tfor(var i in this.submit_callbacks[ id ]) {\n            this.submit_callbacks[ id ][ i ](form_data, form_els, e);\n\t\t}\n\t}\n\n\tprocessViewHTML(html) {\n        $(html).filter('form').each((i, form) => {\n\t\t\tthis.captureFormSubmit(form);\n\t\t});\n\n\t\treturn html;\n\t}\n}\nmodule.exports = new views();","import baseModel from '../src/basemodel';\nimport CSS3DObject from '../js/renderers/CSS3DRenderer.js';\n\nclass webview extends baseModel {\n    constructor(scene, url, overrides) {\n\n        var options = {\n            scale: 1,\n            url: url,\n            // skinning: true,\n            // morph_targets: true,\n            // morph_normals: true,\n            // enhance: true,\n            // shininess: 0,\n            //skinning: true,\n            //offset: {y: -145},\n            // mass: 1,\n            // position: {x: 705, y: 15.15, z: 321},\n        };\n\n        super(scene, \"webview\", Object.assign(options, overrides));\n\n        this.scene = scene;\n\n    }\n\n    load(callback) {\n        var width = this.options.width || 500;\n        var height = this.options.height || 500;\n\n        // create the div to hold our iframe\n        var div = document.createElement( 'div' );\n        div.style.width = width + 'px';\n        div.style.height = height + 'px';\n        div.style.backgroundColor = '#000';\n\n        // create the iframe to hold our webpage\n        var iframe = document.createElement( 'iframe' );\n        iframe.style.width = width + 'px';\n        iframe.style.height = height + 'px';\n        iframe.style.border = '0px';\n        iframe.src = this.options.url;\n\n        // add the iframe to the div\n        div.appendChild( iframe );\n\n        var div2 = document.createElement('div');\n        div2.innerHTML = 'Plain text inside a div.';\n        div2.className = 'animated bounceInDown' ;\n        div2.style.background = \"#0094ff\";\n        div2.style.fontSize = \"2em\";\n        div2.style.color = \"white\";\n        div2.style.padding = \"2em\";\n\n        // add the div to a new CSS 3D Object\n        var object = new THREE.CSS3DObject( div );\n\n        // create renderer\n        this.renderer = new THREE.CSS3DRenderer();\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        this.renderer.domElement.style.position = 'absolute';\n        this.renderer.domElement.style.top = 0;\n\n        // add it to page\n        document.body.appendChild( this.renderer.domElement );\n\n        // create scene\n        this.render_scene = new THREE.Scene();\n\n        // add our object to our render scene\n        this.scene.css_scene.add(object);\n\n        callback();\n    }\n\n    update() {\n        //this.renderer.render(this.render_scene, this.scene.getCamera());\n    }\n}\n\nmodule.exports = webview;","import baseModel from '../src/basemodel';\nimport terrain from '../src/terrain';\nimport webview from '../src/webview';\n//var terrain = require('../src/terrain');\nvar shaders = require('../src/shaders');\nvar io = require('../src/sockets');\n\nclass world extends baseModel {\n\n    constructor(scene, id) {\n\n        var options = {\n            name: 'platform'\n        };\n\n        super(scene, 'platform', options);\n\n        // shit that ammojs will keep track of as an object in the world with gravity and shit\n        this.dynamic_objects = [];\n\n        //this.transform_aux = new Ammo.btTransform();\n        this.mouse = new THREE.Vector2();\n\n        // init shaders\n        this.shaders = new shaders(scene);\n\n        // lets do this\n        this.terrain = new terrain(scene, this);\n    }\n\n    createObjectMaterial() {\n        var c = Math.floor( Math.random() * ( 1 << 24 ) );\n        return new THREE.MeshPhongMaterial( { color: c } );\n    }\n\n    init() {\n        mcec.log(\"Set world model\");\n\n        // so clicks work\n        this.setClickMesh();\n\n        // so water works\n        //this.scene.setWater();\n\n        // init physics\n        // this.initPhysics();\n\n\n\n\n\n        //this.spawnBall(0,300,0);\n\n        //\n        // // instantiate a loader\n        // var loader = new THREE.ImageLoader();\n        // var me = this;\n        //\n        // function getHeightData(img) {\n        //     var canvas = document.createElement('canvas');\n        //     canvas.width = 2048 / 8;\n        //     canvas.height = 2048 / 8;\n        //     var context = canvas.getContext('2d');\n        //\n        //     var size = 2048 / 8 * 2048 / 8,\n        //         data = new Float32Array(size);\n        //\n        //     context.drawImage(img, 0, 0);\n        //\n        //     for (var i = 0; i < size; i++) {\n        //         data[i] = 0\n        //     }\n        //\n        //     var imgd = context.getImageData(0, 0, 2048 / 8, 2048 / 8);\n        //     var pix = imgd.data;\n        //\n        //     var j = 0;\n        //     for (var i = 0, n = pix.length; i < n; i += (4)) {\n        //         var all = pix[i] + pix[i + 1] + pix[i + 2];\n        //         data[j++] = all / 40;\n        //     }\n        //\n        //     return data;\n        // }\n        //\n        // // load a image resource\n        // loader.load(\n        //     // resource URL\n        //     'shared/planet.jpg',\n        //     // Function when resource is loaded\n        //     function ( image ) {\n        //         var data = getHeightData(image);\n        //\n        //         console.log(data);\n        //\n        //         var terrainG = new THREE.PlaneBufferGeometry(700, 700, 100 - 1, 100 - 1);\n        //         terrainG.rotateX(-Math.PI / 2);\n        //\n        //         var vertices = terrainG.attributes.position.array;\n        //\n        //         for (var i = 0, j = 0, l = vertices.length; i < l; i++, j += 3) {\n        //             vertices[j + 1] = data[i] * 5;\n        //         }\n        //\n        //         terrainG.computeFaceNormals();\n        //         terrainG.computeVertexNormals();\n        //\n        //         var material = new THREE.MeshLambertMaterial({\n        //             //side: THREE.DoubleSide,\n        //             color: 0xffffff,\n        //             transparent: false,\n        //         });\n        //\n        //         var terrain = new THREE.Mesh(terrainG, material);\n        //         terrain.receiveShadow = true;\n        //         terrain.castShadow = true;\n        //         terrain.position.y = 0;\n        //         me.add(terrain);\n        //\n        //         // var xS = 63, yS = 63;\n        //         // var terrainScene = THREE.Terrain({\n        //         //     easing: THREE.Terrain.Linear,\n        //         //     frequency: 2.5,\n        //         //     heightmap: canvas,\n        //         //     material: new THREE.MeshBasicMaterial({color: 0x5566aa}),\n        //         //     maxHeight: 20,\n        //         //     minHeight: -100,\n        //         //     steps: 1,\n        //         //     useBufferGeometry: false,\n        //         //     xSegments: xS,\n        //         //     xSize: 1024,\n        //         //     ySegments: yS,\n        //         //     ySize: 1024,\n        //         // });\n        //         //\n        //         // me.add(terrainScene);\n        //     }\n        // );\n        //\n\n\n\n\n\n\n    }\n\n    spawnBall(vec) {\n        var threeObject = null;\n        var shape = null;\n        var objectSize = 13;\n        var margin = 0.05;\n\n        var radius = 1 + Math.random() * objectSize;\n        var threeObject = new THREE.Mesh( new THREE.SphereGeometry( radius, 20, 20 ), this.createObjectMaterial() );\n        var shape = new Ammo.btSphereShape( radius );\n        shape.setMargin( margin );\n\n        threeObject.position.copy(vec);\n\n        var mass = objectSize * 50;\n        var localInertia = new Ammo.btVector3( 0, 0, 0 );\n        shape.calculateLocalInertia( mass, localInertia );\n\n        var transform = new Ammo.btTransform();\n        transform.setIdentity();\n        var pos = threeObject.position;\n        transform.setOrigin( new Ammo.btVector3( pos.x, pos.y, pos.z ) );\n\n        var motionState = new Ammo.btDefaultMotionState( transform );\n        var rbInfo = new Ammo.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n        var body = new Ammo.btRigidBody( rbInfo );\n\n        threeObject.userData.physicsBody = body;\n\n        this.scene.add( threeObject );\n        this.dynamic_objects.push( threeObject );\n        this.physics_world.addRigidBody( body );\n    }\n\n    // this will be called to load a mesh when a filename isnt specified in the constructor\n    // scene wont render until the callback is called with the mesh\n    load(callback) {\n        var self = this;\n\n        // texture used to generate \"bumpiness\"\n        var bumpTexture = new THREE.ImageUtils.loadTexture( 'shared/world.png' );\n        bumpTexture.wrapS = bumpTexture.wrapT = THREE.RepeatWrapping;\n\n        var oceanTexture = new THREE.ImageUtils.loadTexture( 'textures/dirt-512.jpg' );\n        oceanTexture.wrapS = oceanTexture.wrapT = THREE.RepeatWrapping;\n\n        var sandyTexture = new THREE.ImageUtils.loadTexture( 'textures/sand-512.jpg' );\n        sandyTexture.wrapS = sandyTexture.wrapT = THREE.RepeatWrapping;\n\n        var grassTexture = new THREE.ImageUtils.loadTexture( 'textures/grass-512.jpg' );\n        grassTexture.wrapS = grassTexture.wrapT = THREE.RepeatWrapping;\n\n        var rockyTexture = new THREE.ImageUtils.loadTexture( 'textures/rock-512.jpg' );\n        rockyTexture.wrapS = rockyTexture.wrapT = THREE.RepeatWrapping;\n\n        var snowyTexture = new THREE.ImageUtils.loadTexture( 'textures/snow-512.jpg' );\n        snowyTexture.wrapS = snowyTexture.wrapT = THREE.RepeatWrapping;\n\n        console.log(this.scene.fog);\n\n        // use \"this.\" to create global object\n        this.shaders.setUniforms('terrain', {\n            bumpTexture:\t{ type: \"t\", value: bumpTexture },\n            bumpScale:\t    { type: \"f\", value: 1 },\n            oceanTexture:\t{ type: \"t\", value: oceanTexture },\n            sandyTexture:\t{ type: \"t\", value: sandyTexture },\n            grassTexture:\t{ type: \"t\", value: grassTexture },\n            rockyTexture:\t{ type: \"t\", value: rockyTexture },\n            snowyTexture:\t{ type: \"t\", value: snowyTexture },\n            fogColor:    { type: \"c\", value: this.scene.fog.color },\n            fogNear:     { type: \"f\", value: this.scene.fog.near },\n            fogFar:      { type: \"f\", value: this.scene.fog.far }\n        });\n\n        // create custom material from the shader code above\n        //   that is within specially labelled script tags\n        this.terrainMaterial = this.shaders.getShaderMaterial('terrain');\n        this.terrainMaterial.needsUpdate = true;\n\n\n\n        var size = (this.terrain_width * this.terrain_height) * 4;\n        var geometry = new THREE.PlaneBufferGeometry( this.height, this.width, this.terrain_height-1, this.terrain_width-1 );\n        //geometry.dynamic = true;\n        // geometry.verticesNeedUpdate = true;\n        // geometry.elementsNeedUpdate = true;\n        // geometry.morphTargetsNeedUpdate = true;\n        // geometry.uvsNeedUpdate = true;\n        // geometry.normalsNeedUpdate = true;\n        // geometry.colorsNeedUpdate = true;\n        // geometry.tangentsNeedUpdate = true;\n        //\n        // geometry.computeFaceNormals();\n        // geometry.computeVertexNormals();\n        //\n        // geometry.computeBoundingBox();\n        // geometry.computeBoundingSphere();\n        geometry.rotateX( - Math.PI / 2 );\n\n        //var plane = new THREE.Mesh(\tgeometry, customMaterial );\n\n        //plane.rotation.x = -Math.PI / 2;\n        //plane.position.y = this.bump_scale / 2;\n\n        //for GETY()\n        // var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };\n        // this.heightMap = new THREE.WebGLRenderTarget( this.terrain_width, this.terrain_height, pars);\n        //\n        // this.tmpData = new Float32Array(size);\n        // this.bump_texture = bumpTexture;\n        //\n        //\n        // plane.updateMatrix();\n        //\n        // water\n        // var waterGeo = new THREE.PlaneGeometry( self.height, self.width, 1, 1 );\n        // var waterTex = new THREE.ImageUtils.loadTexture( 'textures/water-512.jpg' );\n        //\n        // waterTex.wrapS = waterTex.wrapT = THREE.RepeatWrapping;\n        // waterTex.repeat.set(5,5);\n        //\n        // var waterMat = new THREE.MeshBasicMaterial( {map: waterTex, transparent:true, opacity:0.40} );\n        // self.water2 = new THREE.Mesh(\twaterGeo, waterMat );\n        //\n        // self.water2.rotation.x = -Math.PI / 2;\n        // self.water2.position.y = 30;\n        //\n        // this.scene.add(self.water2);\n        //\n        // var new_mesh = plane.clone();\n        //\n        // return new_mesh;\n\n        this.terrain.load(callback);\n\n\n        // this.getHeightDataFromImage(bumpTexture.image, function(data) {\n        //\n        //     self.heightmap = data;\n        //\n        //\n        //     //console.log(\"HEIGHT MAP:\", self.heightmap);\n        //\n        //     var min = 0, max = 0;\n        //\n        //     for(var i=0; i<self.heightmap.length; i++) {\n        //\n        //         var val = self.heightmap[i];\n        //\n        //         if(min == 0) min = val;\n        //         if(val > max) max = val;\n        //         if(val < min) min = val;\n        //\n        //     }\n        //\n        //     console.log(\"MIN:\", min);\n        //     console.log(\"MAX:\", max);\n        //\n        //     self.heightmap = self.BoxFilterHeightMap(self.terrain_width, self.terrain_height, self.heightmap, true, 5);\n        //\n        //     var mesh = self.heightDataToMesh(self.heightmap);\n        //\n        //     callback(mesh);\n        //\n        //     //console.log(\"WORLD PHYSICS\");\n        //\n        //     //mesh.scale.set(1000,1000,1000);\n        //     //mesh.position.y = -5;\n        //\n        // });\n\n    }\n\n    getHeightAt(x, z, apply_modifier) {\n\n        x = parseInt(x);\n        z = parseInt(z);\n\n        // height = 5\n        // width = 5\n        //\n        var i = ((z) * this.canvas.height) + x;\n        //\n        // x = 3\n        // y = 2\n        //\n        // result = 13\n        //\n        //     - - - - -\n        //         - - - - -\n        //             - - - x -\n        //     - - - - -\n        //         - - - - -\n\n        var height = this.pixel_heights[ i ];\n\n        console.log(\"HEIGHT IS:\", + height);\n\n        return height;\n    }\n\n    imageToMesh(image) {\n        // -------------------------------------\n        // Image\n        var depth = 1000;\n        var width = 1000;\n        var spacingX = 1;\n        var spacingZ = 1;\n        var heightOffset = 100;\n        var canvas = document.createElement('canvas');\n        canvas.width = 512;\n        canvas.height = 512;\n        var ctx = canvas.getContext('2d');\n        var img = new Image();\n        var me = this;\n        //img.src = image; // The image will not load in codepen.io, and that's why you don't see the mesh.\n\n        /*img.onload = function () {\n\n            // Vertices\n            ctx.drawImage(img, 512, 512);\n            var pixel = ctx.getImageData(0, 0, width, depth);\n            var geom = new THREE.Geometry();\n            var output = [];\n            for (var x = 0; x < depth; x++) {\n                for (var z = 0; z < width; z++) {\n                    var yValue = pixel.data[z * 4 + (depth * x * 4)] / heightOffset;\n                    var vertex = new THREE.Vector3(x * spacingX, yValue, z * spacingZ);\n                    geom.vertices.push(vertex);\n                }\n            }\n\n            // Faces\n            for (var p = 0; p < depth - 1; p++) {\n                for (var h = 0; h < width - 1; h++) {\n                    var a = h + p * width;\n                    var b = (h + 1) + (p * width);\n                    var c = h + ((p + 1) * width);\n                    var d = (h + 1) + ((p + 1) * width);\n                    var face1 = new THREE.Face3(a, b, d);\n                    var face2 = new THREE.Face3(d, c, a);\n                    geom.faces.push(face1);\n                    geom.faces.push(face2);\n                }\n            }\n\n            geom.computeVertexNormals(true);\n            geom.computeFaceNormals();\n\n            var mesh = new THREE.Mesh(geom, new THREE.MeshLambertMaterial({\n                color: 0x98dafc,\n                shading: THREE.SmoothShading\n            }));\n\n            mesh.position.set(-257, 0, -257);\n            mesh.receiveShadow = true;\n\n            me.add(mesh);\n\n        };*/\n    }\n\n    addTerrainMesh(geometry, scale, x, y, z, rx, ry, rz, material) {\n        mesh = new THREE.Mesh( geometry, material );\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = scale;\n        mesh.position.x = x;\n        mesh.position.y = y;\n        mesh.position.z = z;\n        mesh.rotation.x = rx;\n        mesh.rotation.y = ry;\n        mesh.rotation.z = rz;\n        mesh.overdraw = true;\n        mesh.doubleSided = false;\n\n        mesh.updateMatrix();\n        this.add(mesh);\n\n        return mesh;\n    }\n\n    click(x, y, z, intersection) {\n        //this.placeMarker(x, y, z);\n        mcec.log(\"Terrain click\");\n        //console.log(intersection, x, y, z);\n\n        // todo: move this to the appropriate socket related location\n\n        io.send('walk_request', {x: x, y: y, z: z}, (can_walk, adjusted_pos) => {\n\n            if(!can_walk) return;\n\n            this.scene.getMyPlayer().walkTo(adjusted_pos.x, adjusted_pos.y, adjusted_pos.z);\n\n            // get the face normal in object space\n            var vec = intersection.face.normal.clone();\n\n            // the cone points up\n            var up = new THREE.Vector3( 0, 1, 0 );\n\n            if ( vec.y == 1 || vec.y == -1 ) {\n                var axis = new THREE.Vector3( 1, 0, 0 ).normalize();\n            } else {\n                var axis = new THREE.Vector3().crossVectors(up, vec).normalize();\n            }\n\n            // determine the amount to rotate\n            var radians = Math.acos(up.dot(vec));\n\n            // do shit\n            var mat = new THREE.Matrix4();\n            mat.makeRotationAxis(axis, radians);\n\n            // set rotation\n            this.clickMesh.rotation.copy(new THREE.Euler().setFromRotationMatrix(mat));\n            this.clickMesh.position.set(x, y, z);\n            this.clickMesh.material.side = THREE.DoubleSide;\n\n            this.clickMesh.material.opacity = this.clickMeshMaxOpacity;\n            this.clickMesh.visible = true;\n        });\n    }\n\n    mouse_move(e) {\n        if(e.which != 0)\n            return;\n\n        this.scene.mouse.x = e.clientX;\n        this.scene.mouse.y = e.clientY;\n\n        // this.scene.gpuPicker.needUpdate = true;\n    }\n\n    pickMouse() {\n        var mouse3D = new THREE.Vector3( ( this.scene.mouse.x / window.innerWidth ) * 2 - 1, -( this.scene.mouse.y / window.innerHeight ) * 2 + 1, 0.5 );\n        var raycaster =  new THREE.Raycaster();\n\n        raycaster.setFromCamera( mouse3D, this.scene.getCamera() );\n\n        var hits = raycaster.intersectObjects( this.scene.hitboxes );\n\n        if(hits.length > 0) {\n\n            var hit = hits[0];\n            var parent = hit.object.parent;\n            var model = this.scene.models.get(parent);\n\n            if(model) {\n\n                var username = model.user_info.username;\n\n                mcec.log(\"Mouse over player:\", username);\n\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    update(delta) {\n        //if(this.clickMesh.material.opacity > 0) this.clickMesh.material.opacity -= 0.1;\n\n        if(typeof this.last_pick == \"undefined\") this.last_pick = 0;\n        var time = Date.now();\n\n        if(time - this.last_pick > 100) {\n            this.pickMouse();\n            this.last_pick = time;\n        }\n\n\n        this.terrain.update(delta);\n    }\n\n    getZ (x, z) {\n\n        //this.div = obj.div || [256,256];\n        //this.div = obj.div || [512,512];\n        //this.size = obj.size || [50, 10, 50];\n\n\n\n\n\n        this.update();\n\n        var colx = Math.floor((x / this.width + .5) * ( this.terrain_width));\n        var colz = Math.floor((-z / this.height + .5) * ( this.terrain_height));\n\n\n        var pixel = Math.floor(((colz - 1) * this.terrain_width) + colx) * 4;\n\n\n        var result = (this.tmpData[pixel + 0]\n                    + this.tmpData[pixel + 1]\n                    + this.tmpData[pixel + 2])\n                    * this.ratio;\n\n        return result;\n    }\n\n    getY (x, z) {\n        //if (!this.isMeshLoaded()) return;\n\n        //return this.getYRaycast(x, z);\n        return this.terrain.getY(x, z, this.scene.getMyPlayer().model.position.y);\n    }\n\n    getYRaycast (x, z) {\n        if (!this.isMeshLoaded()) return;\n\n        // should already be done\n        if(typeof  this.model.geometry !== \"undefined\") {\n            this.model.geometry.computeBoundingBox();\n            // use the height for the ray so we dont waste time putting it to 1k or some shit\n            var height = this.model.geometry.boundingBox.max.y * this.model.scale.y;\n        } else {\n            var height = this.scene.world.terrain.max_height;\n        }\n        height = this.terrain.getY(x, z)+0.5;\n\n        console.log(\"GETY(): HEIGHT: \" + height);\n\n        var raycaster = new THREE.Raycaster();\n        raycaster.ray.direction.set( 0, -1, 0 );\n        raycaster.ray.origin.set(x, height, z);\n\n        // var mouse = new THREE.Vector2(x, z);\n        // var intersect = this.gpuPicker.pick(mouse, raycaster);\n\n        //return intersect;\n\n        //\n\n        var hits = raycaster.intersectObject( this.terrain.getSectorFromPosition(x, z).mesh );\n        var hits_filtered = [];\n\n        if( ( hits.length > 0 ) ) {\n            for(var i=0; i<hits.length; i++) {\n                //if(hits[i].object.name == this.name) {\n                console.log(hits[i]);\n                var offset = height - hits[i].distance;\n                console.log(offset);\n                //return offset + hits[i].face.normal.y;\n                    return (hits[i].point.y);//distance);\n                //}\n            }\n\n        }\n\n        return false;\n    }\n\n    getY2 (x, z) {\n        //return this.getHeightAt(x, z, true);\n        console.log(\"GETY: START\");\n        var max_y = 1500;\n        var min_y = -500;\n        var chunk = 1000;\n        var raycaster = new THREE.Raycaster(new THREE.Vector3(x, max_y, z), new THREE.Vector3(0, -1, 0), 0, chunk);\n        var platform = this.scene.world.model; //scene.get().getObjectByName(\"platform\", true);\n\n        var y = max_y;\n        while(y >= min_y) {\n\n            //console.log(\"TESTING: \" + y);\n\n            var hits = raycaster.intersectObject(platform, false);\n            //if(hits.length > 0) console.log(hits);\n            if ((hits.length > 0)) { //&& (hits[0].face.normal.y > 0)\n                var result = y + (hits[0].face.normal.y - (hits[0].distance));\n                console.log(\"GETY: \" + result);\n                return result;\n            }\n\n            y -= chunk;\n\n            raycaster.ray.origin.y = y;\n        }\n\n        return false;\n    }\n\n    getYOld(x, z) {\n\n        var max_y = 2000;\n        var min_y = -1000;\n        var chunk = 10;\n\n        var y = max_y;\n        while(y >= min_y) {\n\n            var origin = new THREE.Vector3(x, y + chunk, z);\n            var direction = new THREE.Vector3(x, y - 10, z);\n\n            //origin.normalize();\n            //direction.normalize();\n\n            var rc = new THREE.Raycaster(origin, direction);\n\n            try {\n                var where = rc.intersectObject(this.model);\n\n                if (where.length > 0) {\n                    console.log(where);\n                    return where[0].point.y;\n                }\n            } catch(e) {\n\n            }\n\n            y -= chunk;\n        }\n\n        return false;\n    }\n\n    clearClickMesh() {\n        this.clickMesh.visible = false;\n    }\n\n    setClickMesh() {\n        // custom png material\n        //var texture = this.scene.models.getTexture('click_good');\n        //var material = new THREE.MeshPhongMaterial({map: texture, color: 0xFFFFFF, transparent: true, opacity: 0.75});\n\n        // basic yellow material\n        var material = new THREE.MeshBasicMaterial({color: 0xFFF300, transparent: true, opacity: 0.3});\n\n        // create mesh\n        //var mesh = new THREE.Mesh(new THREE.BoxGeometry(20, 0.2, 20), material);\n        var mesh = new THREE.Mesh(new THREE.CylinderGeometry(10, 10, 0.3, 20, 0), material);\n\n        this.clickMeshMaxOpacity = material.opacity;\n\n        this.clickMesh = mesh;\n        this.clickMesh.name = \"click_mesh\";\n        this.clickMesh.material.opacity = 0;\n\n        var scale = 0.8;\n\n        this.clickMesh.scale.set(scale, scale, scale);\n        this.clickMesh.visible = false;\n\n        // add to scene\n        this.scene.add(this.clickMesh);\n    }\n\n    getMaterial (img) {\n        var material = new THREE.MeshBasicMaterial( { map: new THREE.Texture(null, THREE.UVMapping, THREE.RepeatWrapping, THREE.RepeatWrapping), ambient: 0xaaaaaa, specular: 0xffffff, shininess: 0, shading: THREE.SmoothShading } );\n\n        return material;\n    }\n\n    initPhysics() {\n\n        console.log(\"WORLD PHYSICS\");\n\n        this.collision_config = new Ammo.btDefaultCollisionConfiguration();\n        this.dispatcher = new Ammo.btCollisionDispatcher( this.collision_config );\n        this.broadphase = new Ammo.btDbvtBroadphase();\n        this.solver = new Ammo.btSequentialImpulseConstraintSolver();\n        this.physics_world = new Ammo.btDiscreteDynamicsWorld( this.dispatcher, this.broadphase, this.solver, this.collision_config );\n        this.physics_world.setGravity( new Ammo.btVector3( 0, -9.82, 0 ) );\n\n\n\n\n        // Create the terrain body\n        //this.model.scale.set(5,5,5);\n        this.shape = this.createTerrainShape( this.heightmap );\n\n        var groundTransform = new Ammo.btTransform();\n        groundTransform.setIdentity();\n\n        // Shifts the terrain, since bullet re-centers it on its bounding box.\n        groundTransform.setOrigin( new Ammo.btVector3( 0, ((((this.terrain_max_height + this.terrain_min_height)) * this.model.scale.y) / 2), 0 ) );\n\n        var groundMass = 0;\n        var groundLocalInertia = new Ammo.btVector3( 0, 0, 0 );\n        var groundMotionState = new Ammo.btDefaultMotionState( groundTransform );\n        var groundBody = new Ammo.btRigidBody( new Ammo.btRigidBodyConstructionInfo( groundMass, groundMotionState, this.shape, groundLocalInertia ) );\n        this.physics_world.addRigidBody( groundBody );\n    }\n\n\n\n    testGetY(num) {\n\n        if(!num) num = 500;\n\n        console.time('testGetY');\n\n        for (var i = 0; i < num; ++i) {\n\n            var x = mcec.random(-500,500);\n            var y = mcec.random(-500,500);\n\n            var junk = this.getY(x,y);\n            console.log(\"COORDS: x: \", x, \", y: \", y);\n\n        }\n\n        console.timeEnd('testGetY');\n\n        console.time('testGPUGetY');\n\n        for (var i = 0; i < num; ++i) {\n\n            var x = mcec.random(0,500);\n            var y = mcec.random(0,500);\n\n            var junk = this.terrain.getY(x,y);\n            console.log(\"COORDS: x: \", x, \", y: \", y);\n\n        }\n\n        console.timeEnd('testGPUGetY');\n\n    }\n\n    spawnRobots(num) {\n        if(!num) num = 15;\n        // add another player for some fun\n        mcec.log(\"TRYING TO ADD NPCS\");\n\n        for(var i=0; i<num; i++) {\n\n            var x = mcec.random(1,15);\n            var z = mcec.random(1,15);\n\n            x += this.scene.getMyPlayer().position.x;\n            z += this.scene.getMyPlayer().position.z;\n\n            this.scene.players.addPlayer(\"Player #\" + (i+1), {npc: true, position: {x: x, z: z, y: 150}});\n\n        }\n    }\n\n    spawnWebview(url, w, h, x, y, z) {\n\n        if(!w) w = 500;\n        if(!h) h = 500;\n        if(!x) x = this.scene.getMyPlayer().position.x;\n        if(!y) y = this.scene.getMyPlayer().position.y;\n        if(!z) z = this.scene.getMyPlayer().position.z;\n        if(!url) url = \"/login.html\";\n\n        this.webview = new webview(this.scene, url, {\n                                            width: w,\n                                            height: h,\n                                            position: {x: x, y: y, z: z}\n                                         });\n\n    }\n\n    updatePhysics(deltaTime) {\n        if(typeof this.physics_world !== \"undefined\") this.physics_world.stepSimulation( deltaTime, 10 );\n\n        // Update objects\n        for ( var i = 0, il = this.dynamic_objects.length; i < il; i++ ) {\n\n            var obj = this.dynamic_objects[ i ];\n\n            var body = obj.getModel().userData.physicsBody;\n            var ms = body.getMotionState();\n\n            if ( ms ) {\n                ms.getWorldTransform( this.transform_aux );\n\n                var p = this.transform_aux.getOrigin();\n                var q = this.transform_aux.getRotation();\n\n\n                obj.physicsSetPosition( p.x(), p.y(), p.z() );\n                //obj.quaternion.set( q.x(), q.y(), q.z(), q.w() );\n            } else {\n                obj.physicsSetPosition();\n            }\n        }\n    }\n\n    addRigidBody( model ) {\n\n        var threeObject = model.getModel();\n        var mass = model.options.mass;\n\n        //threeObject.position.copy( pos );\n        //threeObject.quaternion.copy( quat );\n\n        var pos = threeObject.position.clone();\n        var quat = threeObject.quaternion.clone();\n\n        // make a box with our shit in it to check the size\n        var box = new THREE.Box3().setFromObject( threeObject );\n        var x = box.size().x;\n        var y = box.size().y;\n        var z = box.size().z;\n\n        // for later\n        model.size = box.size();\n        var cc = new Ammo.btKinematicCharacterController();\n\n        var transform = new Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin( new Ammo.btVector3( pos.x, pos.y, pos.z ) );\n        transform.setRotation( new Ammo.btQuaternion( quat.x, quat.y, quat.z, quat.w ) );\n\n        var motionState = new Ammo.btDefaultMotionState( transform );\n        var localInertia = new Ammo.btVector3( 0, 0, 0 );\n\n        var shape = new Ammo.btBoxShape( new Ammo.btVector3( (x * 0.5), (y * 0.5), (z * 0.5) ));\n        shape.setMargin( 0.05 );\n        shape.calculateLocalInertia( mass, localInertia );\n\n        //shape.setLocalScaling( new Ammo.btVector3( 0.25, 0.25, 0.25 ) );\n\n        var rbInfo = new Ammo.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n        var body = new Ammo.btRigidBody( rbInfo );\n\n        threeObject.userData.physicsBody = body;\n        //scene.add( threeObject );\n\n        if ( mass > 0 ) {\n            this.dynamic_objects.push( model );\n            // Disable deactivation\n            body.setActivationState( 4 );\n        }\n\n        this.physics_world.addRigidBody( body );\n    }\n\n\n\n}\n\nmodule.exports = world;\n\n\n","module.exports = after\n\nfunction after(count, callback, err_cb) {\n    var bail = false\n    err_cb = err_cb || noop\n    proxy.count = count\n\n    return (count === 0) ? callback() : proxy\n\n    function proxy(err, result) {\n        if (proxy.count <= 0) {\n            throw new Error('after called too many times')\n        }\n        --proxy.count\n\n        // after first error, rest are passed to err_cb\n        if (err) {\n            bail = true\n            callback(err)\n            // future error callbacks will go to error handler\n            callback = err_cb\n        } else if (proxy.count === 0 && !bail) {\n            callback(null, result)\n        }\n    }\n}\n\nfunction noop() {}\n","/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n","\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n","/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n","/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder = global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported = (function() {\n  try {\n    var a = new Blob(['hi']);\n    return a.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if Blob constructor supports ArrayBufferViews\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\n */\n\nvar blobSupportsArrayBufferView = blobSupported && (function() {\n  try {\n    var b = new Blob([new Uint8Array([1,2])]);\n    return b.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported = BlobBuilder\n  && BlobBuilder.prototype.append\n  && BlobBuilder.prototype.getBlob;\n\n/**\n * Helper function that maps ArrayBufferViews to ArrayBuffers\n * Used by BlobBuilder constructor and old browsers that didn't\n * support it in the Blob constructor.\n */\n\nfunction mapArrayBufferViews(ary) {\n  for (var i = 0; i < ary.length; i++) {\n    var chunk = ary[i];\n    if (chunk.buffer instanceof ArrayBuffer) {\n      var buf = chunk.buffer;\n\n      // if this is a subarray, make a copy so we only\n      // include the subarray region from the underlying buffer\n      if (chunk.byteLength !== buf.byteLength) {\n        var copy = new Uint8Array(chunk.byteLength);\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n        buf = copy.buffer;\n      }\n\n      ary[i] = buf;\n    }\n  }\n}\n\nfunction BlobBuilderConstructor(ary, options) {\n  options = options || {};\n\n  var bb = new BlobBuilder();\n  mapArrayBufferViews(ary);\n\n  for (var i = 0; i < ary.length; i++) {\n    bb.append(ary[i]);\n  }\n\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nfunction BlobConstructor(ary, options) {\n  mapArrayBufferViews(ary);\n  return new Blob(ary, options || {});\n};\n\nmodule.exports = (function() {\n  if (blobSupported) {\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n","","/**\n * Slice reference.\n */\n\nvar slice = [].slice;\n\n/**\n * Bind `obj` to `fn`.\n *\n * @param {Object} obj\n * @param {Function|String} fn or string\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(obj, fn){\n  if ('string' == typeof fn) fn = obj[fn];\n  if ('function' != typeof fn) throw new Error('bind() requires a function');\n  var args = slice.call(arguments, 2);\n  return function(){\n    return fn.apply(obj, args.concat(slice.call(arguments)));\n  }\n};\n","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","\nmodule.exports = function(a, b){\n  var fn = function(){};\n  fn.prototype = b.prototype;\n  a.prototype = new fn;\n  a.prototype.constructor = a;\n};","\nmodule.exports = require('./socket');\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser = require('engine.io-parser');\n","/**\n * Module dependencies.\n */\n\nvar transports = require('./transports/index');\nvar Emitter = require('component-emitter');\nvar debug = require('debug')('engine.io-client:socket');\nvar index = require('indexof');\nvar parser = require('engine.io-parser');\nvar parseuri = require('parseuri');\nvar parseqs = require('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (global.location && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.transportOptions = opts.transportOptions || {};\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // other options for Node.js client\n  var freeGlobal = typeof global === 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports/index');\nSocket.parser = require('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // per-transport options\n  var options = this.transportOptions[name] || {};\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    query: query,\n    socket: this,\n    agent: options.agent || this.agent,\n    hostname: options.hostname || this.hostname,\n    port: options.port || this.port,\n    secure: options.secure || this.secure,\n    path: options.path || this.path,\n    forceJSONP: options.forceJSONP || this.forceJSONP,\n    jsonp: options.jsonp || this.jsonp,\n    forceBase64: options.forceBase64 || this.forceBase64,\n    enablesXDR: options.enablesXDR || this.enablesXDR,\n    timestampRequests: options.timestampRequests || this.timestampRequests,\n    timestampParam: options.timestampParam || this.timestampParam,\n    policyPort: options.policyPort || this.policyPort,\n    pfx: options.pfx || this.pfx,\n    key: options.key || this.key,\n    passphrase: options.passphrase || this.passphrase,\n    cert: options.cert || this.cert,\n    ca: options.ca || this.ca,\n    ciphers: options.ciphers || this.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\n    extraHeaders: options.extraHeaders || this.extraHeaders,\n    forceNode: options.forceNode || this.forceNode,\n    localAddress: options.localAddress || this.localAddress,\n    requestTimeout: options.requestTimeout || this.requestTimeout,\n    protocols: options.protocols || void (0)\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(JSON.parse(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n","/**\n * Module dependencies.\n */\n\nvar parser = require('engine.io-parser');\nvar Emitter = require('component-emitter');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n  this.forceNode = opts.forceNode;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n  this.localAddress = opts.localAddress;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open = function () {\n  if ('closed' === this.readyState || '' === this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send = function (packets) {\n  if ('open' === this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n","/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar XHR = require('./polling-xhr');\nvar JSONP = require('./polling-jsonp');\nvar websocket = require('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n","\n/**\n * Module requirements.\n */\n\nvar Polling = require('./polling');\nvar inherit = require('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    if (!global.___eio) global.___eio = [];\n    callbacks = global.___eio;\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (global.document && global.addEventListener) {\n    global.addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function (e) {\n    self.onError('jsonp poll error', e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  if (insertAt) {\n    insertAt.parentNode.insertBefore(script, insertAt);\n  } else {\n    (document.head || document.body).appendChild(script);\n  }\n  this.script = script;\n\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch (e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function () {\n      if (self.iframe.readyState === 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n","/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar Polling = require('./polling');\nvar Emitter = require('component-emitter');\nvar inherit = require('component-inherit');\nvar debug = require('debug')('engine.io-client:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n  this.extraHeaders = opts.extraHeaders;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname !== global.location.hostname ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 2) {\n          var contentType;\n          try {\n            contentType = xhr.getResponseHeader('Content-Type');\n          } catch (e) {}\n          if (contentType === 'application/octet-stream') {\n            xhr.responseType = 'arraybuffer';\n          }\n        }\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type');\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      data = this.xhr.responseText;\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (global.document) {\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n","/**\n * Module dependencies.\n */\n\nvar Transport = require('../transport');\nvar parseqs = require('parseqs');\nvar parser = require('engine.io-parser');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = require('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function () {\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function () {\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n","/**\n * Module dependencies.\n */\n\nvar Transport = require('../transport');\nvar parser = require('engine.io-parser');\nvar parseqs = require('parseqs');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:websocket');\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\nvar NodeWebSocket;\nif (typeof window === 'undefined') {\n  try {\n    NodeWebSocket = require('ws');\n  } catch (e) { }\n}\n\n/**\n * Get either the `WebSocket` or `MozWebSocket` globals\n * in the browser or try to resolve WebSocket-compatible\n * interface exposed by `ws` for Node-like environment.\n */\n\nvar WebSocket = BrowserWebSocket;\nif (!WebSocket && typeof window === 'undefined') {\n  WebSocket = NodeWebSocket;\n}\n\n/**\n * Module exports.\n */\n\nmodule.exports = WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\n  this.protocols = opts.protocols;\n  if (!this.usingBrowserWebSocket) {\n    WebSocket = NodeWebSocket;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name = 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary = true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen = function () {\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var uri = this.uri();\n  var protocols = this.protocols;\n  var opts = {\n    agent: this.agent,\n    perMessageDeflate: this.perMessageDeflate\n  };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n  if (this.localAddress) {\n    opts.localAddress = this.localAddress;\n  }\n\n  try {\n    this.ws = this.usingBrowserWebSocket ? (protocols ? new WebSocket(uri, protocols) : new WebSocket(uri)) : new WebSocket(uri, protocols, opts);\n  } catch (err) {\n    return this.emit('error', err);\n  }\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'nodebuffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners = function () {\n  var self = this;\n\n  this.ws.onopen = function () {\n    self.onOpen();\n  };\n  this.ws.onclose = function () {\n    self.onClose();\n  };\n  this.ws.onmessage = function (ev) {\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function (e) {\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function (packet) {\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\n        if (!self.usingBrowserWebSocket) {\n          // always create a new object (GH-437)\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (self.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug('websocket closed before onclose event');\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done () {\n    self.emit('flush');\n\n    // fake drain\n    // defer to next tick to allow Socket to clear writeBuffer\n    setTimeout(function () {\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose = function () {\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose = function () {\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  // avoid port if default for schema\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\n    ('ws' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check = function () {\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};\n","// browser shim for xmlhttprequest module\n\nvar hasCORS = require('has-cors');\n\nmodule.exports = function (opts) {\n  var xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\n    } catch (e) { }\n  }\n};\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","/**\n * Module dependencies.\n */\n\nvar keys = require('./keys');\nvar hasBinary = require('has-binary2');\nvar sliceBuffer = require('arraybuffer.slice');\nvar after = require('after');\nvar utf8 = require('./utf8');\n\nvar base64encoder;\nif (global && global.ArrayBuffer) {\n  base64encoder = require('base64-arraybuffer');\n}\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = require('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n  // String data\n  if (typeof data === 'string') {\n    if (data.charAt(0) === 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n      if (data === false) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, { strict: false });\n  } catch (e) {\n    return false;\n  }\n  return data;\n}\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!base64encoder) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '', n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    }\n\n    if (length === '' || (length != (n = Number(length)))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = exports.decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var ret = callback(packet, i + n, l);\n      if (false === ret) return;\n    }\n\n    // advance cursor\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] === 255) break;\n\n      // 310 = char length of Number.MAX_VALUE\n      if (msgLength.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n","\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports = Object.keys || function keys (obj){\n  var arr = [];\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n","/*! https://mths.be/utf8js v2.1.2 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint, strict) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tif (strict) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t\t' is not a scalar value'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint, strict) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tif (!checkScalarValue(codePoint, strict)) {\n\t\t\t\tcodePoint = 0xFFFD;\n\t\t\t}\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string, opts) {\n\t\topts = opts || {};\n\t\tvar strict = false !== opts.strict;\n\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint, strict);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol(strict) {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\treturn checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString, opts) {\n\t\topts = opts || {};\n\t\tvar strict = false !== opts.strict;\n\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol(strict)) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.1.2',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn utf8;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n","/* global Blob File */\n\n/*\n * Module requirements.\n */\n\nvar isArray = require('isarray');\n\nvar toString = Object.prototype.toString;\nvar withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';\nvar withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';\n\n/**\n * Module exports.\n */\n\nmodule.exports = hasBinary;\n\n/**\n * Checks for binary data.\n *\n * Supports Buffer, ArrayBuffer, Blob and File.\n *\n * @param {Object} anything\n * @api public\n */\n\nfunction hasBinary (obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  if (isArray(obj)) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      if (hasBinary(obj[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if ((typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||\n     (typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||\n     (withNativeBlob && obj instanceof Blob) ||\n     (withNativeFile && obj instanceof File)\n    ) {\n    return true;\n  }\n\n  // see: https://github.com/Automattic/has-binary/pull/4\n  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {\n    return hasBinary(obj.toJSON(), true);\n  }\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\n    'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n","\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};","/**\r\n * Compiles a querystring\r\n * Returns string representation of the object\r\n *\r\n * @param {Object}\r\n * @api private\r\n */\r\n\r\nexports.encode = function (obj) {\r\n  var str = '';\r\n\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      if (str.length) str += '&';\r\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\r\n    }\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * Parses a simple querystring into an object\r\n *\r\n * @param {String} qs\r\n * @api private\r\n */\r\n\r\nexports.decode = function(qs){\r\n  var qry = {};\r\n  var pairs = qs.split('&');\r\n  for (var i = 0, l = pairs.length; i < l; i++) {\r\n    var pair = pairs[i].split('=');\r\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n  }\r\n  return qry;\r\n};\r\n","/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\r\n\r\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\r\n\r\nvar parts = [\r\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\r\n];\r\n\r\nmodule.exports = function parseuri(str) {\r\n    var src = str,\r\n        b = str.indexOf('['),\r\n        e = str.indexOf(']');\r\n\r\n    if (b != -1 && e != -1) {\r\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\r\n    }\r\n\r\n    var m = re.exec(str || ''),\r\n        uri = {},\r\n        i = 14;\r\n\r\n    while (i--) {\r\n        uri[parts[i]] = m[i] || '';\r\n    }\r\n\r\n    if (b != -1 && e != -1) {\r\n        uri.source = src;\r\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\r\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\r\n        uri.ipv6uri = true;\r\n    }\r\n\r\n    return uri;\r\n};\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\n/**\n * Module dependencies.\n */\n\nvar url = require('./url');\nvar parser = require('socket.io-parser');\nvar Manager = require('./manager');\nvar debug = require('debug')('socket.io-client');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = lookup;\n\n/**\n * Managers cache.\n */\n\nvar cache = exports.managers = {};\n\n/**\n * Looks up an existing `Manager` for multiplexing.\n * If the user summons:\n *\n *   `io('http://localhost/a');`\n *   `io('http://localhost/b');`\n *\n * We reuse the existing instance based on same scheme/port/host,\n * and we initialize sockets for each namespace.\n *\n * @api public\n */\n\nfunction lookup (uri, opts) {\n  if (typeof uri === 'object') {\n    opts = uri;\n    uri = undefined;\n  }\n\n  opts = opts || {};\n\n  var parsed = url(uri);\n  var source = parsed.source;\n  var id = parsed.id;\n  var path = parsed.path;\n  var sameNamespace = cache[id] && path in cache[id].nsps;\n  var newConnection = opts.forceNew || opts['force new connection'] ||\n                      false === opts.multiplex || sameNamespace;\n\n  var io;\n\n  if (newConnection) {\n    debug('ignoring socket cache for %s', source);\n    io = Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      debug('new io instance for %s', source);\n      cache[id] = Manager(source, opts);\n    }\n    io = cache[id];\n  }\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.query;\n  }\n  return io.socket(parsed.path, opts);\n}\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = parser.protocol;\n\n/**\n * `connect`.\n *\n * @param {String} uri\n * @api public\n */\n\nexports.connect = lookup;\n\n/**\n * Expose constructors for standalone build.\n *\n * @api public\n */\n\nexports.Manager = require('./manager');\nexports.Socket = require('./socket');\n","\n/**\n * Module dependencies.\n */\n\nvar eio = require('engine.io-client');\nvar Socket = require('./socket');\nvar Emitter = require('component-emitter');\nvar parser = require('socket.io-parser');\nvar on = require('./on');\nvar bind = require('component-bind');\nvar debug = require('debug')('socket.io-client:manager');\nvar indexOf = require('indexof');\nvar Backoff = require('backo2');\n\n/**\n * IE6+ hasOwnProperty\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Module exports\n */\n\nmodule.exports = Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager (uri, opts) {\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri && ('object' === typeof uri)) {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n\n  opts.path = opts.path || '/socket.io';\n  this.nsps = {};\n  this.subs = [];\n  this.opts = opts;\n  this.reconnection(opts.reconnection !== false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff = new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n  this.readyState = 'closed';\n  this.uri = uri;\n  this.connecting = [];\n  this.lastPing = null;\n  this.encoding = false;\n  this.packetBuffer = [];\n  var _parser = opts.parser || parser;\n  this.encoder = new _parser.Encoder();\n  this.decoder = new _parser.Decoder();\n  this.autoConnect = opts.autoConnect !== false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll = function () {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n    }\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds = function () {\n  for (var nsp in this.nsps) {\n    if (has.call(this.nsps, nsp)) {\n      this.nsps[nsp].id = this.generateId(nsp);\n    }\n  }\n};\n\n/**\n * generate `socket.id` for the given `nsp`\n *\n * @param {String} nsp\n * @return {String}\n * @api private\n */\n\nManager.prototype.generateId = function (nsp) {\n  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection = function (v) {\n  if (!arguments.length) return this._reconnection;\n  this._reconnection = !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts = function (v) {\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts = v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay = function (v) {\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay = v;\n  this.backoff && this.backoff.setMin(v);\n  return this;\n};\n\nManager.prototype.randomizationFactor = function (v) {\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor = v;\n  this.backoff && this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax = function (v) {\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax = v;\n  this.backoff && this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout = function (v) {\n  if (!arguments.length) return this._timeout;\n  this._timeout = v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen = function () {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open =\nManager.prototype.connect = function (fn, opts) {\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n\n  debug('opening %s', this.uri);\n  this.engine = eio(this.uri, this.opts);\n  var socket = this.engine;\n  var self = this;\n  this.readyState = 'opening';\n  this.skipReconnect = false;\n\n  // emit `open`\n  var openSub = on(socket, 'open', function () {\n    self.onopen();\n    fn && fn();\n  });\n\n  // emit `connect_error`\n  var errorSub = on(socket, 'error', function (data) {\n    debug('connect_error');\n    self.cleanup();\n    self.readyState = 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err = new Error('Connection error');\n      err.data = data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !== this._timeout) {\n    var timeout = this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    // set timer\n    var timer = setTimeout(function () {\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen = function () {\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState = 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket = this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\n  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n};\n\n/**\n * Called upon a ping.\n *\n * @api private\n */\n\nManager.prototype.onping = function () {\n  this.lastPing = new Date();\n  this.emitAll('ping');\n};\n\n/**\n * Called upon a packet.\n *\n * @api private\n */\n\nManager.prototype.onpong = function () {\n  this.emitAll('pong', new Date() - this.lastPing);\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata = function (data) {\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror = function (err) {\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket = function (nsp, opts) {\n  var socket = this.nsps[nsp];\n  if (!socket) {\n    socket = new Socket(this, nsp, opts);\n    this.nsps[nsp] = socket;\n    var self = this;\n    socket.on('connecting', onConnecting);\n    socket.on('connect', function () {\n      socket.id = self.generateId(nsp);\n    });\n\n    if (this.autoConnect) {\n      // manually call here since connecting event is fired before listening\n      onConnecting();\n    }\n  }\n\n  function onConnecting () {\n    if (!~indexOf(self.connecting, socket)) {\n      self.connecting.push(socket);\n    }\n  }\n\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy = function (socket) {\n  var index = indexOf(this.connecting, socket);\n  if (~index) this.connecting.splice(index, 1);\n  if (this.connecting.length) return;\n\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet = function (packet) {\n  debug('writing packet %j', packet);\n  var self = this;\n  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\n\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding = true;\n    this.encoder.encode(packet, function (encodedPackets) {\n      for (var i = 0; i < encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i], packet.options);\n      }\n      self.encoding = false;\n      self.processPacketQueue();\n    });\n  } else { // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue = function () {\n  if (this.packetBuffer.length > 0 && !this.encoding) {\n    var pack = this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup = function () {\n  debug('cleanup');\n\n  var subsLength = this.subs.length;\n  for (var i = 0; i < subsLength; i++) {\n    var sub = this.subs.shift();\n    sub.destroy();\n  }\n\n  this.packetBuffer = [];\n  this.encoding = false;\n  this.lastPing = null;\n\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close =\nManager.prototype.disconnect = function () {\n  debug('disconnect');\n  this.skipReconnect = true;\n  this.reconnecting = false;\n  if ('opening' === this.readyState) {\n    // `onclose` will not fire because\n    // an open event never happened\n    this.cleanup();\n  }\n  this.backoff.reset();\n  this.readyState = 'closed';\n  if (this.engine) this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose = function (reason) {\n  debug('onclose');\n\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.emit('close', reason);\n\n  if (this._reconnection && !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect = function () {\n  if (this.reconnecting || this.skipReconnect) return this;\n\n  var self = this;\n\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting = false;\n  } else {\n    var delay = this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n\n    this.reconnecting = true;\n    var timer = setTimeout(function () {\n      if (self.skipReconnect) return;\n\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n\n      self.open(function (err) {\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting = false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n\n    this.subs.push({\n      destroy: function () {\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect = function () {\n  var attempt = this.backoff.attempts;\n  this.reconnecting = false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};\n","\n/**\n * Module exports.\n */\n\nmodule.exports = on;\n\n/**\n * Helper for subscriptions.\n *\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n * @param {String} event name\n * @param {Function} callback\n * @api public\n */\n\nfunction on (obj, ev, fn) {\n  obj.on(ev, fn);\n  return {\n    destroy: function () {\n      obj.removeListener(ev, fn);\n    }\n  };\n}\n","\n/**\n * Module dependencies.\n */\n\nvar parser = require('socket.io-parser');\nvar Emitter = require('component-emitter');\nvar toArray = require('to-array');\nvar on = require('./on');\nvar bind = require('component-bind');\nvar debug = require('debug')('socket.io-client:socket');\nvar parseqs = require('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = Socket;\n\n/**\n * Internal events (blacklisted).\n * These events can't be emitted by the user.\n *\n * @api private\n */\n\nvar events = {\n  connect: 1,\n  connect_error: 1,\n  connect_timeout: 1,\n  connecting: 1,\n  disconnect: 1,\n  error: 1,\n  reconnect: 1,\n  reconnect_attempt: 1,\n  reconnect_failed: 1,\n  reconnect_error: 1,\n  reconnecting: 1,\n  ping: 1,\n  pong: 1\n};\n\n/**\n * Shortcut to `Emitter#emit`.\n */\n\nvar emit = Emitter.prototype.emit;\n\n/**\n * `Socket` constructor.\n *\n * @api public\n */\n\nfunction Socket (io, nsp, opts) {\n  this.io = io;\n  this.nsp = nsp;\n  this.json = this; // compat\n  this.ids = 0;\n  this.acks = {};\n  this.receiveBuffer = [];\n  this.sendBuffer = [];\n  this.connected = false;\n  this.disconnected = true;\n  if (opts && opts.query) {\n    this.query = opts.query;\n  }\n  if (this.io.autoConnect) this.open();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Subscribe to open, close and packet events\n *\n * @api private\n */\n\nSocket.prototype.subEvents = function () {\n  if (this.subs) return;\n\n  var io = this.io;\n  this.subs = [\n    on(io, 'open', bind(this, 'onopen')),\n    on(io, 'packet', bind(this, 'onpacket')),\n    on(io, 'close', bind(this, 'onclose'))\n  ];\n};\n\n/**\n * \"Opens\" the socket.\n *\n * @api public\n */\n\nSocket.prototype.open =\nSocket.prototype.connect = function () {\n  if (this.connected) return this;\n\n  this.subEvents();\n  this.io.open(); // ensure open\n  if ('open' === this.io.readyState) this.onopen();\n  this.emit('connecting');\n  return this;\n};\n\n/**\n * Sends a `message` event.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.send = function () {\n  var args = toArray(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n\n/**\n * Override `emit`.\n * If the event is in `events`, it's emitted normally.\n *\n * @param {String} event name\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.emit = function (ev) {\n  if (events.hasOwnProperty(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n\n  var args = toArray(arguments);\n  var packet = { type: parser.EVENT, data: args };\n\n  packet.options = {};\n  packet.options.compress = !this.flags || false !== this.flags.compress;\n\n  // event ack callback\n  if ('function' === typeof args[args.length - 1]) {\n    debug('emitting packet with ack id %d', this.ids);\n    this.acks[this.ids] = args.pop();\n    packet.id = this.ids++;\n  }\n\n  if (this.connected) {\n    this.packet(packet);\n  } else {\n    this.sendBuffer.push(packet);\n  }\n\n  delete this.flags;\n\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.packet = function (packet) {\n  packet.nsp = this.nsp;\n  this.io.packet(packet);\n};\n\n/**\n * Called upon engine `open`.\n *\n * @api private\n */\n\nSocket.prototype.onopen = function () {\n  debug('transport is open - connecting');\n\n  // write connect packet if necessary\n  if ('/' !== this.nsp) {\n    if (this.query) {\n      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;\n      debug('sending connect packet with query %s', query);\n      this.packet({type: parser.CONNECT, query: query});\n    } else {\n      this.packet({type: parser.CONNECT});\n    }\n  }\n};\n\n/**\n * Called upon engine `close`.\n *\n * @param {String} reason\n * @api private\n */\n\nSocket.prototype.onclose = function (reason) {\n  debug('close (%s)', reason);\n  this.connected = false;\n  this.disconnected = true;\n  delete this.id;\n  this.emit('disconnect', reason);\n};\n\n/**\n * Called with socket packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onpacket = function (packet) {\n  if (packet.nsp !== this.nsp) return;\n\n  switch (packet.type) {\n    case parser.CONNECT:\n      this.onconnect();\n      break;\n\n    case parser.EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.BINARY_EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.ACK:\n      this.onack(packet);\n      break;\n\n    case parser.BINARY_ACK:\n      this.onack(packet);\n      break;\n\n    case parser.DISCONNECT:\n      this.ondisconnect();\n      break;\n\n    case parser.ERROR:\n      this.emit('error', packet.data);\n      break;\n  }\n};\n\n/**\n * Called upon a server event.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onevent = function (packet) {\n  var args = packet.data || [];\n  debug('emitting event %j', args);\n\n  if (null != packet.id) {\n    debug('attaching ack callback to event');\n    args.push(this.ack(packet.id));\n  }\n\n  if (this.connected) {\n    emit.apply(this, args);\n  } else {\n    this.receiveBuffer.push(args);\n  }\n};\n\n/**\n * Produces an ack callback to emit with an event.\n *\n * @api private\n */\n\nSocket.prototype.ack = function (id) {\n  var self = this;\n  var sent = false;\n  return function () {\n    // prevent double callbacks\n    if (sent) return;\n    sent = true;\n    var args = toArray(arguments);\n    debug('sending ack %j', args);\n\n    self.packet({\n      type: parser.ACK,\n      id: id,\n      data: args\n    });\n  };\n};\n\n/**\n * Called upon a server acknowlegement.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onack = function (packet) {\n  var ack = this.acks[packet.id];\n  if ('function' === typeof ack) {\n    debug('calling ack %s with %j', packet.id, packet.data);\n    ack.apply(this, packet.data);\n    delete this.acks[packet.id];\n  } else {\n    debug('bad ack %s', packet.id);\n  }\n};\n\n/**\n * Called upon server connect.\n *\n * @api private\n */\n\nSocket.prototype.onconnect = function () {\n  this.connected = true;\n  this.disconnected = false;\n  this.emit('connect');\n  this.emitBuffered();\n};\n\n/**\n * Emit buffered events (received and emitted).\n *\n * @api private\n */\n\nSocket.prototype.emitBuffered = function () {\n  var i;\n  for (i = 0; i < this.receiveBuffer.length; i++) {\n    emit.apply(this, this.receiveBuffer[i]);\n  }\n  this.receiveBuffer = [];\n\n  for (i = 0; i < this.sendBuffer.length; i++) {\n    this.packet(this.sendBuffer[i]);\n  }\n  this.sendBuffer = [];\n};\n\n/**\n * Called upon server disconnect.\n *\n * @api private\n */\n\nSocket.prototype.ondisconnect = function () {\n  debug('server disconnect (%s)', this.nsp);\n  this.destroy();\n  this.onclose('io server disconnect');\n};\n\n/**\n * Called upon forced client/server side disconnections,\n * this method ensures the manager stops tracking us and\n * that reconnections don't get triggered for this.\n *\n * @api private.\n */\n\nSocket.prototype.destroy = function () {\n  if (this.subs) {\n    // clean subscriptions to avoid reconnections\n    for (var i = 0; i < this.subs.length; i++) {\n      this.subs[i].destroy();\n    }\n    this.subs = null;\n  }\n\n  this.io.destroy(this);\n};\n\n/**\n * Disconnects the socket manually.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.close =\nSocket.prototype.disconnect = function () {\n  if (this.connected) {\n    debug('performing disconnect (%s)', this.nsp);\n    this.packet({ type: parser.DISCONNECT });\n  }\n\n  // remove socket from pool\n  this.destroy();\n\n  if (this.connected) {\n    // fire events\n    this.onclose('io client disconnect');\n  }\n  return this;\n};\n\n/**\n * Sets the compress flag.\n *\n * @param {Boolean} if `true`, compresses the sending data\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.compress = function (compress) {\n  this.flags = this.flags || {};\n  this.flags.compress = compress;\n  return this;\n};\n","\n/**\n * Module dependencies.\n */\n\nvar parseuri = require('parseuri');\nvar debug = require('debug')('socket.io-client:url');\n\n/**\n * Module exports.\n */\n\nmodule.exports = url;\n\n/**\n * URL parser.\n *\n * @param {String} url\n * @param {Object} An object meant to mimic window.location.\n *                 Defaults to window.location.\n * @api public\n */\n\nfunction url (uri, loc) {\n  var obj = uri;\n\n  // default to window.location\n  loc = loc || global.location;\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\n\n  // relative path support\n  if ('string' === typeof uri) {\n    if ('/' === uri.charAt(0)) {\n      if ('/' === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug('protocol-less url %s', uri);\n      if ('undefined' !== typeof loc) {\n        uri = loc.protocol + '//' + uri;\n      } else {\n        uri = 'https://' + uri;\n      }\n    }\n\n    // parse\n    debug('parse %s', uri);\n    obj = parseuri(uri);\n  }\n\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = '80';\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = '443';\n    }\n  }\n\n  obj.path = obj.path || '/';\n\n  var ipv6 = obj.host.indexOf(':') !== -1;\n  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\n\n  // define unique id\n  obj.id = obj.protocol + '://' + host + ':' + obj.port;\n  // define href\n  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));\n\n  return obj;\n}\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray = require('isarray');\nvar isBuf = require('./is-buffer');\nvar toString = Object.prototype.toString;\nvar withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';\nvar withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket = function(packet) {\n  var buffers = [];\n  var packetData = packet.data;\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData, buffers);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\nfunction _deconstructPacket(data, buffers) {\n  if (!data) return data;\n\n  if (isBuf(data)) {\n    var placeholder = { _placeholder: true, num: buffers.length };\n    buffers.push(data);\n    return placeholder;\n  } else if (isArray(data)) {\n    var newData = new Array(data.length);\n    for (var i = 0; i < data.length; i++) {\n      newData[i] = _deconstructPacket(data[i], buffers);\n    }\n    return newData;\n  } else if (typeof data === 'object' && !(data instanceof Date)) {\n    var newData = {};\n    for (var key in data) {\n      newData[key] = _deconstructPacket(data[key], buffers);\n    }\n    return newData;\n  }\n  return data;\n}\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket = function(packet, buffers) {\n  packet.data = _reconstructPacket(packet.data, buffers);\n  packet.attachments = undefined; // no longer useful\n  return packet;\n};\n\nfunction _reconstructPacket(data, buffers) {\n  if (!data) return data;\n\n  if (data && data._placeholder) {\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n  } else if (isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      data[i] = _reconstructPacket(data[i], buffers);\n    }\n  } else if (typeof data === 'object') {\n    for (var key in data) {\n      data[key] = _reconstructPacket(data[key], buffers);\n    }\n  }\n\n  return data;\n}\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs = function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader = new FileReader();\n      fileReader.onload = function() { // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        }\n        else {\n          bloblessData = this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n","\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('socket.io-parser');\nvar Emitter = require('component-emitter');\nvar hasBin = require('has-binary2');\nvar binary = require('./binary');\nvar isBuf = require('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'ACK',\n  'ERROR',\n  'BINARY_EVENT',\n  'BINARY_ACK'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  if ((obj.type === exports.EVENT || obj.type === exports.ACK) && hasBin(obj.data)) {\n    obj.type = obj.type === exports.EVENT ? exports.BINARY_EVENT : exports.BINARY_ACK;\n  }\n\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    encodeAsBinary(obj, callback);\n  }\n  else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n\n  // first is type\n  var str = '' + obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {\n    str += obj.attachments + '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' !== obj.nsp) {\n    str += obj.nsp + ',';\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    str += JSON.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if (typeof obj === 'string') {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  }\n  else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  }\n  else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var i = 0;\n  // look up type\n  var p = {\n    type: Number(str.charAt(0))\n  };\n\n  if (null == exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {\n    var buf = '';\n    while (str.charAt(++i) !== '-') {\n      buf += str.charAt(i);\n      if (i == str.length) break;\n    }\n    if (buf != Number(buf) || str.charAt(i) !== '-') {\n      throw new Error('Illegal attachments');\n    }\n    p.attachments = Number(buf);\n  }\n\n  // look up namespace (if any)\n  if ('/' === str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' === c) break;\n      p.nsp += c;\n      if (i === str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' !== next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i === str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    p = tryParse(p, str.substr(i));\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(p, str) {\n  try {\n    p.data = JSON.parse(str);\n  } catch(e){\n    return error();\n  }\n  return p; \n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error() {\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n","\nmodule.exports = isBuf;\n\n/**\n * Returns true if obj is a buffer or an arraybuffer.\n *\n * @api private\n */\n\nfunction isBuf(obj) {\n  return (global.Buffer && global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer && obj instanceof ArrayBuffer);\n}\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","module.exports = toArray\n\nfunction toArray(list, index) {\n    var array = []\n\n    index = index || 0\n\n    for (var i = index || 0; i < list.length; i++) {\n        array[i - index] = list[i]\n    }\n\n    return array\n}\n","'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n","class mcec {\n\n    constructor() {\n\n        this.dev_mode = function() {\n            if (typeof window !== 'undefined') {\n                // this means we are client\n                return (window.location.hostname.indexOf('localhost') !== -1 || window.location.hostname.indexOf('127.0.0.1') !== -1 || window.location.href.indexOf('#dev_mode') !== -1);\n            } else {\n                // this means we are server\n                for(var i=0; i<process.argv.length; i++) {\n                    if(process.argv[i] === \"dev\") return true;\n                }\n            }\n            return false;\n        }();\n\n        let prod_config = {\n            server_ip: \"game.mcec.io\",\n            server_port: \"9000\"\n        };\n\n        let dev_config = {\n            server_ip: \"game.mcec.io\",\n            server_port: \"9200\"\n        };\n\n        this._config = (this.dev_mode ? dev_config : prod_config);\n\n        this.log(\"Initializing\");\n        if(this.dev_mode) this.log(\"Set dev mode\");\n    }\n\n    config(name) {\n        return this._config[name];\n    }\n\n    log() {\n        if(!this.isDevMode()) return;\n\n        var args = [\"[MCEC]\"];\n\n        for(var i in arguments) {\n            var arg = arguments[ i ];\n\n            args.push(arg);\n        }\n\n        console.log.apply(null, args);\n    }\n\n    //////\n\n    bindKey(key, callback) {\n\n        if(typeof key == \"object\") {\n            for(var i in key) {\n                this.bindKey(key[i], callback);\n            }\n\n            return;\n        }\n\n        if(typeof this.keyBinds[ key ] == \"undefined\") {\n            this.keyBinds[key] = [];\n        }\n\n        this.keyBinds[ key ].push(callback);\n\n        this.log(\"Added keybind for key #\" + key);\n    }\n\n    bindClick(down, callback) {\n\n        if(typeof this.mouseBinds[ down ] == \"undefined\") {\n            this.mouseBinds[ down ] = [];\n        }\n\n        this.mouseBinds[ down ].push(callback);\n\n        this.log(\"Added mouse bind for down = \" + (down == true));\n    }\n\n    bindMove(callback) {\n\n        if(typeof this.mouseMoveBinds == \"undefined\") {\n            this.mouseMoveBinds = [];\n        }\n\n        this.mouseMoveBinds.push(callback);\n\n        this.log(\"Added mouse bind for movement\");\n    }\n\n    getViewportSize () {\n        return {\n            width: window.innerWidth, height: window.innerHeight\n        };\n    }\n\n    isDevMode() {\n        return this.dev_mode;\n    }\n\n    getServerAddress() {\n        return this.config('server_ip') + \":\" + this.config('server_port');\n    }\n\n    setApp(inst) {\n        this.app = inst;\n    }\n\n    getApp() {\n        return this.app;\n    }\n\n    key(key) {\n        var key = this.keysPressed[key];\n        return ((key) ? key : false);\n    }\n\n    keyDown(key) {\n        return this.key(key);\n    }\n\n    pressKey(key, down) {\n        this.keysPressed[ key ] = down;\n\n        if(down) {\n            if (typeof this.keyBinds[key] == \"undefined\") return false;\n\n            for(var i=0; i<this.keyBinds[ key ].length; i++) {\n                this.keyBinds[ key ][ i ]();\n            }\n        }\n    }\n\n    pressMouse(down, e) {\n        this.mouseDown = down;\n\n        if (typeof this.mouseBinds[ down ] == \"undefined\") return false;\n\n        for(var i=0; i<this.mouseBinds[ down ].length; i++) {\n            this.mouseBinds[ down ][ i ](e);\n        }\n    }\n\n    moveMouse(e) {\n        this.mouseMove = e;\n\n        this.mouse = new THREE.Vector2();\n        this.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n        this.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n        if (typeof this.mouseMoveBinds == \"undefined\") return false;\n\n        for(var i=0; i<this.mouseMoveBinds.length; i++) {\n            this.mouseMoveBinds[ i ](e);\n        }\n    }\n\n    ifKeyDown(key, callback) {\n        if(this.key(key)) {\n            callback();\n        }\n    }\n\n    watchControls (domElement) {\n        this.log(\"Watching mouse & keys\");\n\n        var self = this;\n\n        //\n        // KEYS\n        //\n\n        this.keysPressed = {};\n        this.keyBinds = {};\n\n        var handler = function (down, self) {\n            return function (e) {\n                var key = e.keyCode;\n                if (key >= 0) {\n                    self.pressKey(key, down);\n                    //e.preventDefault();\n                }\n            };\n        };\n\n        window.addEventListener(\"keydown\", handler(true, this), false);\n        window.addEventListener(\"keyup\", handler(false, this), false);\n\n        //\n        // MOUSE BUTTONS\n        //\n\n        this.mouseDown = false;\n        this.mouseBinds = {};\n\n        handler = function (down, self) {\n            return function (e) {\n                self.pressMouse(down, e);\n                //e.preventDefault();\n            };\n        };\n\n        window.addEventListener(\"mousedown\", handler(true, this), false);\n        window.addEventListener(\"mouseup\", handler(false, this), false);\n\n        //\n        // MOUSE MOVEMENT\n        //\n\n        this.mouseDown = false;\n        this.mouseBinds = {};\n\n        handler = function (self) {\n            return function (e) {\n                self.moveMouse(e);\n                //e.preventDefault();\n            };\n        };\n\n        window.addEventListener( 'mousemove', handler(this) );\n\n        //\n        // TOUCH CONTROLS BITCH\n        //\n\n        handler = function (event) {\n            var touches = event.changedTouches,\n                first = touches[0],\n                type = \"\";\n            switch(event.type)\n            {\n                //case \"touchstart\": type = \"mousedown\"; break;\n                //case \"touchmove\":  type = \"mousemove\"; break;\n                case \"touchend\":   type = \"mousedown\";   break;\n                default:           return;\n            }\n\n            // initMouseEvent(type, canBubble, cancelable, view, clickCount,\n            //                screenX, screenY, clientX, clientY, ctrlKey,\n            //                altKey, shiftKey, metaKey, button, relatedTarget);\n\n            var simulatedEvent = window.createEvent(\"MouseEvent\");\n            simulatedEvent.initMouseEvent(type, true, true, window, 1,\n                first.screenX, first.screenY,\n                first.clientX, first.clientY, false,\n                false, false, false, 0/*left*/, null);\n\n            first.target.dispatchEvent(simulatedEvent);\n            //event.preventDefault();\n        };\n\n        window.addEventListener(\"touchstart\", handler, true);\n        window.addEventListener(\"touchmove\", handler, true);\n        window.addEventListener(\"touchend\", handler, true);\n        window.addEventListener(\"touchcancel\", handler, true);\n\n        //\n        // BLOCK RIGHT CLICK\n        //\n\n        window.oncontextmenu = function(e) { e.preventDefault(); return false; };\n    }\n\n    random(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    loop(objects, callback) {\n        for(var i in objects) {\n            var obj = objects[ i ];\n\n            callback(obj);\n        }\n    }\n}\n\nmodule.exports = new mcec();"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}